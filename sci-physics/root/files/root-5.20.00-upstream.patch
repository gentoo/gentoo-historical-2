--- root.orig/core/base/src/TSystem.cxx	2008-09-23 10:49:37.231691313 +0100
+++ root/core/base/src/TSystem.cxx	2008-09-23 10:41:11.373018362 +0100
@@ -49,6 +49,7 @@
 #include "TUrl.h"
 #include "TVirtualMutex.h"
 #include "compiledata.h"
+#include "RConfigure.h"
 
 const char *gRootDir;
 const char *gProgName;
--- root.orig/core/meta/src/TClass.cxx	2008-09-23 10:49:33.755717294 +0100
+++ root/core/meta/src/TClass.cxx	2008-09-23 10:41:09.145105805 +0100
@@ -3677,14 +3677,14 @@
 
    Int_t pos = b.Length();
 
-   b.ReadString(s, maxsize);
-   while (strlen(s)==maxsize) {
+   b.ReadString(s, maxsize); // Reads at most maxsize - 1 characters, plus null at end.
+   while (strlen(s) == (maxsize - 1)) {
       // The classname is too large, try again with a large buffer.
       b.SetBufferOffset(pos);
       maxsize = 2*maxsize;
       delete [] s;
       s = new char[maxsize];
-      b.ReadString(s, maxsize);
+      b.ReadString(s, maxsize); // Reads at most maxsize - 1 characters, plus null at end.
    }
 
    TClass *cl = TClass::GetClass(s, kTRUE);
--- root.orig/hist/hist/inc/TF1.h	2008-09-23 10:50:43.230340286 +0100
+++ root/hist/hist/inc/TF1.h	2008-09-23 10:42:51.748812440 +0100
@@ -201,8 +201,8 @@
    virtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;
    virtual Double_t EvalPar(const Double_t *x, const Double_t *params=0);
    // for using TF1 as a callable object (functor)
-   virtual Double_t operator()(Double_t x, Double_t y=0, Double_t z = 0, Double_t t = 0) const { return Eval(x,y,z,t); }
-   virtual Double_t operator()(const Double_t *x, const Double_t *params=0) { return EvalPar(x,params); }
+   virtual Double_t operator()(Double_t x, Double_t y=0, Double_t z = 0, Double_t t = 0) const; 
+   virtual Double_t operator()(const Double_t *x, const Double_t *params=0);  
    virtual void     ExecuteEvent(Int_t event, Int_t px, Int_t py);
    virtual void     FixParameter(Int_t ipar, Double_t value);
        Double_t     GetChisquare() const {return fChisquare;}
@@ -294,6 +294,15 @@
    ClassDef(TF1,7)  //The Parametric 1-D function
 };
 
+inline Double_t TF1::operator()(Double_t x, Double_t y, Double_t z, Double_t t) const  
+   { return Eval(x,y,z,t); }
+inline Double_t TF1::operator()(const Double_t *x, const Double_t *params)
+   { 
+      if (fMethodCall) InitArgs(x,params);
+      return EvalPar(x,params); 
+   }
+
+
 inline void TF1::SetRange(Double_t xmin, Double_t,  Double_t xmax, Double_t)
    { TF1::SetRange(xmin, xmax); }
 inline void TF1::SetRange(Double_t xmin, Double_t, Double_t,  Double_t xmax, Double_t, Double_t)
--- root.orig/tree/tree/src/TBasket.cxx	2008-09-23 10:50:20.366811302 +0100
+++ root/tree/tree/src/TBasket.cxx	2008-09-23 10:42:14.515788582 +0100
@@ -612,13 +612,10 @@
    TDirectory::TContext ctxt(0);
    TFile *file = fBranch->GetFile(kWrite);
    if (!file) return 0;
-
-   fBranch->GetDirectory()->cd();
    if (!file->IsWritable()) { 
       return -1;
    }
-   
-   fMotherDir = fBranch->GetDirectory();
+   fMotherDir = file; // fBranch->GetDirectory();
    
    if (fBufferRef->TestBit(TBufferFile::kNotDecompressed)) {
       // Read the basket information that was saved inside the buffer.
@@ -632,7 +629,7 @@
 
       fBuffer = fBufferRef->Buffer();
 
-      Create(nout);
+      Create(nout,file);
       fBufferRef->SetBufferOffset(0);
       fHeaderOnly = kTRUE;
 
@@ -683,7 +680,7 @@
             nout = fObjlen;
             delete [] fBuffer;
             fBuffer = fBufferRef->Buffer();
-            Create(fObjlen);
+            Create(fObjlen,file);
             fBufferRef->SetBufferOffset(0);
 
             Streamer(*fBufferRef);         //write key itself again
@@ -699,7 +696,7 @@
          nzip   += kMAXBUF;
       }
       nout = noutot;
-      Create(noutot);
+      Create(noutot,file);
       fBufferRef->SetBufferOffset(0);
 
       Streamer(*fBufferRef);         //write key itself again
@@ -707,7 +704,7 @@
       delete fBufferRef; fBufferRef = 0;
    } else {
       fBuffer = fBufferRef->Buffer();
-      Create(fObjlen);
+      Create(fObjlen,file);
       fBufferRef->SetBufferOffset(0);
 
       Streamer(*fBufferRef);         //write key itself again
--- root.orig/tree/tree/src/TBranch.cxx	2008-09-23 10:50:20.358811302 +0100
+++ root/tree/tree/src/TBranch.cxx	2008-09-23 10:42:14.511788861 +0100
@@ -2071,7 +2071,8 @@
    fBasketBytes[where]  = basket->GetNbytes();
    fBasketSeek[where]   = basket->GetSeekKey();
    Int_t addbytes = basket->GetObjlen() + basket->GetKeylen() ;
-   if (fDirectory && (fDirectory != gROOT) && fDirectory->IsWritable()) {
+   if (nout>0) {
+      // The Basket was written so we can now safely drop it.
       basket->DropBuffers();
       delete basket;
       fBaskets[where] = 0;
--- root.orig/tree/tree/src/TTreeSQL.cxx	2008-09-23 10:50:20.346811581 +0100
+++ root/tree/tree/src/TTreeSQL.cxx	2008-09-23 10:42:14.375798639 +0100
@@ -180,6 +180,11 @@
    // Check if the basket is properly setup
 
    TBasketSQL * basket = (TBasketSQL *)branch->GetBasket(0);
+
+   if (basket==0) {
+      basket = (TBasketSQL*)CreateBasket(branch);
+      branch->GetListOfBaskets()->AddAtAndExpand(basket,0);
+   }
    TBuffer * buffer = basket->GetBufferRef();
 
    if(buffer == 0){
@@ -399,6 +404,8 @@
 
             br->SetEntries(fEntries);
 
+            br->GetListOfBaskets()->AddAtAndExpand(CreateBasket(br),0);
+
             prevBranch = branchName;
             decl = "";
          }
