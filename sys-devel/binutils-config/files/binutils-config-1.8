#!/bin/bash
# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/sys-devel/binutils-config/files/binutils-config-1.8,v 1.9 2005/12/21 01:53:32 vapier Exp $

# Format of /etc/env.d/binutils/:
#  config-TARGET:	CURRENT=version for TARGET
#  TARGET-VER:		has a TARGET and VER variable

cd /

trap ":" INT QUIT TSTP

source /etc/init.d/functions.sh || {
	echo "$0: Could not source /etc/init.d/functions.sh!"
	exit 1
}
umask 022

usage() {
cat << USAGE_END

Usage: ${HILITE}binutils-config${NORMAL} ${GOOD}[options]${NORMAL} ${BRACKET}[binutils profile]${NORMAL}

${HILITE}General Options:${NORMAL}
  ${GOOD}-c, --get-current-profile${NORMAL}  Print current profile
  ${GOOD}-l, --list-profiles${NORMAL}        Print a list of available profiles
  ${GOOD}-u, --uninstall${NORMAL}            Remove all signs of specified target
  ${GOOD}-d, --debug${NORMAL}                Execute with debug output

${HILITE}Arch Specific Cruft:${NORMAL}
  ${GOOD}--amd64${NORMAL}                    Install extra amd64 links (x86_64)
  ${GOOD}--arm${NORMAL}                      Install extra arm links (arm/armeb)
  ${GOOD}--mips${NORMAL}                     Install extra mips links (mips/mipsel)
  ${GOOD}--x86${NORMAL}                      Install extra x86 links (i[3-6]86)

Profile names are of the form:  ${BRACKET}<CTARGET>-<binutils version>${NORMAL}
For example:                    ${BRACKET}i686-pc-linux-gnu-2.15.92.0.2${NORMAL}

For more info, please see ${HILITE}binutils-config${NORMAL}(8).
USAGE_END
}

switch_profile() {
	unset TARGET VER LIBPATH FAKE_TARGETS
	source "${ENV_D}/${PROFILE}"
	if [[ -z ${TARGET} ]] ; then
		eerror "${PROFILE} is invalid (no \$TARGET defined) :("
		return 1
	fi
	if [[ -z ${VER} ]] ; then
		eerror "${PROFILE} is invalid (no \$VER defined) :("
		return 1
	fi

	#
	# Older installs don't have 'FAKE_TARGETS' defined, so lets 
	# update these env.d entries so that we don't force the poor 
	# user to re-emerge their binutils just for 1 envvar :/
	#
	if [[ ${FAKE_TARGETS-poor user} == "poor user" ]] ; then
		local targ=${TARGET/-*}
		local FAKE_TARGETS=${TARGET}
		case ${targ} in
			mips|powerpc|sparc)
				FAKE_TARGETS="${FAKE_TARGETS} ${TARGET/-/64-}";;
			mips64|powerpc64|sparc64)
				FAKE_TARGETS="${FAKE_TARGETS} ${TARGET/64-/-}";;
		esac
		echo "FAKE_TARGETS=\"${FAKE_TARGETS}\"" >> "${ENV_D}/${PROFILE}"
	fi
	local fake_targ_append="${TARGET#*-}"
	FAKE_TARGETS="${FAKE_TARGETS} ${FAKE_TARGETS_USER// /-${fake_targ_append} }"

	ebegin "Switching to ${PROFILE}"

	#
	# Generate binary symlinks
	# On systems that do 32bit/64bit, we need to fake an 
	# extra set of binary names (${FAKE_TARGETS})
	#
	BINPATH=/usr/${TARGET}/binutils-bin/${VER}
	cd "${ROOT}/${BINPATH}" || exit 1
	mkdir -p "${ROOT}"/usr/${TARGET}/bin
	for x in * ; do
		ln -sf "${BINPATH}/${x}" "${ROOT}"/usr/${TARGET}/bin/${x}
		ln -sf ../${TARGET}/bin/${x} "${ROOT}"/usr/bin/${TARGET}-${x}
		for fake in ${FAKE_TARGETS} ; do
			[[ -f ${ENV_D}/config-${fake} ]] && continue
			ln -sf ../${TARGET}/bin/${x} "${ROOT}"/usr/bin/${fake}-${x}
		done
		if [[ ${TARGET} == ${HOST} ]] ; then
			ln -sf ${TARGET}-${x} "${ROOT}"/usr/bin/${x}
		fi
	done

	#
	# Generate library / ldscripts symlinks
	#
	LIBPATH=${LIBPATH:-/usr/lib/binutils/${TARGET}/${VER}}
	cd "${ROOT}/${LIBPATH}" || exit 1
	mkdir -p "${ROOT}"/usr/${TARGET}/lib
	if [[ -d ${ROOT}/usr/${TARGET}/lib/ldscripts ]] ; then
		# When upgrading, we need to clean up ldscripts
		rm -r "${ROOT}"/usr/${TARGET}/lib/ldscripts
	else
		rm -f "${ROOT}"/usr/${TARGET}/lib/ldscripts
	fi
	ln -sf "${LIBPATH}/ldscripts" "${ROOT}"/usr/${TARGET}/lib/ldscripts
	if [[ ${TARGET} == ${HOST} ]] ; then
		dstlib=${ROOT}/usr/${HOST}/lib
	else
		dstlib=${ROOT}/usr/${HOST}/${TARGET}/lib
	fi
	mkdir -p "${dstlib}"
	for x in lib* ; do
		ln -sf "${LIBPATH}/${x}" "${dstlib}/${x}"
	done

	#
	# Generate include symlinks
	#
	INCPATH=${LIBPATH}/include
	if [[ -d ${ROOT}/${INCPATH} ]] ; then
		cd "${ROOT}/${INCPATH}" || exit 1
		if [[ ${TARGET} == ${HOST} ]] ; then
			dstinc=${ROOT}/usr/include
		else
			dstinc=${ROOT}/usr/${TARGET}/include
		fi
		mkdir -p "${dstinc}"
		for x in * ; do
			ln -sf "${INCPATH}/${x}" "${dstinc}/${x}"
		done
	fi

	#
	# Make sure proper paths get updated
	#
	if [[ ${TARGET} == ${HOST} ]] ; then
		DATAPATH=/usr/share/binutils-data/${TARGET}/${VER}
		[[ -d ${DATAPATH}/man ]] && \
		echo "MANPATH=${DATAPATH}/man" > "${ROOT}"/etc/env.d/05binutils
		[[ -d ${DATAPATH}/info ]] && \
		echo "INFOPATH=${DATAPATH}/info" >> "${ROOT}"/etc/env.d/05binutils
		echo "LDPATH=/usr/${TARGET}/lib" >> "${ROOT}"/etc/env.d/05binutils
	fi

	eend 0

	echo "CURRENT=${VER}" > "${ENV_D}/config-${TARGET}"

	#
	# Regen env.d if need/can be
	#
	if [[ ${ROOT} == "/" ]] && [[ ${TARGET} == ${HOST} ]] ; then
		env-update
		echo
		ewarn "Please remember to run:"
		echo
		ewarn "  # source /etc/profile"
		echo
	fi

	return 0
}

uninstall_target() {
	if [[ ${TARGET} == ${HOST} ]] ; then
		eerror "$0: Refusing to uninstall native binutils"
		exit 1
	fi

	shopt -s nullglob
	PROFILE=""

	for PROFILE in "${ENV_D}"/${TARGET}-* ; do
		ewarn "Removing all signs of ${PROFILE##*/}"
		rm -f "${ENV_D}"/${PROFILE}
	done
	if [[ -z ${PROFILE} ]] && [[ ! -e ${ENV_D}/config-${TARGET} ]] ; then
		eerror "$0: No profiles exist for '${TARGET}'"
		exit 1
	fi

	rm -f "${ENV_D}"/config-${TARGET}

	# XXX: we still leave behind FAKE_TARGETS in /usr/bin ...
	for x in addr2line ar as c++filt gprof ld nm objcopy \
	         objdump ranlib readelf size strings strip ; do
		rm -f "${ROOT}"/usr/bin/${TARGET}-${x}
		rm -f "${ROOT}"/usr/${TARGET}/bin/${x}
	done
	for x in ansidecl.h bfd.h bfdlink.h dis-asm.h symcat.h ; do
		rm -f "${ROOT}"/usr/${TARGET}/include/${x}
	done
	for x in bfd iberty opcodes ; do
		rm -f "${ROOT}"/usr/${HOST}/${TARGET}/lib/lib${x}{{-*,}.so,.a,.la}
	done
	# Delete broken symlinks
	find "${ROOT}"/usr/${TARGET}/lib -xtype l -exec rm {} \;
	rmdir "${ROOT}"/usr/${HOST}/${TARGET}/lib "${ROOT}"/usr/${HOST}/${TARGET} 2>/dev/null
	rm -f "${ROOT}"/usr/${TARGET}/lib/ldscripts
	rmdir "${ROOT}"/usr/${TARGET}/{bin,include,lib} "${ROOT}"/usr/${TARGET} 2>/dev/null
	rmdir "${ROOT}"/var/db/pkg/cross-${TARGET} 2>/dev/null

	rm -f "${ENV_D}"/${TARGET}-*
}

get_current_profile() {
	if [[ ! -f ${ENV_D}/config-${PROFILE} ]] ; then
		eerror "$0: No binutils profile is active!"
		return 1
	fi

	source "${ENV_D}/config-${PROFILE}"

	if [[ -z ${CURRENT} ]] ; then
		eerror "$0: No binutils profile is active!"
		return 1
	fi

	echo "${PROFILE}-${CURRENT}"

	return 0
}

list_profiles() {
	local i=1

	if [[ ${ROOT} != / ]] ; then
		echo "Using binutils-config info in ${ROOT}"
	fi
	target=
	for x in "${ENV_D}"/* ; do
		if [[ -f ${x} ]] && [[ ${x/\/config-} == ${x} ]] ; then
			source "${x}"
			if [[ ${target} != ${TARGET} ]] ; then
				[[ -n ${target} ]] && echo
				target=${TARGET}
			fi

			x=${x##*/}
			if [[ -e ${ENV_D}/config-${TARGET} ]] ; then
				source "${ENV_D}/config-${TARGET}"
				[[ ${VER} == ${CURRENT} ]] && x="${x} ${GOOD}*${NORMAL}"
			fi
			echo " [${i}] ${x}"
			((++i))
		fi
	done
}

set_HOST() {
	[[ -n ${HOST} ]] && return 0

	if [[ -z ${CHOST} ]] ; then
		HOST=$(portageq envvar CHOST)
	else
		HOST=${CHOST}
	fi
}

[[ -z ${ROOT} ]] && ROOT="/"
[[ ${ROOT:0-1} != "/" ]] && ROOT="${ROOT}/"
ENV_D="${ROOT}etc/env.d/binutils"

DEBUG="no"
NEED_ACTION="yes"
DOIT="switch_profile"
PROFILE=""
FAKE_TARGETS_USER=""
HOST=""

while [[ $# -gt 0 ]] ; do
	x=$1
	shift
	case ${x} in
		-c|--get-current-profile)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="get_current_profile"
			fi
			;;
		-d|--debug)
			DEBUG="yes"
			;;
		-l|--list-profiles)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="list_profiles"
			fi
			;;
		-u|--uninstall)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="uninstall_target"
				TARGET=$1
				shift
			fi
			;;
		-h|--help)
			usage
			exit 0
			;;
		-v|--version)
			cvsver="$Header: /var/cvsroot/gentoo-x86/sys-devel/binutils-config/files/binutils-config-1.8,v 1.9 2005/12/21 01:53:32 vapier Exp $"
			cvsver=${cvsver##*binutils-config-}
			echo "binutils-config-${cvsver%%,v *}"
			exit 0
			;;
		--amd64|--arm|--mips|--x86)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				# Make sure we have a space after each target
				NEED_ACTION="no"
				[[ -z ${PROFILE} ]] && PROFILE="current"
				case ${x} in
					--amd64) FAKE_TARGETS_USER="x86_64 ";;
					--arm)   FAKE_TARGETS_USER="arm armeb ";;
					--x86)   FAKE_TARGETS_USER="i386 i486 i586 i686 ";;
					--mips)  FAKE_TARGETS_USER="mips mips64 mipsel mipsel64 ";;
				esac
			fi
			;;
		-*)
			eerror "${0##*/}: Invalid switch!  Try '--help'."
			exit 1
			;;
		*)
			if [[ -n ${PROFILE} ]] && [[ ${PROFILE} != "current" ]] ; then
				eerror "$0: Too many arguments!  Run $0 without parameters for help."
				exit 1
			fi

			if [[ -z $(echo ${x} | tr -d '[:digit:]') ]] ; then
				# User gave us a # representing the profile
				i=1
				for y in "${ENV_D}"/* ; do
					[[ ${y/config-} != ${y} ]] && continue

					if [[ -f ${y} ]] && [[ ${x} -eq ${i} ]] ; then
						PROFILE=${y##*/}
						NEED_ACTION="no"
						break
					fi
					((++i))
				done
			else
				# User gave us a full HOST-ver
				x=${x##*/}
				if [[ ! -f ${ENV_D}/${x} ]] && [[ ! -f ${ENV_D}/config-${x} ]] ; then
					# Maybe they just gave us a ver ...
					set_HOST
					if [[ -f ${ENV_D}/${HOST}-${x} ]] ; then
						x=${HOST}-${x}
					else
						eerror "$0: Could not locate '$x' in '${ENV_D}/'!"
						exit 1
					fi
				fi
				PROFILE=${x}
				NEED_ACTION="no"
			fi
			;;
	esac
done

[[ ${NEED_ACTION} == "yes" ]] && usage && exit 1
[[ ${DEBUG} == "yes" ]] && set -x

[[ ${DOIT} != "list_profiles" ]] && set_HOST
[[ -z ${PROFILE} ]] && PROFILE=${HOST}
[[ ${PROFILE} == "current" ]] && PROFILE=$(PROFILE=${HOST} get_current_profile)
eval ${DOIT}

# vim:ts=4
