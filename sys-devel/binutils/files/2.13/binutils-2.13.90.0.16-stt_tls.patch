2002-11-29  Jakub Jelinek  <jakub@redhat.com>

	* config/tc-ia64.c (md_apply_fix3): Add default case.

2002-11-28  Jakub Jelinek  <jakub@redhat.com>

	* symbols.c (S_SET_THREAD_LOCAL): New function.
	* symbols.h (S_SET_THREAD_LOCAL): New prototype.
	* config/tc-i386.c (md_apply_fix3): Call S_SET_THREAD_LOCAL
	for TLS relocations.
	* config/tc-ia64.c (md_apply_fix3): Likewise.
	* config/tc-alpha.c (md_apply_fix3): Likewise.

	* ld-i386/tlsnopic.rd: Change NOTYPE to TLS for UND sg* symbols.

--- gas/config/tc-i386.c.jj	2002-10-14 13:30:31.000000000 +0200
+++ gas/config/tc-i386.c	2002-11-14 15:11:07.000000000 +0100
@@ -4679,17 +4679,27 @@ md_apply_fix3 (fixP, valP, seg)
 	value = -4;
 	break;
 
-      case BFD_RELOC_386_GOT32:
       case BFD_RELOC_386_TLS_GD:
       case BFD_RELOC_386_TLS_LDM:
       case BFD_RELOC_386_TLS_IE_32:
       case BFD_RELOC_386_TLS_IE:
       case BFD_RELOC_386_TLS_GOTIE:
-      case BFD_RELOC_X86_64_GOT32:
       case BFD_RELOC_X86_64_TLSGD:
       case BFD_RELOC_X86_64_TLSLD:
       case BFD_RELOC_X86_64_GOTTPOFF:
 	value = 0; /* Fully resolved at runtime.  No addend.  */
+	/* Fallthrough */
+      case BFD_RELOC_386_TLS_LE:
+      case BFD_RELOC_386_TLS_LDO_32:
+      case BFD_RELOC_386_TLS_LE_32:
+      case BFD_RELOC_X86_64_DTPOFF32:
+      case BFD_RELOC_X86_64_TPOFF32:
+	S_SET_THREAD_LOCAL (fixP->fx_addsy);
+	break;
+
+      case BFD_RELOC_386_GOT32:
+      case BFD_RELOC_X86_64_GOT32:
+	value = 0; /* Fully resolved at runtime.  No addend.  */
 	break;
 
       case BFD_RELOC_VTABLE_INHERIT:
--- gas/config/tc-ia64.c.jj	2002-09-10 14:50:57.000000000 +0200
+++ gas/config/tc-ia64.c	2002-11-19 13:28:47.000000000 +0100
@@ -10413,8 +10413,9 @@ md_apply_fix3 (fix, valP, seg)
     }
   if (fix->fx_addsy)
     {
-      if (fix->fx_r_type == (int) BFD_RELOC_UNUSED)
+      switch (fix->fx_r_type)
 	{
+	case BFD_RELOC_UNUSED:
 	  /* This must be a TAG13 or TAG13b operand.  There are no external
 	     relocs defined for them, so we must give an error.  */
 	  as_bad_where (fix->fx_file, fix->fx_line,
@@ -10422,6 +10423,21 @@ md_apply_fix3 (fix, valP, seg)
 			elf64_ia64_operands[fix->tc_fix_data.opnd].desc);
 	  fix->fx_done = 1;
 	  return;
+
+	case BFD_RELOC_IA64_TPREL14:
+	case BFD_RELOC_IA64_TPREL22:
+	case BFD_RELOC_IA64_TPREL64I:
+	case BFD_RELOC_IA64_LTOFF_TPREL22:
+	case BFD_RELOC_IA64_LTOFF_DTPMOD22:
+	case BFD_RELOC_IA64_DTPREL14:
+	case BFD_RELOC_IA64_DTPREL22:
+	case BFD_RELOC_IA64_DTPREL64I:
+	case BFD_RELOC_IA64_LTOFF_DTPREL22:
+	  S_SET_THREAD_LOCAL (fix->fx_addsy);
+	  break;
+
+	default:
+	  break;
 	}
 
       /* ??? This is a hack copied from tc-i386.c to make PCREL relocs
--- gas/config/tc-alpha.c.jj	2002-11-14 14:04:42.000000000 +0100
+++ gas/config/tc-alpha.c	2002-11-19 16:14:03.000000000 +0100
@@ -1261,6 +1261,8 @@ md_apply_fix3 (fixP, valP, seg)
 
 #ifdef OBJ_ELF
     case BFD_RELOC_ALPHA_BRSGP:
+      return;
+
     case BFD_RELOC_ALPHA_TLSGD:
     case BFD_RELOC_ALPHA_TLSLDM:
     case BFD_RELOC_ALPHA_GOTDTPREL16:
@@ -1271,6 +1273,8 @@ md_apply_fix3 (fixP, valP, seg)
     case BFD_RELOC_ALPHA_TPREL_HI16:
     case BFD_RELOC_ALPHA_TPREL_LO16:
     case BFD_RELOC_ALPHA_TPREL16:
+      if (fixP->fx_addsy)
+	S_SET_THREAD_LOCAL (fixP->fx_addsy);
       return;
 #endif
 
--- gas/symbols.h.jj	2002-09-10 14:50:53.000000000 +0200
+++ gas/symbols.h	2002-11-14 14:26:10.000000000 +0100
@@ -102,6 +102,7 @@ extern void S_SET_EXTERNAL PARAMS ((symb
 extern void S_SET_NAME PARAMS ((symbolS *, char *));
 extern void S_CLEAR_EXTERNAL PARAMS ((symbolS *));
 extern void S_SET_WEAK PARAMS ((symbolS *));
+extern void S_SET_THREAD_LOCAL PARAMS ((symbolS *));
 #endif
 
 #ifndef WORKING_DOT_WORD
--- gas/symbols.c.jj	2002-09-21 23:44:50.000000000 +0200
+++ gas/symbols.c	2002-11-19 13:02:03.000000000 +0100
@@ -1951,6 +1951,25 @@ S_SET_WEAK (s)
 }
 
 void
+S_SET_THREAD_LOCAL (s)
+     symbolS *s;
+{
+  if (LOCAL_SYMBOL_CHECK (s))
+    s = local_symbol_convert ((struct local_symbol *) s);
+  if (bfd_is_com_section (s->bsym->section)
+      && (s->bsym->flags & BSF_THREAD_LOCAL) != 0)
+    return;
+  s->bsym->flags |= BSF_THREAD_LOCAL;
+  if ((s->bsym->flags & BSF_FUNCTION) != 0)
+    as_bad (_("Accessing function `%s' as thread-local object"),
+	    S_GET_NAME (s));
+  else if (! bfd_is_und_section (s->bsym->section)
+	   && (s->bsym->section->flags & SEC_THREAD_LOCAL) == 0)
+    as_bad (_("Accessing `%s' as thread-local object"),
+	    S_GET_NAME (s));
+}
+
+void
 S_SET_NAME (s, name)
      symbolS *s;
      char *name;
--- ld/testsuite/ld-i386/tlsnopic.rd.jj	2002-09-19 12:01:19.000000000 +0200
+++ ld/testsuite/ld-i386/tlsnopic.rd	2002-11-14 15:07:13.000000000 +0100
@@ -84,13 +84,13 @@ Symbol table '.dynsym' contains 22 entri
  +9: [0-9a-f]+ +0 SECTION LOCAL  DEFAULT +9 *
  +10: [0-9a-f]+ +0 SECTION LOCAL  DEFAULT +10 *
  +11: [0-9a-f]+ +0 OBJECT  GLOBAL DEFAULT  ABS _DYNAMIC
- +12: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg3
- +13: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg4
+ +12: 0+ +0 TLS +GLOBAL DEFAULT  UND sg3
+ +13: 0+ +0 TLS +GLOBAL DEFAULT  UND sg4
  +14: 0+1000 +0 FUNC +GLOBAL DEFAULT +5 fn3
- +15: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg5
- +16: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg1
+ +15: 0+ +0 TLS +GLOBAL DEFAULT  UND sg5
+ +16: 0+ +0 TLS +GLOBAL DEFAULT  UND sg1
  +17: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
- +18: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg2
+ +18: 0+ +0 TLS +GLOBAL DEFAULT  UND sg2
  +19: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS _edata
  +20: 0+2080 +0 OBJECT  GLOBAL DEFAULT  ABS _GLOBAL_OFFSET_TABLE_
  +21: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS _end
@@ -121,13 +121,13 @@ Symbol table '.symtab' contains 34 entri
  +21: 0+14 +0 TLS +LOCAL  HIDDEN +7 sh1
  +22: 0+18 +0 TLS +LOCAL  HIDDEN +7 sh2
  +23: [0-9a-f]+ +0 OBJECT  GLOBAL DEFAULT  ABS _DYNAMIC
- +24: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg3
- +25: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg4
+ +24: 0+ +0 TLS +GLOBAL DEFAULT  UND sg3
+ +25: 0+ +0 TLS +GLOBAL DEFAULT  UND sg4
  +26: 0+1000 +0 FUNC +GLOBAL DEFAULT +5 fn3
- +27: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg5
- +28: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg1
+ +27: 0+ +0 TLS +GLOBAL DEFAULT  UND sg5
+ +28: 0+ +0 TLS +GLOBAL DEFAULT  UND sg1
  +29: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
- +30: 0+ +0 NOTYPE  GLOBAL DEFAULT  UND sg2
+ +30: 0+ +0 TLS +GLOBAL DEFAULT  UND sg2
  +31: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS _edata
  +32: 0+2080 +0 OBJECT  GLOBAL DEFAULT  ABS _GLOBAL_OFFSET_TABLE_
  +33: [0-9a-f]+ +0 NOTYPE  GLOBAL DEFAULT  ABS _end
