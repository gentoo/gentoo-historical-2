diff -NPru gcc-2.95.3-orig/gcc/c-decl.c gcc-2.95.3/gcc/c-decl.c
--- gcc-2.95.3-orig/gcc/c-decl.c	Thu Jan 25 08:02:59 2001
+++ gcc-2.95.3/gcc/c-decl.c	Fri Aug 10 13:38:24 2001
@@ -29,6 +29,7 @@
 
 #include "config.h"
 #include "system.h"
+#include "rtl.h"
 #include "tree.h"
 #include "flags.h"
 #include "output.h"
@@ -41,6 +42,8 @@
 extern cpp_reader parse_in;
 #endif
 
+extern void declare_weak PARAMS ((tree));
+
 /* In grokdeclarator, distinguish syntactic contexts of declarators.  */
 enum decl_context
 { NORMAL,			/* Ordinary declaration */
@@ -2028,7 +2031,15 @@
     }
 
   /* Merge the storage class information.  */
-  DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);	  
+  if (!DECL_WEAK (newdecl) && DECL_WEAK (olddecl))
+		declare_weak (newdecl);
+  if (DECL_WEAK (newdecl) && !DECL_WEAK (olddecl))
+		declare_weak (olddecl);
+  if (DECL_WEAK (newdecl) && DECL_RTL (newdecl)
+			   && GET_CODE (DECL_RTL (newdecl)) == MEM
+			   && XEXP (DECL_RTL (newdecl), 0)
+			   && GET_CODE (XEXP (DECL_RTL (newdecl), 0)) == SYMBOL_REF)
+		SYMBOL_REF_WEAK (XEXP (DECL_RTL (newdecl), 0)) = 1;
   /* For functions, static overrides non-static.  */
   if (TREE_CODE (newdecl) == FUNCTION_DECL)
     {
diff -NPru gcc-2.95.3-orig/gcc/config/alpha/crtbegin.asm gcc-2.95.3/gcc/config/alpha/crtbegin.asm
--- gcc-2.95.3-orig/gcc/config/alpha/crtbegin.asm	Wed Dec 16 15:00:53 1998
+++ gcc-2.95.3/gcc/config/alpha/crtbegin.asm	Fri Aug 10 13:41:41 2001
@@ -97,6 +97,24 @@
  # Support recursive calls to exit.
 $ptr:	.quad	__DTOR_LIST__
 
+	.global __dso_handle
+	.type __dso_handle,@object
+	.size __dso_handle,8
+#ifdef SHARED
+.section .data
+	.align 3
+__dso_handle:
+	.quad   __dso_handle
+#else
+.section .bss
+	.align 3
+__dso_handle:
+	.zero 8
+#endif
+#ifdef HAVE_GAS_HIDDEN
+	.hidden __dso_handle
+#endif
+
 .text
 
 	.align 3
diff -NPru gcc-2.95.3-orig/gcc/config/i386/i386.c gcc-2.95.3/gcc/config/i386/i386.c
--- gcc-2.95.3-orig/gcc/config/i386/i386.c	Tue Sep  7 02:38:56 1999
+++ gcc-2.95.3/gcc/config/i386/i386.c	Fri Aug 10 13:38:24 2001
@@ -291,7 +291,7 @@
 
   if (ix86_arch_string == 0)
     {
-      ix86_arch_string = PROCESSOR_PENTIUM_STRING;
+      ix86_arch_string = PROCESSOR_DEFAULT_STRING;
       if (ix86_cpu_string == 0)
 	ix86_cpu_string = PROCESSOR_DEFAULT_STRING;
     }
@@ -308,7 +308,7 @@
   if (i == ptt_size)
     {
       error ("bad value (%s) for -march= switch", ix86_arch_string);
-      ix86_arch_string = PROCESSOR_PENTIUM_STRING;
+      ix86_arch_string = PROCESSOR_DEFAULT_STRING;
       ix86_arch = PROCESSOR_DEFAULT;
     }
 
diff -NPru gcc-2.95.3-orig/gcc/config/i386/linux.h gcc-2.95.3/gcc/config/i386/linux.h
--- gcc-2.95.3-orig/gcc/config/i386/linux.h	Wed Apr  7 19:32:13 1999
+++ gcc-2.95.3/gcc/config/i386/linux.h	Fri Aug 10 13:38:24 2001
@@ -234,3 +234,21 @@
     }									\
   } while (0)
 #endif
+
+#if defined(__PIC__) && defined (USE_GNULIBC_1)
+/* This is a kludge. The i386 GNU/Linux dynamic linker needs ___brk_addr,
+   __environ and atexit (). We have to make sure they are in the .dynsym
+   section. We accomplish it by making a dummy call here. This
+   code is never reached.  */
+
+#define CRT_END_INIT_DUMMY             \
+  do                                   \
+    {                                  \
+      extern void *___brk_addr;                \
+      extern char **__environ;         \
+                                       \
+      ___brk_addr = __environ;         \
+      atexit (0);                      \
+    }                                  \
+  while (0)
+#endif
diff -uNr gcc-2.95.3.orig/gcc/configure gcc-2.95.3/gcc/configure
--- gcc-2.95.3.orig/gcc/configure       Sat Mar 17 01:13:48 2001
+++ gcc-2.95.3/gcc/configure    Sat Aug 18 07:18:42 2001
@@ -1311,7 +1311,7 @@
 fi
 
 # Find some useful tools
-for ac_prog in gawk mawk nawk awk
+for ac_prog in mawk gawk nawk awk
 do
 # Extract the first word of "$ac_prog", so it can be a program name with args.
 set dummy $ac_prog; ac_word=$2
@@ -8229,8 +8229,26 @@
 fi
 echo "$ac_t""$gcc_cv_as_subsections" 1>&6
 
+echo $ac_n "checking assembler hidden support""... $ac_c" 1>&6
+echo "configure:8234: checking assembler hidden support" >&5
+gcc_cv_as_hidden=
+if test x$gcc_cv_as != x; then
+       # Check if we have .hidden
+       echo "  .hidden foobar" > conftest.s
+       echo "foobar:" >> conftest.s
+       if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then
+               cat >> confdefs.h <<\EOF
+#define HAVE_GAS_HIDDEN 1
+EOF
+
+               gcc_cv_as_hidden="yes"
+       fi
+       rm -f conftest.s conftest.o conftest.nm1 conftest.nm2
+fi
+echo "$ac_t""$gcc_cv_as_hidden" 1>&6
+
 echo $ac_n "checking assembler instructions""... $ac_c" 1>&6
-echo "configure:8234: checking assembler instructions" >&5
+echo "configure:8252: checking assembler instructions" >&5
 gcc_cv_as_instructions=
 if test x$gcc_cv_as != x; then
        set "filds fists" "filds mem; fists mem"
diff -NPru gcc-2.95.3-orig/gcc/crtstuff.c gcc-2.95.3/gcc/crtstuff.c
--- gcc-2.95.3-orig/gcc/crtstuff.c	Mon Mar 22 18:43:51 1999
+++ gcc-2.95.3/gcc/crtstuff.c	Fri Aug 10 13:45:26 2001
@@ -55,6 +55,7 @@
 #include "defaults.h"
 #include <stddef.h>
 #include "frame.h"
+#include "auto-host.h"
 
 /* We do not want to add the weak attribute to the declarations of these
    routines in frame.h because that will cause the definition of these
@@ -135,6 +136,18 @@
 
 #ifdef OBJECT_FORMAT_ELF
 
+#ifdef HAVE_GAS_HIDDEN
+asm (".hidden\t__dso_handle");
+#endif
+
+#ifdef CRTSTUFFS_O
+void *__dso_handle = &__dso_handle;
+#else
+void *__dso_handle = 0;
+#endif
+
+extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;
+
 /* Run all the global destructors on exit from the program.  */
  
 /* Some systems place the number of pointers in the first word of the
@@ -165,6 +178,11 @@
   if (completed)
     return;
 
+#ifdef CRTSTUFFS_O
+  if (__cxa_finalize)
+		__cxa_finalize (__dso_handle);
+#endif
+
   while (*p)
     {
       p++;
@@ -379,20 +397,8 @@
   FORCE_INIT_SECTION_ALIGN;
 #endif
   asm (TEXT_SECTION_ASM_OP);
-
-/* This is a kludge. The i386 GNU/Linux dynamic linker needs ___brk_addr,
-   __environ and atexit (). We have to make sure they are in the .dynsym
-   section. We accomplish it by making a dummy call here. This
-   code is never reached.  */
- 
-#if defined(__linux__) && defined(__PIC__) && defined(__i386__)
-  {
-    extern void *___brk_addr;
-    extern char **__environ;
-
-    ___brk_addr = __environ;
-    atexit ();
-  }
+#ifdef CRT_END_INIT_DUMMY
+  CRT_END_INIT_DUMMY;
 #endif
 }
 
diff -NPru gcc-2.95.3-orig/gcc/rtl.h gcc-2.95.3/gcc/rtl.h
--- gcc-2.95.3-orig/gcc/rtl.h	Thu Jan 25 08:03:22 2001
+++ gcc-2.95.3/gcc/rtl.h	Fri Aug 10 13:38:24 2001
@@ -661,6 +661,8 @@
 /* 1 means a SYMBOL_REF has been the library function in emit_library_call.  */
 #define SYMBOL_REF_USED(RTX) ((RTX)->used)
 
+#define SYMBOL_REF_WEAK(RTX) ((RTX)->integrated)
+
 /* For an INLINE_HEADER rtx, FIRST_FUNCTION_INSN is the first insn
    of the function that is not involved in copying parameters to
    pseudo-registers.  FIRST_PARM_INSN is the very first insn of
diff -NPru gcc-2.95.3-orig/gcc/rtlanal.c gcc-2.95.3/gcc/rtlanal.c
--- gcc-2.95.3-orig/gcc/rtlanal.c	Thu Jan 25 08:03:22 2001
+++ gcc-2.95.3/gcc/rtlanal.c	Fri Aug 10 13:38:24 2001
@@ -136,6 +136,8 @@
   switch (code)
     {
     case SYMBOL_REF:
+		  return SYMBOL_REF_WEAK (x);
+
     case LABEL_REF:
       /* SYMBOL_REF is problematic due to the possible presence of
 	 a #pragma weak, but to say that loads from symbols can trap is
diff -NPru gcc-2.95.3-orig/gcc/varasm.c gcc-2.95.3/gcc/varasm.c
--- gcc-2.95.3-orig/gcc/varasm.c	Mon Feb 19 08:02:02 2001
+++ gcc-2.95.3/gcc/varasm.c	Fri Aug 10 13:38:24 2001
@@ -118,6 +118,8 @@
 struct rtx_const;
 struct pool_constant;
 
+void declare_weak PROTO ((tree));
+
 static const char *strip_reg_name	PROTO((const char *));
 static int contains_pointers_p		PROTO((tree));
 static void decode_addr_const		PROTO((tree, struct addr_const *));
@@ -143,6 +145,7 @@
 static void output_after_function_constants PROTO((void));
 static void output_constructor		PROTO((tree, int));
 static void remove_from_pending_weak_list	PROTO ((char *));
+static int is_on_pending_weak_list     PROTO ((char *));
 #ifdef ASM_OUTPUT_BSS
 static void asm_output_bss		PROTO((FILE *, tree, char *, int, int));
 #endif
@@ -755,6 +758,9 @@
 	  DECL_RTL (decl) = gen_rtx_MEM (DECL_MODE (decl),
 					 gen_rtx_SYMBOL_REF (Pmode, name));
 	  MEM_ALIAS_SET (DECL_RTL (decl)) = get_alias_set (decl);
+	  if (is_on_pending_weak_list (name))
+			declare_weak (decl);
+	  SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = DECL_WEAK (decl);
 	    
 	  /* If this variable is to be treated as volatile, show its
 	     tree node has side effects.  If it has side effects, either
@@ -4341,8 +4347,6 @@
 {
   if (! TREE_PUBLIC (decl))
     error_with_decl (decl, "weak declaration of `%s' must be public");
-  else if (TREE_ASM_WRITTEN (decl))
-    error_with_decl (decl, "weak declaration of `%s' must precede definition");
   else if (SUPPORTS_WEAK)
     DECL_WEAK (decl) = 1;
 #ifdef HANDLE_PRAGMA_WEAK
@@ -4394,6 +4398,24 @@
 	}
     }
 #endif
+}
+
+static int
+is_on_pending_weak_list (name)
+	   char * name;
+{
+#ifdef HANDLE_PRAGMA_WEAK
+	   if (HANDLE_PRAGMA_WEAK)
+	   {
+			 struct weak_syms *t;
+			 for (t = weak_decls; t; t = t->next)
+			 {
+				    if (t->name && strcmp (name, t->name) == 0)
+						  return 1;
+			 }
+	   }
+#endif
+	   return 0;
 }
 
 void
