2000-04-12  Jakub Jelinek  <jakub@redhat.com>

	* config/sparc/linux64.c: New file.
	* config/sparc/linux64.h (ARCH_SPECIFIC_DRIVER): Define.
	* config/sparc/t-linux64 (linux64.o): Add.
	* gcc.c (process_command): Call ARCH_SPECIFIC_DRIVER
	before lang_specific_driver if it is defined.
	* configure.in (sparc64-linux): Add linux64.o to extra_gcc_objs.
	* configure: Rebuilt.

--- gcc/config/sparc/linux64.h.jj	Mon Apr 10 19:19:31 2000
+++ gcc/config/sparc/linux64.h	Wed Apr 12 13:50:31 2000
@@ -62,6 +62,15 @@ Boston, MA 02111-1307, USA.  */
 -D__SIZE_TYPE__=unsigned\\ int -D__PTRDIFF_TYPE__=int \
 -D__GCC_NEW_VARARGS__ -Acpu(sparc) -Amachine(sparc)"
 
+#if !defined(CROSS_COMPILE) && !(DEFAULT_ARCH32_P)
+/* For the native compiler, if none of -m32 and -m64 was specified, check
+ * if we are in 32bit or 64bit build environment and set the default based
+ * on that.  */
+extern void sparc64_linux_specific_driver PARAMS ((int *, char ***, int *));
+#define ARCH_SPECIFIC_DRIVER sparc64_linux_specific_driver
+
+#endif
+
 #endif
 
 /* Provide MD_STARTFILE_PREFIX{,_1}.  Need to include /usr/lib64/:/lib64/
--- gcc/config/sparc/linux64.c.jj	Wed Apr 12 13:59:30 2000
+++ gcc/config/sparc/linux64.c	Wed Apr 12 18:37:07 2000
@@ -0,0 +1,81 @@
+/* Functions for 64-bit SPARC running Linux systems with ELF.
+   Copyright 2000 Free Software Foundation, Inc.
+   Contributed by Jakub Jelinek <jakub@redhat.com>
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#include "config.h"
+#include "system.h"
+
+#if defined(SPARC_BI_ARCH) && ! defined(CROSS_COMPILE)
+
+#include <sys/utsname.h>
+
+/* If neither -m32 nor -m64 was explicitely given on the command line,
+   supply the default based on whether uname -m is sparc64 (-m64) or
+   sparc32 (-m32).
+   Like that, users can use native 64bit and 32bit build environments
+   where they don't have to specify arch size arguments to gcc
+   by either doing the build process from sparc32(8) command or
+   outside of that. All tools starting from config.guess up to gcc
+   should use defaults from that.  */
+
+void
+sparc64_linux_specific_driver (in_argc, in_argv, in_added_libraries)
+     int *in_argc;
+     char ***in_argv;
+     int *in_added_libraries ATTRIBUTE_UNUSED;
+{
+  int argc = *in_argc;
+  char **argv = *in_argv, **args;
+  struct utsname un;
+  int m32 = 0, i;
+
+  /* See in which build environment we are.  */
+  uname(&un);
+  if (strcmp(un.machine, "sparc64"))
+    {
+      if (strcmp(un.machine, "sparc"))
+	return; /* Should not happen */
+      m32 = 1;
+    }
+
+  /* If we are in the one which is default to this compiler,
+   * there is nothing we have to do here.  */
+  if ((DEFAULT_ARCH32_P && m32)
+      || (! DEFAULT_ARCH32_P && ! m32))
+    return;
+
+  for (i = 1; i < argc; i++)
+    {
+      /* See if either -m64 or -m32 was explicitely given on the
+       * command line.  */
+      if (! strcmp (argv[i], "-m64")
+	  || ! strcmp (argv[i], "-m32"))
+	return;
+    }
+
+  args = (char **) xmalloc ((argc + 1) * sizeof(char *));
+  args[0] = argv[0];
+  args[1] = m32 ? "-m32" : "-m64";
+  memcpy (args + 2, argv + 1, (argc - 1) * sizeof(char *));
+  *in_argc = argc + 1;
+  *in_argv = args;
+}
+                   
+#endif
--- gcc/config/sparc/t-linux64.jj	Fri Apr  7 23:02:27 2000
+++ gcc/config/sparc/t-linux64	Wed Apr 12 15:04:50 2000
@@ -8,3 +8,7 @@ LIBGCC = stmp-multilib
 INSTALL_LIBGCC = install-multilib
 
 EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o
+
+linux64.o: $(srcdir)/config/sparc/linux64.c
+	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/sparc/linux64.c
+
--- gcc/gcc.c.jj	Mon Apr 10 19:19:31 2000
+++ gcc/gcc.c	Wed Apr 12 13:25:53 2000
@@ -3038,6 +3038,11 @@ process_command (argc, argv)
   /* Convert new-style -- options to old-style.  */
   translate_options (&argc, &argv);
 
+  /* Do architecture-specific adjustment/addition of flags.  */
+#ifdef ARCH_SPECIFIC_DRIVER
+  ARCH_SPECIFIC_DRIVER (&argc, &argv, &added_libraries);
+#endif
+
   /* Do language-specific adjustment/addition of flags.  */
   lang_specific_driver (&argc, &argv, &added_libraries);
 
--- gcc/configure.in.jj	Sat Apr  8 21:14:53 2000
+++ gcc/configure.in	Wed Apr 12 15:12:43 2000
@@ -3444,6 +3444,7 @@ changequote([,])dnl
 		tm_file=sparc/linux64.h
 		xmake_file=x-linux
 		extra_parts="crtbegin.o crtbeginS.o crtend.o crtendS.o"
+		extra_gcc_objs=linux64.o
 		gnu_ld=yes
  		if test x$enable_threads = xyes; then
  			thread_file='posix'
--- gcc/configure.jj	Sat Apr  8 21:14:53 2000
+++ gcc/configure	Wed Apr 12 15:13:02 2000
@@ -6033,6 +6033,7 @@ for machine in $build $host $target; do
 		tm_file=sparc/linux64.h
 		xmake_file=x-linux
 		extra_parts="crtbegin.o crtbeginS.o crtend.o crtendS.o"
+		extra_gcc_objs=linux64.o
 		gnu_ld=yes
  		if test x$enable_threads = xyes; then
  			thread_file='posix'
