2000-07-09  Joseph S. Myers  <jsm28@cam.ac.uk>

	* ginclude/stddef.h: Don't declare wint_t unless __need_wint_t.
	* c-common.h (enum c_tree_index): Add CTI_WINT_TYPE.
	(wint_type_node): Define.
	* c-decl.c (WINT_TYPE): Define.
	(init_decl_processing): Create the wint_type_node type.
	* cppdefault.h (WINT_TYPE): Define.
	* cppinit.c (builtin_array): Define __WINT_TYPE__.
	* tradcpp.c (initialize_builtins): Define __WINT_TYPE__.
	* tm.texi (NO_BUILTIN_WINT_TYPE, WINT_TYPE): Document.
	* c-common.c (T_WI): Define.
	(print_char_table): Use T_WI for %lc format.

--- gcc/ginclude/stddef.h.jj	Sun Jul  2 10:37:23 2000
+++ gcc/ginclude/stddef.h	Fri Aug 18 16:42:04 2000
@@ -302,7 +302,7 @@ typedef __WCHAR_TYPE__ wchar_t;
 #undef	__need_wchar_t
 #endif /* _STDDEF_H or __need_wchar_t.  */
 
-#if defined (_STDDEF_H) || defined (__need_wint_t)
+#if defined (__need_wint_t)
 #ifndef _WINT_T
 #define _WINT_T
 
--- gcc/c-common.h.jj	Thu Jul 13 14:53:25 2000
+++ gcc/c-common.h	Fri Aug 18 16:42:04 2000
@@ -91,6 +91,7 @@ enum c_tree_index
     CTI_WCHAR_TYPE,
     CTI_SIGNED_WCHAR_TYPE,
     CTI_UNSIGNED_WCHAR_TYPE,
+    CTI_WINT_TYPE,
     CTI_WIDEST_INT_LIT_TYPE,
     CTI_WIDEST_UINT_LIT_TYPE,
 
@@ -122,6 +123,7 @@ enum c_tree_index
 #define wchar_type_node			c_global_trees[CTI_WCHAR_TYPE]
 #define signed_wchar_type_node		c_global_trees[CTI_SIGNED_WCHAR_TYPE]
 #define unsigned_wchar_type_node	c_global_trees[CTI_UNSIGNED_WCHAR_TYPE]
+#define wint_type_node			c_global_trees[CTI_WINT_TYPE]
 #define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]
 #define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]
 
--- gcc/c-decl.c.jj	Mon Jul 31 20:02:08 2000
+++ gcc/c-decl.c	Fri Aug 18 16:42:04 2000
@@ -74,6 +74,10 @@ enum decl_context
 #ifndef WCHAR_TYPE
 #define WCHAR_TYPE "int"
 #endif
+
+#ifndef WINT_TYPE
+#define WINT_TYPE "unsigned int"
+#endif
 
 /* Do GC.  */
 int ggc_p = 1;
@@ -3036,6 +3040,8 @@ init_decl_processing ()
   wchar_type_size = TYPE_PRECISION (wchar_type_node);
   signed_wchar_type_node = signed_type (wchar_type_node);
   unsigned_wchar_type_node = unsigned_type (wchar_type_node);
+
+  wint_type_node = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WINT_TYPE)));
 
   boolean_type_node = integer_type_node;
   boolean_true_node = integer_one_node;
--- gcc/cppdefault.h.jj	Fri Jul  7 00:52:03 2000
+++ gcc/cppdefault.h	Fri Aug 18 16:42:04 2000
@@ -66,6 +66,12 @@ Foundation, 59 Temple Place - Suite 330,
 #define WCHAR_TYPE "int"
 #endif
 
+/* The string value for __WINT_TYPE__.  */
+
+#ifndef WINT_TYPE
+#define WINT_TYPE "unsigned int"
+#endif
+
 /* The string value for __USER_LABEL_PREFIX__ */
 
 #ifndef USER_LABEL_PREFIX
--- gcc/cppinit.c.jj	Fri Aug 18 15:59:11 2000
+++ gcc/cppinit.c	Fri Aug 18 16:48:11 2000
@@ -541,6 +541,9 @@ static const struct builtin builtin_arra
 #ifndef NO_BUILTIN_WCHAR_TYPE
   C("__WCHAR_TYPE__",		WCHAR_TYPE),
 #endif
+#ifndef NO_BUILTIN_WINT_TYPE
+  C("__WINT_TYPE__",		WINT_TYPE),
+#endif
 
   /* Named operators known to the preprocessor.  These cannot be #defined
      and always have their stated meaning.  They are treated like normal
--- gcc/tradcpp.c.jj	Mon Jul 24 18:48:59 2000
+++ gcc/tradcpp.c	Fri Aug 18 16:42:04 2000
@@ -4644,6 +4644,9 @@ initialize_builtins ()
 #ifndef NO_BUILTIN_WCHAR_TYPE
   install_value ("__WCHAR_TYPE__",        WCHAR_TYPE);
 #endif
+#ifndef NO_BUILTIN_WINT_TYPE
+  install_value ("__WINT_TYPE__",         WINT_TYPE);
+#endif
   install_value ("__REGISTER_PREFIX__",   REGISTER_PREFIX);
   install_value ("__USER_LABEL_PREFIX__", user_label_prefix);
 }
--- gcc/tm.texi.jj	Wed Aug  2 21:34:07 2000
+++ gcc/tm.texi	Fri Aug 18 16:42:04 2000
@@ -138,6 +138,16 @@ This should be defined if @code{WCHAR_TY
 which are not accessible to the preprocessor.  Otherwise, it should not
 be defined.
 
+@findex NO_BUILTIN_WINT_TYPE
+@item NO_BUILTIN_WINT_TYPE
+If this macro is defined, the preprocessor will not define the builtin macro
+@code{__WINT_TYPE__}.  The macro @code{__WINT_TYPE__} must then be
+defined by @code{CPP_SPEC} instead.
+
+This should be defined if @code{WINT_TYPE} depends on target dependent flags
+which are not accessible to the preprocessor.  Otherwise, it should not
+be defined.
+
 @findex SIGNED_CHAR_SPEC
 @item SIGNED_CHAR_SPEC
 A C string constant that tells the GCC driver program options to
@@ -1284,6 +1294,16 @@ characters.  If this is undefined, the d
 @code{WCHAR_TYPE_SIZE}.  Otherwise, it is the constant value that is the
 largest value that @code{WCHAR_TYPE_SIZE} can have at run-time.  This is
 used in @code{cpp}.
+
+@findex WINT_TYPE
+@item WINT_TYPE
+A C expression for a string describing the name of the data type to
+use for wide characters passed to @code{printf} and returned from
+@code{getwc}.  The typedef name @code{wint_t} is defined using the
+contents of the string.  See @code{SIZE_TYPE} above for more
+information.
+
+If you don't define this macro, the default is @code{"unsigned int"}.
 
 @findex OBJC_INT_SELECTORS
 @item OBJC_INT_SELECTORS
--- gcc/c-common.c.jj	Mon Jul 31 20:02:08 2000
+++ gcc/c-common.c	Fri Aug 18 16:42:04 2000
@@ -1193,6 +1193,7 @@ strip_attrs (specs_attrs)
 #define T_UC	&unsigned_char_type_node
 #define T_V	&void_type_node
 #define T_W	&wchar_type_node
+#define T_WI	&wint_type_node
 #define T_ST    &sizetype
 
 typedef struct {
@@ -1229,7 +1230,7 @@ static format_char_info print_char_table
 /* A GNU extension.  */
   { "m",	0,	T_V,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	"-wp"		},
   { "feEgGaA",	0,	T_D,	NULL,	NULL,	NULL,	NULL,	T_LD,	NULL,	"-wp0 +#"	},
-  { "c",	0,	T_I,	NULL,	NULL,	T_W,	NULL,	NULL,	NULL,	"-w"		},
+  { "c",	0,	T_I,	NULL,	NULL,	T_WI,	NULL,	NULL,	NULL,	"-w"		},
   { "C",	0,	T_W,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	"-w"		},
   { "s",	1,	T_C,	NULL,	NULL,	T_W,	NULL,	NULL,	NULL,	"-wp"		},
   { "S",	1,	T_W,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	"-wp"		},
