2000-01-25  Jakub Jelinek  <jakub@redhat.com>

	* gcc.c (simple_spec): New function.
	(main): Use it for MD_STARTFILE_PREFIX and MD_STARTFILE_PREFIX_1.
	* config/sparc/linux64.h (MD_STARTFILE_PREFIX,
	MD_STARTFILE_PREFIX_1): Define to /usr/lib64/:/lib64/ if compiling
	for 64bit target.
	(STARTFILE_SPEC, ENDFILE_SPEC, LINK_ARCH_SPEC): Simplify.
	(link_default, LINK_DEFAULT_SPEC): Remove.
	* config/sparc/sol2-sld-64.h (MD_STARTFILE_PREFIX): Define even
	for SPARC_BI_ARCH compiler.

--- gcc/config/sparc/linux64.h.jj	Sun Jul  2 10:37:16 2000
+++ gcc/config/sparc/linux64.h	Mon Jul 31 20:58:10 2000
@@ -32,7 +32,6 @@ Boston, MA 02111-1307, USA.  */
 #include <sparc/sysv4.h>
 
 #undef MD_EXEC_PREFIX
-#undef MD_STARTFILE_PREFIX
 
 #if TARGET_CPU_DEFAULT == TARGET_CPU_v9 || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc
 /* A 64 bit v9 compiler with stack-bias,
@@ -65,6 +64,29 @@ Boston, MA 02111-1307, USA.  */
 
 #endif
 
+/* Provide MD_STARTFILE_PREFIX{,_1}.  Need to include /usr/lib64/:/lib64/
+   if compiling for 64bit target.  */
+
+#undef MD_STARTFILE_PREFIX
+#undef MD_STARTFILE_PREFIX_1
+
+#ifdef SPARC_BI_ARCH
+
+#if DEFAULT_ARCH32_P
+#define MD_STARTFILE_PREFIX "%{m64:/usr/lib64/}"
+#define MD_STARTFILE_PREFIX_1 "%{m64:/lib64/}"
+#else
+#define MD_STARTFILE_PREFIX "%{!m32:/usr/lib64/}"
+#define MD_STARTFILE_PREFIX_1 "%{!m32:/lib64/}"
+#endif
+
+#else
+
+#define MD_STARTFILE_PREFIX "/usr/lib64/"
+#define MD_STARTFILE_PREFIX_1 "/lib64/"
+
+#endif
+
 /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add
    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which
    provides part of the support for getting C++ file-scope static
@@ -86,14 +108,12 @@ Boston, MA 02111-1307, USA.  */
 
 #if DEFAULT_ARCH32_P
 #define STARTFILE_SPEC "\
-%{m32:" STARTFILE_SPEC32 "} \
-%{m64:" STARTFILE_SPEC64 "} \
-%{!m32:%{!m64:" STARTFILE_SPEC32 "}}"
+%{!m64:" STARTFILE_SPEC32 "} \
+%{m64:" STARTFILE_SPEC64 "}"
 #else
 #define STARTFILE_SPEC "\
 %{m32:" STARTFILE_SPEC32 "} \
-%{m64:" STARTFILE_SPEC64 "} \
-%{!m32:%{!m64:" STARTFILE_SPEC64 "}}"
+%{!m32:" STARTFILE_SPEC64 "}"
 #endif
 
 #else
@@ -120,14 +140,12 @@ Boston, MA 02111-1307, USA.  */
 
 #if DEFAULT_ARCH32_P
 #define ENDFILE_SPEC "\
-%{m32:" ENDFILE_SPEC32 "} \
-%{m64:" ENDFILE_SPEC64 "} \
-%{!m32:%{!m64:" ENDFILE_SPEC32 "}}"
+%{!m64:" ENDFILE_SPEC32 "} \
+%{m64:" ENDFILE_SPEC64 "}"
 #else
 #define ENDFILE_SPEC "\
 %{m32:" ENDFILE_SPEC32 "} \
-%{m64:" ENDFILE_SPEC64 "} \
-%{!m32:%{!m64:" ENDFILE_SPEC64 "}}"
+%{!m32:" ENDFILE_SPEC64 "}"
 #endif
 
 #else
@@ -212,9 +230,8 @@ Boston, MA 02111-1307, USA.  */
 #define SUBTARGET_EXTRA_SPECS \
   { "link_arch32",       LINK_ARCH32_SPEC },              \
   { "link_arch64",       LINK_ARCH64_SPEC },              \
-  { "link_arch_default", LINK_ARCH_DEFAULT_SPEC },	  \
   { "link_arch",	 LINK_ARCH_SPEC },
-    
+
 #define LINK_ARCH32_SPEC "-m elf32_sparc -Y P,/usr/lib %{shared:-shared} \
   %{!shared: \
     %{!ibcs: \
@@ -233,14 +250,15 @@ Boston, MA 02111-1307, USA.  */
         %{static:-static}}} \
 "
 
+#if DEFAULT_ARCH32_P
+#define LINK_ARCH_SPEC "\
+%{!m64:%(link_arch32)} \
+%{m64:%(link_arch64)}"
+#else
 #define LINK_ARCH_SPEC "\
 %{m32:%(link_arch32)} \
-%{m64:%(link_arch64)} \
-%{!m32:%{!m64:%(link_arch_default)}} \
-"
-
-#define LINK_ARCH_DEFAULT_SPEC \
-(DEFAULT_ARCH32_P ? LINK_ARCH32_SPEC : LINK_ARCH64_SPEC)
+%{!m32:%(link_arch64)}"
+#endif
 
 #undef  LINK_SPEC
 #define LINK_SPEC "\
--- gcc/config/sparc/sol2-sld-64.h.jj	Mon Mar  6 19:40:59 2000
+++ gcc/config/sparc/sol2-sld-64.h	Mon Jul 31 20:58:10 2000
@@ -266,10 +266,13 @@
 "
 #endif
 
+#undef MD_STARTFILE_PREFIX
 #if DEFAULT_ARCH32_P
 #define MULTILIB_DEFAULTS { "m32" }
+#define MD_STARTFILE_PREFIX "%{m64:/usr/lib/sparcv9/}"
 #else
 #define MULTILIB_DEFAULTS { "m64" }
+#define MD_STARTFILE_PREFIX "%{!m32:/usr/lib/sparcv9/}"
 #endif
 
 #else /* !SPARC_BI_ARCH */
--- gcc/gcc.c.jj	Mon Jul 31 20:02:11 2000
+++ gcc/gcc.c	Mon Jul 31 21:23:08 2000
@@ -3712,6 +3712,36 @@ do_spec (spec)
   return value;
 }
 
+/* Process the spec SPEC and return the processed spec as a string
+   if successfull, NULL otherwise.
+   The SPEC should use only a limited subset of %-sequences (switch
+   presence testing) and should not use spaces, tabs, new-lines nor
+   pipe characters.  */
+
+char *
+simple_spec (spec)
+     const char *spec;
+{
+  int value;
+
+  clear_args ();
+  arg_going = 0;
+  delete_this_arg = 0;
+  this_is_output_file = 0;
+  this_is_library_file = 0;
+  input_from_pipe = 0;
+
+  value = do_spec_1 (spec, 0, NULL_PTR);
+
+  if (value == 0)
+    {
+      obstack_1grow (&obstack, 0);
+      return obstack_finish (&obstack);
+    }
+
+  return NULL;
+}
+
 /* Process the sub-spec SPEC as a portion of a larger spec.
    This is like processing a whole spec except that we do
    not initialize at the beginning and we do not supply a
@@ -5284,6 +5314,8 @@ main (argc, argv)
   /* If not cross-compiling, look for startfiles in the standard places.  */
   if (*cross_compile == '0')
     {
+      char *prefix;
+
 #ifdef MD_EXEC_PREFIX
       add_prefix (&exec_prefixes, md_exec_prefix, "GCC",
 		  PREFIX_PRIORITY_LAST, 0, NULL_PTR);
@@ -5292,13 +5324,23 @@ main (argc, argv)
 #endif
 
 #ifdef MD_STARTFILE_PREFIX
-      add_prefix (&startfile_prefixes, md_startfile_prefix, "GCC",
-		  PREFIX_PRIORITY_LAST, 0, NULL_PTR);
+      prefix = simple_spec(md_startfile_prefix);
+      if (prefix != NULL)
+	{
+	  if (*prefix != '\0')
+	    add_prefix (&startfile_prefixes, prefix, "GCC",
+			PREFIX_PRIORITY_LAST, 0, NULL_PTR);
+	}
 #endif
 
 #ifdef MD_STARTFILE_PREFIX_1
-      add_prefix (&startfile_prefixes, md_startfile_prefix_1, "GCC",
-		  PREFIX_PRIORITY_LAST, 0, NULL_PTR);
+      prefix = simple_spec(md_startfile_prefix_1);
+      if (prefix != NULL)
+	{
+	  if (*prefix != '\0')
+	    add_prefix (&startfile_prefixes, prefix, "GCC",
+			PREFIX_PRIORITY_LAST, 0, NULL_PTR);
+	}
 #endif
 
       /* If standard_startfile_prefix is relative, base it on
@@ -5322,10 +5364,9 @@ main (argc, argv)
 			concat (gcc_exec_prefix, machine_suffix,
 				standard_startfile_prefix, NULL_PTR),
 			NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);
-	  add_prefix (&startfile_prefixes,
-		      concat (standard_exec_prefix,
-			      machine_suffix,
-			      standard_startfile_prefix, NULL_PTR),
+	  prefix = concat (standard_exec_prefix, machine_suffix,
+			   standard_startfile_prefix, NULL_PTR);
+	  add_prefix (&startfile_prefixes, prefix,
 		      NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);
 	}		       
 
