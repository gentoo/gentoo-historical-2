2000-07-25  Jakub Jelinek  <jakub@redhat.com>

	* regmove.c (combine_stack_adjustments_for_block): Don't
	merge stack adjustements accross ASM_OPERANDS.

	* gcc.dg/20000724-1.c: New test.

--- gcc/regmove.c.jj	Mon Jul 24 11:54:38 2000
+++ gcc/regmove.c	Tue Jul 25 00:05:00 2000
@@ -2328,6 +2328,16 @@ combine_stack_adjustments_for_block (bb)
       if (! INSN_P (insn))
 	goto processed;
 
+      if (asm_noperands (PATTERN (insn)) >= 0)
+	{
+	  /* Asm might be given just a pointer to some local stack area.  */
+	  free_csa_memlist (memlist);
+	  memlist = NULL;
+	  last_sp_set = NULL_RTX;
+	  last_sp_adjust = 0;
+	  goto processed;
+	}
+
       set = single_set_for_csa (insn);
       if (set)
 	{
--- gcc/testsuite/gcc.dg/20000724-1.c.jj	Mon Jul 24 19:50:46 2000
+++ gcc/testsuite/gcc.dg/20000724-1.c	Mon Jul 24 18:06:54 2000
@@ -0,0 +1,63 @@
+/* { dg-do run { target i?86-*-linux* } } */
+/* { dg-options "-O2 -fomit-frame-pointer" } */
+
+extern void abort (void);
+extern void exit (int);
+
+struct s {
+  struct { int a; } a;
+  int b;
+  struct { struct { int a; } a; struct t { struct t *a, *b; } b; } c;
+};
+
+int bar(int (*fn)(void *), void *arg, unsigned long flags)
+{
+  return 0;
+}
+
+int baz(void *x)
+{
+  return 0;
+}
+
+void do_check (struct s *) asm ("do_check") __attribute__((regparm(1)));
+
+void do_check(struct s *x)
+{
+  if (x->a.a || x->b || x->c.a.a)
+    abort();
+  if (x->c.b.a != &x->c.b || x->c.b.b != &x->c.b)
+    abort();
+}
+
+asm ("
+___checkme:
+  pushl %eax; pushl %ebx; pushl %ecx; pushl %edx; pushl %esi; pushl %edi; pushl $0; pushl $0
+  pushl $0; pushl $0; pushl $0; pushl $0; pushl $0; pushl $0; pushl $0; pushl $0
+  movl %ecx, %eax
+  call do_check
+  popl %eax; popl %eax; popl %eax; popl %eax; popl %eax; popl %eax; popl %eax; popl %eax
+  popl %eax; popl %eax; popl %edi; popl %esi; popl %edx; popl %ecx; popl %ebx; popl %eax
+  ret
+");
+
+extern inline void do_asm(struct s * x)
+{
+  asm volatile("call ___checkme" : : "c" (x) : "memory");
+}
+
+int foo(void)
+{
+  struct s x = { { 0 }, 0, { { 0 }, { &x.c.b, &x.c.b } } };
+  bar(baz, &x, 1);
+  do_asm(&x);
+  bar(baz, &x, 1);
+  do_asm(&x);
+  return 0;
+}
+
+int main()
+{
+  foo();
+  exit(0);
+}
