Wed Aug  2 09:51:32 CEST 2000  Jan Hubicka  <jh@suse.cz>

	* rtlanal.c (swap_commutative_operands_p): New function.
	* rtl.h (swap_commutative_operands_p): Declare.
	* simplify-rtx.c (simplify_gen_binary, simplify_relational_operation):
	use it.
	* combine.c (combine_simplify_rtx): Likewise.
	(simplify_comparison): Likewise.
	* recog.c (validate_replace_rtx_1): Likewise.

*** gcc/rtlanal.c	Mon Jul 31 20:07:38 2000
--- gcc/rtlanal.c	Wed Aug  2 01:18:47 2000
*************** regno_use_in (regno, x)
*** 2256,2261 ****
--- 2256,2293 ----
    return NULL_RTX;
  }
  
+ /* Return 1 if it is desirable to swap operands of commutative operation.
+    We take care to not return 1 when the swap is not neccesary.  */
+ int
+ swap_commutative_operands_p (x, y)
+      rtx x, y;
+ {
+    /* Constant ought to go second.  */
+    if (CONSTANT_P (x))
+      {
+ 	/* When first operand is not constant, always swap.  */
+ 	if (!CONSTANT_P (y))
+ 	  return 1;
+ 	/* Const int is always the second.  */
+ 	if (GET_CODE (x) == CONST_INT && GET_CODE (y) != CONST_INT)
+ 	  return 1;
+ 	/* If not available make const_double the second.  */
+ 	if (GET_CODE (x) == CONST_DOUBLE && GET_CODE (y) != CONST_DOUBLE)
+ 	  return 1;
+      }
+    /* Complex expression is always comming the first.  */
+    if (GET_RTX_CLASS (GET_CODE (x)) == 'o'
+        && GET_RTX_CLASS (GET_CODE (y)) != 'o')
+      return 1;
+    /* SUBREG is primitive operand, so put it the second.  */
+    if (GET_CODE (x) == SUBREG
+        && GET_RTX_CLASS (GET_CODE (SUBREG_REG (x))) == 'o'
+        && GET_RTX_CLASS (GET_CODE (y)) != 'o'
+        && (GET_CODE (x) != SUBREG
+ 	   || GET_RTX_CLASS (GET_CODE (SUBREG_REG (y))) != 'o'))
+      return 1;
+    return 0;
+ }
  
  /* Return 1 if X is an autoincrement side effect and the register is
     not the stack pointer.  */
*** gcc/rtl.h	Tue Jul 25 23:33:16 2000
--- gcc/rtl.h	Mon Jul 31 22:46:55 2000
*************** extern int reg_used_between_p		PARAMS ((
*** 1260,1265 ****
--- 1260,1266 ----
  extern int reg_referenced_between_p	PARAMS ((rtx, rtx, rtx));
  extern int reg_set_between_p		PARAMS ((rtx, rtx, rtx));
  extern int regs_set_between_p		PARAMS ((rtx, rtx, rtx));
+ extern int swap_commutative_operands_p	PARAMS ((rtx, rtx));
  extern int modified_between_p		PARAMS ((rtx, rtx, rtx));
  extern int no_labels_between_p		PARAMS ((rtx, rtx));
  extern int no_jumps_between_p		PARAMS ((rtx, rtx));
*** gcc/simplify-rtx.c	Mon Jul 31 22:07:01 2000
--- gcc/simplify-rtx.c	Wed Aug  2 09:43:03 2000
*************** simplify_gen_binary (code, mode, op0, op
*** 199,210 ****
  
    /* Put complex operands first and constants second if commutative.  */
    if (GET_RTX_CLASS (code) == 'c'
!       && ((CONSTANT_P (op0) && GET_CODE (op1) != CONST_INT)
! 	  || (GET_RTX_CLASS (GET_CODE (op0)) == 'o'
! 	      && GET_RTX_CLASS (GET_CODE (op1)) != 'o')
! 	  || (GET_CODE (op0) == SUBREG
! 	      && GET_RTX_CLASS (GET_CODE (SUBREG_REG (op0))) == 'o'
! 	      && GET_RTX_CLASS (GET_CODE (op1)) != 'o')))
      tem = op0, op0 = op1, op1 = tem;
  
    /* If this simplifies, do it.  */
--- 199,205 ----
  
    /* Put complex operands first and constants second if commutative.  */
    if (GET_RTX_CLASS (code) == 'c'
!       && swap_commutative_operands_p (op0, op1))
      tem = op0, op0 = op1, op1 = tem;
  
    /* If this simplifies, do it.  */
*************** simplify_relational_operation (code, mod
*** 1710,1717 ****
      return 0;
  
    /* Make sure the constant is second.  */
!   if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))
!       || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))
      {
        tem = op0, op0 = op1, op1 = tem;
        code = swap_condition (code);
--- 1710,1716 ----
      return 0;
  
    /* Make sure the constant is second.  */
!   if (swap_commutative_operands_p (op0, op1))
      {
        tem = op0, op0 = op1, op1 = tem;
        code = swap_condition (code);
*** gcc/combine.c	Mon Jul 31 21:55:15 2000
--- gcc/combine.c	Wed Aug  2 09:43:27 2000
*************** combine_simplify_rtx (x, op0_mode, last,
*** 3492,3503 ****
    /* If this is a commutative operation, put a constant last and a complex
       expression first.  We don't need to do this for comparisons here.  */
    if (GET_RTX_CLASS (code) == 'c'
!       && ((CONSTANT_P (XEXP (x, 0)) && GET_CODE (XEXP (x, 1)) != CONST_INT)
! 	  || (GET_RTX_CLASS (GET_CODE (XEXP (x, 0))) == 'o'
! 	      && GET_RTX_CLASS (GET_CODE (XEXP (x, 1))) != 'o')
! 	  || (GET_CODE (XEXP (x, 0)) == SUBREG
! 	      && GET_RTX_CLASS (GET_CODE (SUBREG_REG (XEXP (x, 0)))) == 'o'
! 	      && GET_RTX_CLASS (GET_CODE (XEXP (x, 1))) != 'o')))
      {
        temp = XEXP (x, 0);
        SUBST (XEXP (x, 0), XEXP (x, 1));
--- 3533,3539 ----
    /* If this is a commutative operation, put a constant last and a complex
       expression first.  We don't need to do this for comparisons here.  */
    if (GET_RTX_CLASS (code) == 'c'
!       && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
      {
        temp = XEXP (x, 0);
        SUBST (XEXP (x, 0), XEXP (x, 1));
*************** simplify_comparison (code, pop0, pop1)
*** 10074,10080 ****
    /* If the first operand is a constant, swap the operands and adjust the
       comparison code appropriately, but don't do this if the second operand
       is already a constant integer.  */
!   if (CONSTANT_P (op0) && GET_CODE (op1) != CONST_INT)
      {
        tem = op0, op0 = op1, op1 = tem;
        code = swap_condition (code);
--- 10150,10156 ----
    /* If the first operand is a constant, swap the operands and adjust the
       comparison code appropriately, but don't do this if the second operand
       is already a constant integer.  */
!   if (swap_commutative_operands_p (op0, op1))
      {
        tem = op0, op0 = op1, op1 = tem;
        code = swap_condition (code);
*** gcc/recog.c	Fri Jul 21 00:01:48 2000
--- gcc/recog.c	Mon Jul 31 23:47:35 2000
*************** validate_replace_rtx_1 (loc, from, to, o
*** 435,441 ****
  
        validate_replace_rtx_1 (&XEXP (x, 0), from, to, object);
        validate_replace_rtx_1 (&XEXP (x, 1), from, to, object);
!       if (prev_changes != num_changes && CONSTANT_P (XEXP (x, 0)))
  	{
  	  validate_change (object, loc,
  			   gen_rtx_fmt_ee (GET_RTX_CLASS (code) == 'c' ? code
--- 438,445 ----
  
        validate_replace_rtx_1 (&XEXP (x, 0), from, to, object);
        validate_replace_rtx_1 (&XEXP (x, 1), from, to, object);
!       if (prev_changes != num_changes
! 	  && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
  	{
  	  validate_change (object, loc,
  			   gen_rtx_fmt_ee (GET_RTX_CLASS (code) == 'c' ? code

