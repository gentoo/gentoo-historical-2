2000-09-15  Richard Henderson  <rth@cygnus.com>

        * expmed.c (store_bit_field): Consider naturally aligned
        memory for direct reference.

2000-09-15  Richard Henderson  <rth@cygnus.com>

        * config/alpha/alpha.c (alpha_expand_unaligned_load): Force all
        AND addresses into alias set 0.
        (alpha_expand_unaligned_store): Likewise.
        (alpha_expand_unaligned_load_words): Likewise.
        (alpha_expand_unaligned_store_words): Likewise.

*** gcc/expmed.c	2000/08/12 22:45:05	1.63
--- gcc/expmed.c	2000/09/15 11:05:11
*************** store_bit_field (str_rtx, bitsize, bitnu
*** 297,315 ****
    if (flag_force_mem)
      value = force_not_mem (value);
  
!   if ((GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD
!        || (GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode)
! 	   && GET_MODE_SIZE (fieldmode) != 0))
!       && (GET_CODE (op0) != MEM
! 	  || ! SLOW_UNALIGNED_ACCESS (fieldmode, align)
! 	  || (offset * BITS_PER_UNIT % bitsize == 0
! 	      && align % GET_MODE_BITSIZE (fieldmode) == 0))
!       && (BYTES_BIG_ENDIAN ? bitpos + bitsize == unit : bitpos == 0)
!       && bitsize == GET_MODE_BITSIZE (fieldmode))
      {
-       /* Storing in a full-word or multi-word field in a register
- 	 can be done with just SUBREG.  Also, storing in the entire object
- 	 can be done with just SUBREG.  */
        if (GET_MODE (op0) != fieldmode)
  	{
  	  if (GET_CODE (op0) == SUBREG)
--- 297,318 ----
    if (flag_force_mem)
      value = force_not_mem (value);
  
!   /* If the target is a register, overwriting the entire object, or storing
!      a full-word or multi-word field can be done with just a SUBREG.
! 
!      If the target is memory, storing any naturally aligned field can be
!      done with a simple store.  For targets that support fast unaligned
!      memory, any naturally sized, unit aligned field can be done directly.  */
!      
!   if (bitsize == GET_MODE_BITSIZE (fieldmode)
!       && (GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD
! 	  || GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode)
! 	  || (GET_CODE (op0) == MEM
! 	      && (! SLOW_UNALIGNED_ACCESS (fieldmode, align)
! 		  || (offset * BITS_PER_UNIT % bitsize == 0
! 		      && align % GET_MODE_BITSIZE (fieldmode) == 0))))
!       && (BYTES_BIG_ENDIAN ? bitpos + bitsize == unit : bitpos == 0))
      {
        if (GET_MODE (op0) != fieldmode)
  	{
  	  if (GET_CODE (op0) == SUBREG)
*** gcc/config/alpha/alpha.c	2000/08/25 19:08:47	1.140
--- gcc/config/alpha/alpha.c	2000/09/15 11:05:21
*************** alpha_expand_unaligned_load (tgt, mem, s
*** 2292,2298 ****
       HOST_WIDE_INT size, ofs;
       int sign;
  {
!   rtx meml, memh, addr, extl, exth;
    enum machine_mode mode;
  
    meml = gen_reg_rtx (DImode);
--- 2292,2298 ----
       HOST_WIDE_INT size, ofs;
       int sign;
  {
!   rtx meml, memh, addr, extl, exth, tmp;
    enum machine_mode mode;
  
    meml = gen_reg_rtx (DImode);
*************** alpha_expand_unaligned_load (tgt, mem, s
*** 2301,2319 ****
    extl = gen_reg_rtx (DImode);
    exth = gen_reg_rtx (DImode);
  
!   emit_move_insn (meml,
! 		  change_address (mem, DImode,
! 				  gen_rtx_AND (DImode, 
! 					       plus_constant (XEXP (mem, 0),
! 							      ofs),
! 					       GEN_INT (-8))));
  
!   emit_move_insn (memh,
! 		  change_address (mem, DImode,
! 				  gen_rtx_AND (DImode, 
! 					       plus_constant (XEXP (mem, 0),
! 							      ofs + size - 1),
! 					       GEN_INT (-8))));
  
    if (sign && size == 2)
      {
--- 2301,2324 ----
    extl = gen_reg_rtx (DImode);
    exth = gen_reg_rtx (DImode);
  
!   /* AND addresses cannot be in any alias set, since they may implicitly
!      alias surrounding code.  Ideally we'd have some alias set that 
!      covered all types except those with alignment 8 or higher.  */
  
!   tmp = change_address (mem, DImode,
! 			gen_rtx_AND (DImode, 
! 				     plus_constant (XEXP (mem, 0), ofs),
! 				     GEN_INT (-8)));
!   MEM_ALIAS_SET (tmp) = 0;
!   emit_move_insn (meml, tmp);
! 
!   tmp = change_address (mem, DImode,
! 			gen_rtx_AND (DImode, 
! 				     plus_constant (XEXP (mem, 0),
! 						    ofs + size - 1),
! 				     GEN_INT (-8)));
!   MEM_ALIAS_SET (tmp) = 0;
!   emit_move_insn (memh, tmp);
  
    if (sign && size == 2)
      {
*************** alpha_expand_unaligned_store (dst, src, 
*** 2377,2391 ****
--- 2382,2403 ----
    insl = gen_reg_rtx (DImode);
    insh = gen_reg_rtx (DImode);
  
+   /* AND addresses cannot be in any alias set, since they may implicitly
+      alias surrounding code.  Ideally we'd have some alias set that 
+      covered all types except those with alignment 8 or higher.  */
+ 
    meml = change_address (dst, DImode,
  			 gen_rtx_AND (DImode, 
  				      plus_constant (XEXP (dst, 0), ofs),
  				      GEN_INT (-8)));
+   MEM_ALIAS_SET (meml) = 0;
+ 
    memh = change_address (dst, DImode,
  			 gen_rtx_AND (DImode, 
  				      plus_constant (XEXP (dst, 0),
  						     ofs+size-1),
  				      GEN_INT (-8)));
+   MEM_ALIAS_SET (memh) = 0;
  
    emit_move_insn (dsth, memh);
    emit_move_insn (dstl, meml);
*************** alpha_expand_unaligned_load_words (out_r
*** 2462,2468 ****
    rtx const im8 = GEN_INT (-8);
    rtx const i64 = GEN_INT (64);
    rtx ext_tmps[MAX_MOVE_WORDS], data_regs[MAX_MOVE_WORDS+1];
!   rtx sreg, areg;
    HOST_WIDE_INT i;
  
    /* Generate all the tmp registers we need.  */
--- 2474,2480 ----
    rtx const im8 = GEN_INT (-8);
    rtx const i64 = GEN_INT (64);
    rtx ext_tmps[MAX_MOVE_WORDS], data_regs[MAX_MOVE_WORDS+1];
!   rtx sreg, areg, tmp;
    HOST_WIDE_INT i;
  
    /* Generate all the tmp registers we need.  */
*************** alpha_expand_unaligned_load_words (out_r
*** 2480,2498 ****
    /* Load up all of the source data.  */
    for (i = 0; i < words; ++i)
      {
!       emit_move_insn (data_regs[i],
! 		      change_address (smem, DImode,
! 				      gen_rtx_AND (DImode,
! 						   plus_constant (XEXP(smem,0),
! 								  8*i),
! 						   im8)));
      }
!   emit_move_insn (data_regs[words],
! 		  change_address (smem, DImode,
! 				  gen_rtx_AND (DImode,
! 					       plus_constant (XEXP(smem,0),
! 							      8*words - 1),
! 					       im8)));
  
    /* Extract the half-word fragments.  Unfortunately DEC decided to make
       extxh with offset zero a noop instead of zeroing the register, so 
--- 2492,2511 ----
    /* Load up all of the source data.  */
    for (i = 0; i < words; ++i)
      {
!       tmp = change_address (smem, DImode,
! 			    gen_rtx_AND (DImode,
! 					 plus_constant (XEXP(smem,0), 8*i),
! 					 im8));
!       MEM_ALIAS_SET (tmp) = 0;
!       emit_move_insn (data_regs[i], tmp);
      }
! 
!   tmp = change_address (smem, DImode,
! 			gen_rtx_AND (DImode,
! 				     plus_constant (XEXP(smem,0), 8*words - 1),
! 				     im8));
!   MEM_ALIAS_SET (tmp) = 0;
!   emit_move_insn (data_regs[words], tmp);
  
    /* Extract the half-word fragments.  Unfortunately DEC decided to make
       extxh with offset zero a noop instead of zeroing the register, so 
*************** alpha_expand_unaligned_store_words (data
*** 2559,2568 ****
--- 2572,2584 ----
  					   plus_constant (XEXP(dmem,0),
  							  words*8 - 1),
  				       im8));
+   MEM_ALIAS_SET (st_addr_2) = 0;
+ 
    st_addr_1 = change_address (dmem, DImode,
  			      gen_rtx_AND (DImode, 
  					   XEXP (dmem, 0),
  					   im8));
+   MEM_ALIAS_SET (st_addr_1) = 0;
  
    /* Load up the destination end bits.  */
    emit_move_insn (st_tmp_2, st_addr_2);
*************** alpha_expand_unaligned_store_words (data
*** 2601,2612 ****
    emit_move_insn (st_addr_2, st_tmp_2);
    for (i = words-1; i > 0; --i)
      {
!       emit_move_insn (change_address (dmem, DImode,
! 				      gen_rtx_AND (DImode,
! 						   plus_constant(XEXP (dmem,0),
! 								 i*8),
! 					       im8)),
! 		      data_regs ? ins_tmps[i-1] : const0_rtx);
      }
    emit_move_insn (st_addr_1, st_tmp_1);
  }
--- 2617,2628 ----
    emit_move_insn (st_addr_2, st_tmp_2);
    for (i = words-1; i > 0; --i)
      {
!       rtx tmp = change_address (dmem, DImode,
! 				gen_rtx_AND (DImode,
! 					     plus_constant(XEXP (dmem,0), i*8),
! 					     im8));
!       MEM_ALIAS_SET (tmp) = 0;
!       emit_move_insn (tmp, data_regs ? ins_tmps[i-1] : const0_rtx);
      }
    emit_move_insn (st_addr_1, st_tmp_1);
  }


