2000-10-20  Jason Merrill  <jason@redhat.com>

	* tree.c (walk_tree): Don't walk into default args.

*** gcc/cp/tree.c.~1~	Thu Sep 21 18:01:50 2000
--- gcc/cp/tree.c	Fri Oct 20 16:37:12 2000
*************** walk_tree (tp, func, data, htab)
*** 1388,1394 ****
  
      case FUNCTION_TYPE:
        WALK_SUBTREE (TREE_TYPE (*tp));
!       WALK_SUBTREE (TYPE_ARG_TYPES (*tp));
        break;
  
      case ARRAY_TYPE:
--- 1388,1400 ----
  
      case FUNCTION_TYPE:
        WALK_SUBTREE (TREE_TYPE (*tp));
!       {
! 	tree arg = TYPE_ARG_TYPES (*tp);
! 
! 	/* We never want to walk into default arguments.  */
! 	for (; arg; arg = TREE_CHAIN (arg))
! 	  WALK_SUBTREE (TREE_VALUE (arg));
!       }
        break;
  
      case ARRAY_TYPE:

--- gcc/testsuite/g++.old-deja/g++.other/inline15.C.jj	Wed Oct 18 14:37:36 2000
+++ gcc/testsuite/g++.old-deja/g++.other/inline15.C	Wed Oct 18 14:37:52 2000
@@ -0,0 +1,31 @@
+// Build don't link:
+// Origin: Jakub Jelinek <jakub@redhat.com>
+// Special g++ Options: -O1
+
+class Type;
+template<class E>
+class X
+{
+public:
+  X<E>();
+  inline X<E>(int);
+  inline ~X<E>();
+};
+template<class E> const Type &foo(const X<E> *);
+template<class E> inline X<E>::X(int x)
+{
+  const Type &a = foo(this);
+}
+template<class E> inline X<E>::~X()
+{
+  const Type &a = foo(this);
+}
+class Y
+{
+  X<Type> a;
+public:
+  Y(const X<Type> &x = X<Type>());
+};
+Y::Y(const X<Type> &x) : a(1)
+{
+}
