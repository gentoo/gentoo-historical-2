Wed Aug  2 16:26:15 MET DST 2000  Jan Hubicka  <jh@suse.cz>

	* i386.c (legitimate_address_p): Accept other bases than
	pic_offset_table_rtx for GOTOFF constructs.

*** gcc/config/i386/i386.c.jj	Wed Jul  5 16:48:36 2000
--- gcc/config/i386/i386.c	Thu Jul 27 23:33:15 2000
*************** legitimate_address_p (mode, addr, strict
*** 2510,2523 ****
  	      goto error;
  	    }
  
! 	  /* Verify that a symbolic pic displacement includes 
! 	     the pic_offset_table_rtx register.  */
! 	  if (base != pic_offset_table_rtx
! 	      && (index != pic_offset_table_rtx || scale != 1))
! 	    {
! 	      reason = "pic displacement against invalid base";
! 	      goto error;
! 	    }
  	}
        else if (HALF_PIC_P ())
  	{
--- 2736,2762 ----
  	      goto error;
  	    }
  
!           /* This code used to verify that a symbolic pic displacement
! 	     includes the pic_offset_table_rtx register. 
! 	    
! 	     While this is good idea, unfortunately these constructs may
! 	     be created by "adds using lea" optimization for incorrect
! 	     code like:
! 
! 	     int a;
! 	     int foo(int i)
! 	       {
! 	         return *(&a+i);
! 	       }
! 
! 	     This code nonsential, but results in addressing
! 	     GOT table with pic_offset_table_rtx base.  We can't
! 	     just refuse it easilly, since it gets matched by
! 	     "addsi3" pattern, that later gets split to lea in the
! 	     case output register differs from input.  While this
! 	     can be handled by separate addsi pattern for this case
! 	     that never results in lea, this seems to be easier and
! 	     correct fix for crash to disable this test.  */
  	}
        else if (HALF_PIC_P ())
  	{

2000-09-04  Jakub Jelinek  <jakub@redhat.com>

	* gcc.dg/20000904-1.c: New test.

--- gcc/testsuite/gcc.dg/20000904-1.c.jj	Mon Sep  4 11:55:49 2000
+++ gcc/testsuite/gcc.dg/20000904-1.c	Mon Sep  4 11:55:30 2000
@@ -0,0 +1,11 @@
+/* { dg-do compile { target i?86-*-* } } */
+/* { dg-options "-O0 -fpic" } */
+
+static struct {
+  unsigned short a, b, c, d;
+} x[10];
+
+int foo(int i)
+{
+  return ((*((char *)&x[i] + i)) | (*((char *)&x[i] + i)));
+}
