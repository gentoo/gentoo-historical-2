2000-10-27  Jakub Jelinek  <jakub@redhat.com>

	* calls.c (expand_call): If sibcall_failure is set during pass 1,
	clear tail_call_insns as well.

	* g++.old-deja/g++.other/eh2.C: New test.

--- gcc/testsuite/g++.old-deja/g++.other/eh2.C.jj	Fri Oct 27 13:40:14 2000
+++ gcc/testsuite/g++.old-deja/g++.other/eh2.C	Fri Oct 27 13:40:14 2000
@@ -0,0 +1,18 @@
+// Build don't link:
+// Origin: Jakub Jelinek <jakub@redhat.com>
+// Special g++ Options: -O2
+
+class a {
+public:
+  double b;
+  int c;
+  ~a() { }
+};
+
+int bar(a x);
+a foo(double x);
+
+int baz(double x, int y)
+{
+   return bar(foo(x));
+}
--- gcc/calls.c.jj	Fri Oct 27 13:34:58 2000
+++ gcc/calls.c	Fri Oct 27 13:40:14 2000
@@ -3363,10 +3363,6 @@ expand_call (exp, target, ignore)
 	{
 	  tail_call_insns = insns;
 
-	  /* If something prevents making this a sibling call,
-	     zero out the sequence.  */
-	  if (sibcall_failure)
-	    tail_call_insns = NULL_RTX;
 	  /* Restore the pending stack adjustment now that we have
 	     finished generating the sibling call sequence.  */
 
@@ -3385,6 +3381,11 @@ expand_call (exp, target, ignore)
 	}
       else
 	normal_call_insns = insns;
+
+      /* If something prevents making this a sibling call,
+	 zero out the sequence.  */
+      if (sibcall_failure)
+	tail_call_insns = NULL_RTX;
     }
 
   /* The function optimize_sibling_and_tail_recursive_calls doesn't
