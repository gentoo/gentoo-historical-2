2000-06-27  Jakub Jelinek  <jakub@redhat.com>

        * config/sparc/sparc.c (sparc_va_arg): On sparc32 copy 8 byte objects
	to temporary.

--- gcc/config/sparc/sparc.c.jj	Mon Apr 17 14:06:51 2000
+++ gcc/config/sparc/sparc.c	Tue Apr 18 17:20:14 2000
@@ -4804,12 +4804,6 @@ sparc_va_arg (valist, type)
 	  indirect = 1;
 	  size = rsize = UNITS_PER_WORD;
 	}
-      else
-	{
-	  /* ??? The old va-sparc.h implementation, for 8 byte objects
-	     copied stuff to a temporary -- I don't see that that 
-	     provides any more alignment than the stack slot did.  */
-	}
     }
 
   incr = valist;
@@ -4841,6 +4835,29 @@ sparc_va_arg (valist, type)
       addr_rtx = force_reg (Pmode, addr_rtx);
       addr_rtx = gen_rtx_MEM (Pmode, addr_rtx);
       MEM_ALIAS_SET (addr_rtx) = get_varargs_alias_set ();
+    }
+  else if (rsize == 2 * UNITS_PER_WORD && TARGET_ARCH32)
+    {
+      /* va_list is guaranteed to be aligned to 8 bytes only
+	 on sparc32.  */
+      rtx word0 = addr_rtx, word1, tword0, tword1;
+
+      word0 = force_reg (Pmode, addr_rtx);
+      word1 = plus_constant (word0, 4);
+      word1 = force_reg (Pmode, word1);
+      word0 = gen_rtx_MEM (SImode, word0);
+      word1 = gen_rtx_MEM (SImode, word1);
+      MEM_ALIAS_SET (word0) = get_varargs_alias_set ();
+      MEM_ALIAS_SET (word1) = get_varargs_alias_set ();
+      addr_rtx = assign_temp (type, 0, 1, 1);
+      tword0 = gen_rtx_MEM (SImode, XEXP (addr_rtx, 0));
+      MEM_ALIAS_SET (tword0) = get_varargs_alias_set ();
+      tword1 = plus_constant (XEXP (addr_rtx, 0), 4);
+      tword1 = gen_rtx_MEM (SImode, tword1);
+      MEM_ALIAS_SET (tword1) = get_varargs_alias_set ();
+      emit_move_insn (tword0, word0);
+      emit_move_insn (tword1, word1);
+      addr_rtx = XEXP (addr_rtx, 0);
     }
 
   return addr_rtx;
