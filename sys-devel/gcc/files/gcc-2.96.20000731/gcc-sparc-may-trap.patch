2000-10-13  Jakub Jelinek  <jakub@redhat.com>

	* rtlanal.c (may_trap_p): Check operand modes of COMPARE.

	* gcc.dg/20001013-1.c: New test.

--- gcc/rtlanal.c.jj	Fri Sep 15 16:46:43 2000
+++ gcc/rtlanal.c	Fri Oct 13 19:08:01 2000
@@ -1877,6 +1877,17 @@ may_trap_p (x)
 	 certainly may trap.  */
       return 1;
 
+    case COMPARE:
+      /* Any floating comparison may trap.  */
+      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)
+	return 1;
+      /* But often the compare has some CC mode, so check operand
+	 modes as well.  */
+      if (GET_MODE_CLASS (GET_MODE (XEXP (x, 0))) == MODE_FLOAT
+	  || GET_MODE_CLASS (GET_MODE (XEXP (x, 1))) == MODE_FLOAT)
+	return 1;
+      break;
+
     default:
       /* Any floating arithmetic may trap.  */
       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)
--- gcc/testsuite/gcc.dg/20001013-1.c.jj	Fri Oct 13 19:10:41 2000
+++ gcc/testsuite/gcc.dg/20001013-1.c	Fri Oct 13 19:10:36 2000
@@ -0,0 +1,39 @@
+/* { dg-do run { target sparc*-*-* } } */
+/* { dg-options "-O2 -mvis" } */
+
+int l;
+
+int baz (double x)
+{
+  return l == 0;
+}
+
+double bar (double x)
+{
+  return 1.0;
+}
+
+double foo (double x)
+{
+  if (l == -1 || baz (x)) return x;
+  if (x < 0.0)
+    return bar (x);
+  else
+    return 0.0;
+}
+
+union {
+  double d;
+  long long l;
+} x = { l: 0x7ff8000000000000LL }, y;
+
+main ()
+{
+  unsigned int fsr = 0;
+  __asm __volatile ("ld %0, %%fsr" : : "m" (fsr));
+  y.d = foo (x.d);
+  __asm __volatile ("st %%fsr, %0" : "=m" (fsr));
+  if (x.l != y.l || (fsr & 0x3ff))
+    abort ();
+  exit (0);
+}
