2000-08-15  Joseph S. Myers  <jsm28@cam.ac.uk>

	* gcc.dg/c90-array-lval-2.c, gcc.dg/c90-const-expr-2.c,
	gcc.dg/c99-array-lval-2.c, gcc.dg/c99-const-expr-2.c,
	gcc.dg/c99-func-3.c, gcc.dg/c99-func-4.c: New tests.

--- gcc/testsuite/gcc.dg/c90-array-lval-2.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c90-array-lval-2.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,20 @@
+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do compile } */
+/* { dg-options "-std=iso9899:1990 -pedantic-errors" } */
+
+struct s { char c[17]; };
+
+struct s x;
+
+extern struct s foo (void);
+
+#define ASSERT(v, a)	char v[((a) ? 1 : -1)]
+
+ASSERT (p, sizeof (x.c) == 17);
+ASSERT (q, sizeof (0, x.c) == sizeof (char *));
+ASSERT (r, sizeof ((foo ()).c) == 17);
+/* The non-lvalue array does not decay to a pointer, so the comma expression
+   has (non-lvalue) array type.
+*/
+ASSERT (s, sizeof (0, (foo ()).c) == 17); /* { dg-bogus "array" "bad non-lvalue array handling" { xfail *-*-* } } */
--- gcc/testsuite/gcc.dg/c90-const-expr-2.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c90-const-expr-2.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,36 @@
+/* Test for constant expressions: details of what is a null pointer
+   constant.
+*/
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do compile } */
+/* { dg-options "-std=iso9899:1990" } */
+/* Note: not using -pedantic since the -std option alone should be enough
+   to give the correct behavior to conforming programs.  If -pedantic is
+   needed to make (say) (0, 0) not be a constant expression, this is a
+   bug.
+*/
+
+int *a;
+int b;
+long *c;
+
+/* Assertion that n is a null pointer constant: so the conditional expression
+   has type 'int *' instead of 'void *'.
+*/
+#define ASSERT_NPC(n)	(b = *(1 ? a : (n)))
+/* Assertion that n is not a null pointer constant: so the conditional
+   expresions has type 'void *' instead of 'int *'.
+*/
+#define ASSERT_NOT_NPC(n)	(c = (1 ? a : (n)))
+
+void
+foo (void)
+{
+  ASSERT_NPC (0);
+  ASSERT_NPC ((void *)0);
+  ASSERT_NOT_NPC ((void *)(void *)0); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  ASSERT_NOT_NPC ((void *)(char *)0); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  ASSERT_NOT_NPC ((void *)(0, 0)); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  /* This last one is a null pointer constant in C99 only.  */
+  ASSERT_NOT_NPC ((void *)(1 ? 0 : (0, 0))); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+}
--- gcc/testsuite/gcc.dg/c99-array-lval-2.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c99-array-lval-2.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,18 @@
+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do compile } */
+/* { dg-options "-std=iso9899:1999 -pedantic-errors" } */
+
+struct s { char c[17]; };
+
+struct s x;
+
+extern struct s foo (void);
+
+#define ASSERT(v, a)	char v[((a) ? 1 : -1)]
+
+ASSERT (p, sizeof (x.c) == 17);
+ASSERT (q, sizeof (0, x.c) == sizeof (char *));
+ASSERT (r, sizeof ((foo ()).c) == 17);
+/* The non-lvalue array decays to a pointer in C99.  */
+ASSERT (s, sizeof (0, (foo ()).c) == sizeof (char *)); /* { dg-bogus "array" "bad non-lvalue array handling" { xfail *-*-* } } */
--- gcc/testsuite/gcc.dg/c99-const-expr-2.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c99-const-expr-2.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,36 @@
+/* Test for constant expressions: details of what is a null pointer
+   constant.
+*/
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do compile } */
+/* { dg-options "-std=iso9899:1999" } */
+/* Note: not using -pedantic since the -std option alone should be enough
+   to give the correct behavior to conforming programs.  If -pedantic is
+   needed to make (say) (0, 0) not be a constant expression, this is a
+   bug.
+*/
+
+int *a;
+int b;
+long *c;
+
+/* Assertion that n is a null pointer constant: so the conditional expression
+   has type 'int *' instead of 'void *'.
+*/
+#define ASSERT_NPC(n)	(b = *(1 ? a : (n)))
+/* Assertion that n is not a null pointer constant: so the conditional
+   expresions has type 'void *' instead of 'int *'.
+*/
+#define ASSERT_NOT_NPC(n)	(c = (1 ? a : (n)))
+
+void
+foo (void)
+{
+  ASSERT_NPC (0);
+  ASSERT_NPC ((void *)0);
+  ASSERT_NOT_NPC ((void *)(void *)0); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  ASSERT_NOT_NPC ((void *)(char *)0); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  ASSERT_NOT_NPC ((void *)(0, 0)); /* { dg-bogus "incompatible" "bogus null pointer constant" { xfail *-*-* } } */
+  /* This last one is a null pointer constant in C99 only.  */
+  ASSERT_NPC ((void *)(1 ? 0 : (0, 0)));
+}
--- gcc/testsuite/gcc.dg/c99-func-3.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c99-func-3.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,16 @@
+/* Test for C99 __func__: not merging with string literals.  */
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do run { xfail *-*-* } } */
+/* { dg-options "-std=iso9899:1999 -pedantic-errors" } */
+
+extern void abort (void);
+extern void exit (int);
+
+int
+main (void)
+{
+  if ("main" == __func__)
+    abort ();
+  else
+    exit (0);
+}
--- gcc/testsuite/gcc.dg/c99-func-4.c.jj	Wed Aug 23 14:21:27 2000
+++ gcc/testsuite/gcc.dg/c99-func-4.c	Wed Aug 23 14:21:27 2000
@@ -0,0 +1,10 @@
+/* Test for C99 __func__: of type const char [].  */
+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
+/* { dg-do compile } */
+/* { dg-options "-std=iso9899:1999 -pedantic-errors" } */
+
+void
+foo (void)
+{
+  char *p = __func__; /* { dg-error "discards" "__func__ pointer to const" { xfail *-*-* } } */
+}
