2000-10-06  Nathan Sidwell  <nathan@codesourcery.com>

	* pt.c (lookup_template_class): Set current access for enum.
	(tsubst_enum): Set file & line for enum decl.

	* g++.old-deja/g++.pt/enum14.C: New test.

*** gcc/cp/pt.c	2000/10/05 08:31:15	1.469
--- gcc/cp/pt.c	2000/10/06 09:02:18
*************** lookup_template_class (d1, arglist, in_d
*** 3965,3971 ****
        if (TREE_CODE (template_type) == ENUMERAL_TYPE)
  	{
  	  if (!is_partial_instantiation)
! 	    t = start_enum (TYPE_IDENTIFIER (template_type));
  	  else
  	    /* We don't want to call start_enum for this type, since
  	       the values for the enumeration constants may involve
--- 3965,3974 ----
        if (TREE_CODE (template_type) == ENUMERAL_TYPE)
  	{
  	  if (!is_partial_instantiation)
! 	    {
! 	      set_current_access_from_decl (TYPE_NAME (template_type));
! 	      t = start_enum (TYPE_IDENTIFIER (template_type));
! 	    }
  	  else
  	    /* We don't want to call start_enum for this type, since
  	       the values for the enumeration constants may involve
*************** tsubst_enum (tag, newtag, args)
*** 9941,9946 ****
--- 9944,9951 ----
      }
  
    finish_enum (newtag);
+   DECL_SOURCE_LINE (TYPE_NAME (newtag)) = DECL_SOURCE_LINE (TYPE_NAME (tag));
+   DECL_SOURCE_FILE (TYPE_NAME (newtag)) = DECL_SOURCE_FILE (TYPE_NAME (tag));
  }
  
  /* DECL is a FUNCTION_DECL that is a template specialization.  Return
*** gcc/testsuite/g++.old-deja/g++.pt/enum14.C	Thu Aug 24 11:00:32 2000
--- gcc/testsuite/g++.old-deja/g++.pt/enum14.C	Tue Oct 10 18:23:22 2000
***************
*** 0 ****
--- 1,36 ----
+ // Build don't link:
+ // Copyright (C) 2000 Free Software Foundation, Inc.
+ // Contributed by Nathan Sidwell 4 Oct 2000 <nathan@codesourcery.com>
+ // Origin: bug 511 malte.starostik@t-online.de
+ 
+ // Bug 511. We failed to set access correctly for enumeration members of
+ // template classes
+ 
+ template <class>
+ class A
+ {
+   public:
+   enum foo {bar};
+   typedef int baz;
+ };
+ 
+ struct C: public A<int>
+ {
+   void choke (foo);
+   void choke (baz);
+ };
+ 
+ template <class>
+ struct B
+ {
+   private:
+   enum foo {bar}; // ERROR - private
+   typedef int baz;  // ERROR - private
+ };
+ 
+ struct D: public B<int>
+ {
+   void choke (foo);   // ERROR - within this context
+   void choke (baz);   // ERROR - within this context
+ };
+ 
