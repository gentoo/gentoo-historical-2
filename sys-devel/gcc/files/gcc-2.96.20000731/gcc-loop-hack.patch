As I'm not sure whether http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00843.html
is ok, I'm taking the safe way and don't allow any sequences containing
eh notes to be moved out of the loop.

--- gcc/rtlanal.c.jj	Mon Aug 21 18:27:34 2000
+++ gcc/rtlanal.c	Wed Aug 23 16:31:13 2000
@@ -2420,8 +2420,6 @@ insns_safe_to_move_p (from, to, new_to)
      rtx to;
      rtx *new_to;
 {
-  int eh_region_count = 0;
-  int past_to_p = 0;
   rtx r = from;
 
   /* By default, assume the end of the region will be what was
@@ -2436,45 +2434,16 @@ insns_safe_to_move_p (from, to, new_to)
 	  switch (NOTE_LINE_NUMBER (r))
 	    {
 	    case NOTE_INSN_EH_REGION_BEG:
-	      ++eh_region_count;
-	      break;
-
 	    case NOTE_INSN_EH_REGION_END:
-	      if (eh_region_count == 0)
-		/* This sequence of instructions contains the end of
-		   an exception region, but not he beginning.  Moving
-		   it will cause chaos.  */
-		return 0;
-
-	      --eh_region_count;
-	      break;
+	      return 0;
 
 	    default:
 	      break;
 	    }
 	}
-      else if (past_to_p)
-	/* If we've passed TO, and we see a non-note instruction, we
-	   can't extend the sequence to a movable sequence.  */
-	return 0;
 
       if (r == to)
-	{
-	  if (!new_to)
-	    /* It's OK to move the sequence if there were matched sets of
-	       exception region notes.  */
-	    return eh_region_count == 0;
-	  
-	  past_to_p = 1;
-	}
-
-      /* It's OK to move the sequence if there were matched sets of
-	 exception region notes.  */
-      if (past_to_p && eh_region_count == 0)
-	{
-	  *new_to = r;
-	  return 1;
-	}
+	return 1;
 
       /* Go to the next instruction.  */
       r = NEXT_INSN (r);
