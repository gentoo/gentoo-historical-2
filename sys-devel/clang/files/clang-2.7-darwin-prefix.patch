This code looks as if it is written by Apple, lots of assumptions that
only hold for them and their scenario.

--- llvm-2.7/tools/clang/lib/Driver/ToolChains.cpp
+++ llvm-2.7/tools/clang/lib/Driver/ToolChains.cpp
@@ -112,7 +112,7 @@ DarwinGCC::DarwinGCC(const HostInfo &Hos
   GCCVersion[2] = _GCCVersion[2];
 
   // Set up the tool chain paths to match gcc.
-  ToolChainDir = "i686-apple-darwin";
+  ToolChainDir = "@GENTOO_PORTAGE_CHOST@";
   ToolChainDir += llvm::utostr(DarwinVersion[0]);
   ToolChainDir += "/";
   ToolChainDir += llvm::utostr(GCCVersion[0]);
@@ -122,9 +122,9 @@ DarwinGCC::DarwinGCC(const HostInfo &Hos
   ToolChainDir += llvm::utostr(GCCVersion[2]);
 
   // Try the next major version if that tool chain dir is invalid.
-  std::string Tmp = "/usr/lib/gcc/" + ToolChainDir;
+  std::string Tmp = "@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir;
   if (!llvm::sys::Path(Tmp).exists()) {
-    std::string Next = "i686-apple-darwin";
+    std::string Next = "@GENTOO_PORTAGE_CHOST@";
     Next += llvm::utostr(DarwinVersion[0] + 1);
     Next += "/";
     Next += llvm::utostr(GCCVersion[0]);
@@ -136,7 +136,7 @@ DarwinGCC::DarwinGCC(const HostInfo &Hos
     // Use that if it exists, otherwise hope the user isn't linking.
     //
     // FIXME: Drop dependency on gcc's tool chain.
-    Tmp = "/usr/lib/gcc/" + Next;
+    Tmp = "@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + Next;
     if (llvm::sys::Path(Tmp).exists())
       ToolChainDir = Next;
   }
@@ -219,19 +219,19 @@ void DarwinGCC::AddLinkSearchPathArgs(co
                                       ArgStringList &CmdArgs) const {
   // FIXME: Derive these correctly.
   if (getArchName() == "x86_64") {
-    CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir +
+    CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir +
                                          "/x86_64"));
     // Intentionally duplicated for (temporary) gcc bug compatibility.
-    CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir +
+    CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir +
                                          "/x86_64"));
   }
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/" + ToolChainDir));
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir));
+  CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/" + ToolChainDir));
+  CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir));
   // Intentionally duplicated for (temporary) gcc bug compatibility.
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir));
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir +
+  CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir));
+  CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir +
                                        "/../../../" + ToolChainDir));
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + ToolChainDir +
+  CmdArgs.push_back(Args.MakeArgString("-L@GENTOO_PORTAGE_EPREFIX@/usr/lib/gcc/" + ToolChainDir +
                                        "/../../.."));
 }
