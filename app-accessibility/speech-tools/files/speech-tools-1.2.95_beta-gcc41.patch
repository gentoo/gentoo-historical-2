--- speech_tools/include/EST_Chunk.h	2006/06/05 00:32:45	1.1
+++ speech_tools/include/EST_Chunk.h	2006/06/05 01:41:28
@@ -103,6 +103,8 @@
  /*                                                                      */
  /************************************************************************/
 
+class EST_ChunkPtr;
+
 class EST_Chunk  {
   public:
     typedef  unsigned short use_counter;
@@ -152,6 +154,13 @@ class EST_Chunk  {
  /*                                                                      */
  /************************************************************************/
 
+EST_ChunkPtr chunk_allocate(int bytes);
+EST_ChunkPtr chunk_allocate(int bytes, const char *initial, int initial_len);
+EST_ChunkPtr chunk_allocate(int bytes, const EST_ChunkPtr &initial, int initial_start, int initial_len);
+
+void make_updatable(EST_ChunkPtr &shared, EST_Chunk::EST_chunk_size inuse);
+void make_updatable(EST_ChunkPtr &shared);
+
 class EST_ChunkPtr {
   private:
     EST_Chunk *ptr;
--- speech_tools/include/ling_class/EST_Item.h	2006/06/05 00:39:43	1.1
+++ speech_tools/include/ling_class/EST_Item.h	2006/06/05 00:40:02
@@ -79,6 +79,9 @@ use we envisage.  Traversal of the items
 
 */
 
+class EST_Item;
+int same_item(const EST_Item *l1,const EST_Item *l2);
+
 class EST_Item 
 {
   private:
--- ./speech_tools/base_class/EST_Pathname_unix.cc	2006/06/05 00:59:34	1.1
+++ ./speech_tools/base_class/EST_Pathname_unix.cc	2006/06/05 01:19:16
@@ -89,7 +89,7 @@ EST_Pathname EST_Pathname::as_directory(
     return *this;
 
   if (length() > 0)
-    return ::operator +(EST_String(*this), "/");
+    return EST_String(*this) + "/";
   
   return "./";
 }
