Index: libtorrent/src/net/data_buffer.h
===================================================================
--- libtorrent/src/net/data_buffer.h	(revision 1026)
+++ libtorrent/src/net/data_buffer.h	(working copy)
@@ -44,26 +44,28 @@
 
 // Recipient must call clear() when done with the buffer.
 struct DataBuffer {
-  DataBuffer()                        : m_data(NULL), m_end(NULL), m_copied(false) {}
-  DataBuffer(char* data, char* end)   : m_data(data), m_end(end),  m_copied(false) {}
+  DataBuffer()                        : m_data(NULL), m_end(NULL), m_owned(true) {}
+  DataBuffer(char* data, char* end)   : m_data(data), m_end(end),  m_owned(true) {}
 
+  DataBuffer          clone() const        { DataBuffer d = *this; d.m_owned = false; return d; }
+
   char*               data() const         { return m_data; }
   char*               end() const          { return m_end; }
 
-  bool                copied() const       { return m_copied; }
+  bool                owned() const        { return m_owned; }
   bool                empty() const        { return m_data == NULL; }
   size_t              length() const       { return m_end - m_data; }
 
   void                clear();
-  void                set(char* data, char* end, bool copied);
+  void                set(char* data, char* end, bool owned);
 
 private:
   char*               m_data;
   char*               m_end;
 
-  // Used to indicate if buffer held by PCB is copied and needs to be
-  // deleted after transmission.
-  bool                m_copied;
+  // Used to indicate if buffer held by PCB is its own and needs to be
+  // deleted after transmission (false if shared with other connections).
+  bool                m_owned;
 };
 
 inline void
@@ -72,14 +74,14 @@
     delete[] m_data;
 
   m_data = m_end = NULL;
-  m_copied = false;
+  m_owned = false;
 }
 
 inline void
-DataBuffer::set(char* data, char* end, bool copied) {
+DataBuffer::set(char* data, char* end, bool owned) {
   m_data = data;
   m_end = end;
-  m_copied = copied;
+  m_owned = owned;
 }
 
 }
Index: libtorrent/src/protocol/peer_connection_base.cc
===================================================================
--- libtorrent/src/protocol/peer_connection_base.cc	(revision 1026)
+++ libtorrent/src/protocol/peer_connection_base.cc	(working copy)
@@ -92,7 +92,7 @@
   if (m_extensions != NULL && !m_extensions->is_default())
     delete m_extensions;
 
-  if (m_extensionMessage.copied())
+  if (m_extensionMessage.owned())
     m_extensionMessage.clear();
 }
 
@@ -665,7 +665,7 @@
 bool
 PeerConnectionBase::up_extension() {
   if (m_extensionOffset == extension_must_encrypt) {
-    if (m_extensionMessage.copied()) {
+    if (m_extensionMessage.owned()) {
       m_encryption.encrypt(m_extensionMessage.data(), m_extensionMessage.length());
 
     } else {
@@ -690,7 +690,7 @@
 
   // clear() deletes the buffer, only do that if we made a copy,
   // otherwise the buffer is shared among all connections.
-  if (m_extensionMessage.copied())
+  if (m_extensionMessage.owned())
     m_extensionMessage.clear();
   else 
     m_extensionMessage.set(NULL, NULL, false);
Index: libtorrent/src/download/download_main.h
===================================================================
--- libtorrent/src/download/download_main.h	(revision 1026)
+++ libtorrent/src/download/download_main.h	(working copy)
@@ -105,7 +105,7 @@
   ThrottleList*       download_throttle()                        { return m_downloadThrottle; }
   void                set_download_throttle(ThrottleList* t)     { m_downloadThrottle = t; }
 
-  DataBuffer          get_ut_pex(bool initial)                   { return initial ? m_ut_pex_initial : m_ut_pex_delta; }
+  DataBuffer          get_ut_pex(bool initial)                   { return (initial ? m_ut_pex_initial : m_ut_pex_delta).clone(); }
 
   bool                want_pex_msg()                             { return m_info->is_pex_active() && m_peerList.available_list()->want_more(); }; 
 
