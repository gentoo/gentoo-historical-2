--- appframe.rb.old	2004-12-03 22:24:02.000000000 +0100
+++ appframe.rb	2005-02-07 20:19:55.224242776 +0100
@@ -1,6 +1,6 @@
 # Purpose: Setup and initialize the core gui interfaces
 #
-# $Id: freeride-0.9.2-gentoo-appframe.patch,v 1.1 2005/02/07 21:42:00 citizen428 Exp $
+# $Id: freeride-0.9.2-gentoo-appframe.patch,v 1.1 2005/02/07 21:42:00 citizen428 Exp $
 #
 # Authors:  Curt Hibbs <curt@hibbs.com>
 # Contributors:
@@ -37,7 +37,24 @@
         
         component_slot.subscribe do |event, slot|
           if (event == :notify_slot_add && slot.parent == component_slot)
-            Renderer.new(plugin, slot)
+            app = Fox::FXApp.new("FreeRIDE", "FreeRIDE")
+            r = Renderer.new(plugin, slot, app)
+            app.create
+
+            plugin["/system/ui/messagepump"].set_proc do
+              begin
+                app.run
+              rescue
+                exc_box = FreerideExceptionBox.new(r,"#{$!.class}: #{$!.message}\n\n#{$@.join("\n")}")
+                if exc_box.execute == MBOX_CLICKED_YES
+                  plugin['/system/ui/components/EditPane'].each_slot {|ep| ep.manager.save}
+                end
+                # raise the exception again for the text console
+                raise 
+              ensure
+                plugin["/system/shutdown"].call(1)
+              end
+            end
           end
         end
         
@@ -52,14 +69,13 @@
       class Renderer < Fox::FXMainWindow
         include Fox
         attr_reader :plugin
-        def initialize(plugin, slot)
+
+        def initialize(plugin, slot, app)
           @plugin = plugin
           @slot = slot
-
+		  @app = app
           @command = @slot["/system/ui/commands"]
           @plugin.log_info << "AppFrame started"
-          @app = FXApp.new("FreeRIDE", "FreeRIDE")
-          @app.init(ARGV)
 
           # use the FR mini icon for the main window
           mi_path = "#{plugin.plugin_configuration.full_base_path}/icons/bullseye.ico"
@@ -146,24 +162,28 @@
           @plugin["/system/ui/fox/dockbar/south/textAngle"].data = 0
           @plugin.log_info << "Dockbar UI components positioned OK!"
           
-          @app.create
+          #LJ@app.create
           @running = true
           
-          @plugin["/system/ui/messagepump"].set_proc do
-            begin
-              @app.run
-            rescue
-	      exc_box = FreerideExceptionBox.new(self,"#{$!.class}: #{$!.message}\n\n#{$@.join("\n")}")
-	      if exc_box.execute == MBOX_CLICKED_YES
-                @plugin['/system/ui/components/EditPane'].each_slot {|ep| ep.manager.save}
-              end
-              # raise the exception again for the text console
-              raise 
-            ensure
-              @running = false
-              @plugin["/system/shutdown"].call(1)
-            end
-          end
+# BGB - START
+# was:
+#          @plugin["/system/ui/messagepump"].set_proc do
+#            begin
+#              @app.run
+#            rescue
+#	      exc_box = FreerideExceptionBox.new(self,"#{$!.class}: #{$!.message}\n\n#{$@.join("\n")}")
+#	      if exc_box.execute == MBOX_CLICKED_YES
+#                @plugin['/system/ui/components/EditPane'].each_slot {|ep| ep.manager.save}
+#              end
+#              # raise the exception again for the text console
+#              raise 
+#            ensure
+#              @running = false
+#              @plugin["/system/shutdown"].call(1)
+#            end
+#          end
+# now:
+# BGB - END
         end
         
         def shutdown
