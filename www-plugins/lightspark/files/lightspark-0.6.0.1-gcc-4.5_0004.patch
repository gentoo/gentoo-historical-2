From eded7abeb7d70a5d8dd7454c64812c49721a96d6 Mon Sep 17 00:00:00 2001
From: Alessandro Pignotti <a.pignotti@sssup.it>
Date: Sun, 10 Jun 2012 19:55:17 +0200
Subject: [PATCH] Reintroduce NullRef and add comparison operators against it

---
 src/smartrefs.h |   16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/src/smartrefs.h b/src/smartrefs.h
index 09ce760..85b7e06 100644
--- a/src/smartrefs.h
+++ b/src/smartrefs.h
@@ -119,7 +119,11 @@ class Ref
 	return Ref<T>(a);
 }
 
-#define NullRef (nullptr)
+class NullRef_t
+{
+};
+
+extern NullRef_t NullRef;
 
 template<class T>
 class NullableRef
@@ -129,7 +133,7 @@ class NullableRef
 public:
 	NullableRef(): m(NULL) {}
 	explicit NullableRef(T* o):m(o){}
-	NullableRef(std::nullptr_t):m(NULL){}
+	NullableRef(NullRef_t):m(NULL){}
 	NullableRef(const NullableRef& r):m(r.m)
 	{
 		if(m)
@@ -187,6 +191,10 @@ class NullableRef
 	{
 		return m==r;
 	}
+	bool operator==(NullRef_t) const
+	{
+		return m==NULL;
+	}
 	template<class D> bool operator!=(const NullableRef<D>& r) const
 	{
 		return m!=r.getPtr();
@@ -199,6 +207,10 @@ class NullableRef
 	{
 		return m!=r;
 	}
+	bool operator!=(NullRef_t) const
+	{
+		return m!=NULL;
+	}
 	/*explicit*/ operator bool() const
 	{
 		return m != NULL;
-- 
1.7.10

