--- src/board.h.old	2006-09-20 01:58:15.000000000 +0400
+++ src/board.h	2007-01-06 19:51:26.000000000 +0300
@@ -37,6 +37,7 @@
 	void show (int x, int y);
 	void resize(int offsetX, int offsetY, int square_size);
 	void showAll();
+        void setBoardSize(int v);
 
 private:
 	int board_size;
@@ -134,7 +135,7 @@
 	void doCountDone();
 	void numberMoves() { boardHandler->numberMoves(); }
 	void markVariations(bool sons) { boardHandler->markVariations(sons); }
-	void setBoardSize(int s) { board_size = s; }
+	void setBoardSize(int s) { board_size = s; gatter->setBoardSize(s); }
 	int getBoardSize() const { return board_size; }
 #ifndef NO_DEBUG
 	void debug();
--- src/board.cpp.old	2006-10-01 23:23:39.000000000 +0400
+++ src/board.cpp	2007-01-06 22:27:50.000000000 +0300
@@ -1406,7 +1406,7 @@
     CHECK_PTR(d);
 	
     int oldsize = board_size;
-    board_size = d->size;
+    setBoardSize(d->size);
 	
     // Clear up everything
     clearData();
@@ -1667,14 +1667,44 @@
 }
 
  /**
-  * Initialises the gatter intersections and hoshis points
+  * Creates a new Gatter instance
   **/
 Gatter::Gatter(QCanvas *Canvas, int size)
 {
 	int i,j;
 
-	board_size = size;
 	canvas=Canvas;	
+	setBoardSize(size);
+}
+
+ /**
+  * Initialises the gatter intersections and hoshis points
+  **/
+void Gatter::setBoardSize(int v)
+{
+	if (board_size == v)
+		return;
+
+	int i,j;
+
+	// remove old elements
+	if (board_size > 0) {
+		for (i=0; i<board_size; i++) {
+			for (j=0; j<board_size; j++)
+			{
+				delete VGatter[i][j];
+				delete HGatter[i][j];
+			}
+		}
+		VGatter.clear();
+		HGatter.clear();
+		QIntDictIterator<QCanvasEllipse> it( hoshisList );
+		for ( ; it.current(); ++it )
+        		delete it.current();
+		hoshisList.clear();
+	}
+
+	board_size = v;
 
 	VGatter.reserve(board_size);
 	HGatter.reserve(board_size);
@@ -1740,13 +1770,15 @@
 		{
 			HGatter[i][j]->setPoints(int(offsetX + square_size * ( i - 0.5*(i!=0))), 
 						offsetY + square_size * j,
-						int(offsetX + square_size * ( i + 0.5 * (i+1 != board_size))), 
+						int(offsetX + square_size * ( i + 0.5 * (i+1 !=
+						board_size))), 
 						offsetY + square_size * j );
 			
 			VGatter[i][j]->setPoints(offsetX + square_size *  i, 
 						int(offsetY + square_size * ( j - 0.5*(j!=0))),
 						offsetX + square_size *  i, 
-						int(offsetY + square_size * ( j + 0.5 * (j+1 != board_size)))); 
+						int(offsetY + square_size * ( j + 0.5 * (j+1 !=
+						board_size)))); 
 			
 			e=hoshisList.find(board_size*(i+1)+j+1);
 			if (e)
