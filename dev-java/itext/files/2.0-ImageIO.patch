--- ../PdfGraphics2D.java	2007-05-30 12:38:56.000000000 -0400
+++ com/lowagie/text/pdf/PdfGraphics2D.java	2007-05-30 13:07:37.000000000 -0400
@@ -99,6 +99,7 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
+import javax.imageio.ImageIO;
 
 import com.lowagie.text.pdf.internal.PolylineShape;
 
@@ -185,12 +186,6 @@
         super();
         dg2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
         setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
-        try {
-            Class.forName("com.sun.image.codec.jpeg.JPEGCodec");
-        }
-        catch (Throwable t) {
-            convertImagesToJPEG = false;
-        }
         this.convertImagesToJPEG = convertImagesToJPEG;
         this.jpegQuality = quality;
         this.onlyShapes = onlyShapes;
@@ -1354,10 +1349,7 @@
                 g3.dispose();
                 
                 ByteArrayOutputStream baos = new ByteArrayOutputStream();
-                com.sun.image.codec.jpeg.JPEGImageEncoder encoder = com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(baos);
-                com.sun.image.codec.jpeg.JPEGEncodeParam param = com.sun.image.codec.jpeg.JPEGCodec.getDefaultJPEGEncodeParam(scaled);
-                param.setQuality(jpegQuality, true);
-                encoder.encode(scaled, param);
+                ImageIO.write(scaled,"jpg",baos);
                 scaled.flush();
                 scaled = null;
                 image = com.lowagie.text.Image.getInstance(baos.toByteArray());
