diff --git a/com/trolltech/tools/ant/InitializeTask.java b/com/trolltech/tools/ant/InitializeTask.java
index 7872328..14a470c 100755
--- a/com/trolltech/tools/ant/InitializeTask.java
+++ b/com/trolltech/tools/ant/InitializeTask.java
@@ -145,14 +145,14 @@ public class InitializeTask extends Task {
 
     public void execute() throws BuildException {
         props = PropertyHelper.getPropertyHelper(getProject());
-        props.setNewProperty(null, OSNAME, decideOSName());
-        props.setNewProperty(null, LIBSUBDIR, decideLibSubDir());
-        props.setNewProperty(null, QTDIR, decideQtDir());
+        props.setNewProperty((String)null, OSNAME, decideOSName());
+        props.setNewProperty((String)null, LIBSUBDIR, decideLibSubDir());
+        props.setNewProperty((String)null, QTDIR, decideQtDir());
 
         // TODO: Find a better way to get a hold of version...
-        props.setNewProperty(null, VERSION, Version.STRING);
+        props.setNewProperty((String)null, VERSION, Version.STRING);
 
-        props.setNewProperty(null, COMPILER, decideCompiler());
+        props.setNewProperty((String)null, COMPILER, decideCompiler());
 
         checkCompilerDetails();
 
@@ -168,43 +168,43 @@ public class InitializeTask extends Task {
             }
         }
 
-        props.setNewProperty(null, CONFIGURATION, decideConfiguration());
+        props.setNewProperty((String)null, CONFIGURATION, decideConfiguration());
 
         // These depend on both qtdir, libsubdir and configration, so
         // run rather late...
         String phonon = decidePhonon();
         if ("true".equals(phonon)) {
-            props.setNewProperty(null, PHONON, phonon);
+            props.setNewProperty((String)null, PHONON, phonon);
             switch (OSInfo.os()) {
             case Windows:
-                props.setNewProperty(null, PHONON_DS9, "true");
+                props.setNewProperty((String)null, PHONON_DS9, "true");
                 break;
             case Linux:
-                props.setNewProperty(null, PHONON_GSTREAMER, "true");
+                props.setNewProperty((String)null, PHONON_GSTREAMER, "true");
                 if (doesQtLibExist("QtDBus", 4))
-                    props.setNewProperty(null, DBUS, "true");
+                    props.setNewProperty((String)null, DBUS, "true");
                 break;
             case MacOS:
-                props.setNewProperty(null, PHONON_QT7, "true");
+                props.setNewProperty((String)null, PHONON_QT7, "true");
                 if (doesQtLibExist("QtDBus", 4))
-                    props.setNewProperty(null, DBUS, "true");
+                    props.setNewProperty((String)null, DBUS, "true");
                 break;
             }
         }
 
-        props.setNewProperty(null, SQLITE, decideSqlite());
+        props.setNewProperty((String)null, SQLITE, decideSqlite());
 
         String webkit = decideWebkit();
         if ("true".equals(webkit) && "true".equals(phonon))
-            props.setNewProperty(null, WEBKIT, webkit);
+            props.setNewProperty((String)null, WEBKIT, webkit);
 
         String patterns = decideXMLPatterns();
         if ("true".equals(patterns))
-            props.setNewProperty(null, XMLPATTERNS, patterns);
+            props.setNewProperty((String)null, XMLPATTERNS, patterns);
 
         String opengl = decideOpenGL();
         if ("true".equals(opengl))
-            props.setNewProperty(null, OPENGL, opengl);
+            props.setNewProperty((String)null, OPENGL, opengl);
     }
 
     private void checkCompilerDetails() {
@@ -216,7 +216,7 @@ public class InitializeTask extends Task {
                 String vcdir = System.getenv("VSINSTALLDIR");
                 if (vcdir == null)
                     throw new BuildException("missing required environment variable 'VSINSTALLDIR' used to locate MSVC redistributables");
-                props.setNewProperty(null, VSINSTALLDIR, vcdir);
+                props.setNewProperty((String)null, VSINSTALLDIR, vcdir);
 
                 String redistDir;
                 if (compiler == Compiler.MSVC2005_64 || compiler == Compiler.MSVC2008_64)
@@ -225,7 +225,7 @@ public class InitializeTask extends Task {
                     redistDir = vcdir + "/vc/redist/x86";
                 if (!new File(redistDir).exists())
                     throw new BuildException("MSVC redistributables not found in '" + redistDir + "'");
-                props.setNewProperty(null, VSREDISTDIR, redistDir);
+                props.setNewProperty((String)null, VSREDISTDIR, redistDir);
 
                 break;
         }
@@ -365,7 +365,7 @@ public class InitializeTask extends Task {
 
     private boolean doesQtLibExist(String name, int version) {
         StringBuilder path = new StringBuilder();
-        path.append(props.getProperty(null, QTDIR));
+        path.append(props.getProperty((String)null, QTDIR));
         path.append("/");
         path.append(LibraryEntry.formatQtName(name, debug, version));
         return new File(path.toString()).exists();
@@ -373,7 +373,7 @@ public class InitializeTask extends Task {
 
     private boolean doesQtPluginExist(String name, String subdir) {
         StringBuilder path = new StringBuilder();
-        path.append(props.getProperty(null, QTDIR));
+        path.append(props.getProperty((String)null, QTDIR));
         path.append("/plugins/");
         path.append(subdir);
         path.append("/");
diff --git a/com/trolltech/tools/ant/LibraryEntry.java b/com/trolltech/tools/ant/LibraryEntry.java
index 575ef0b..d84d409 100755
--- a/com/trolltech/tools/ant/LibraryEntry.java
+++ b/com/trolltech/tools/ant/LibraryEntry.java
@@ -129,11 +129,11 @@ public class LibraryEntry extends Task {
 
         PropertyHelper h = PropertyHelper.getPropertyHelper(getProject());
 
-        boolean debug = "debug".equals(h.getProperty(null, InitializeTask.CONFIGURATION));
+        boolean debug = "debug".equals(h.getProperty((String)null, InitializeTask.CONFIGURATION));
 
         // Change subdir...
         if (subdir.equals("auto"))
-            subdir = (String) h.getProperty(null, InitializeTask.LIBSUBDIR);
+            subdir = (String) h.getProperty((String)null, InitializeTask.LIBSUBDIR);
 
         // Fix name...
         if (type.equals(TYPE_PLUGIN))       name = formatPluginName(name, debug);
diff --git a/com/trolltech/tools/ant/MakeTask.java b/com/trolltech/tools/ant/MakeTask.java
index 6211cb3..3046107 100755
--- a/com/trolltech/tools/ant/MakeTask.java
+++ b/com/trolltech/tools/ant/MakeTask.java
@@ -60,7 +60,7 @@ public class MakeTask extends Task {
         switch(OSInfo.os()){
         case Windows:
             PropertyHelper props = PropertyHelper.getPropertyHelper(getProject());
-            String compiler = (String) props.getProperty(null, InitializeTask.COMPILER);
+            String compiler = (String) props.getProperty((String)null, InitializeTask.COMPILER);
             if (compiler.equals(InitializeTask.Compiler.MinGW.toString())) {
                 return "mingw32-make";
             }
diff --git a/com/trolltech/tools/ant/PlatformJarTask.java b/com/trolltech/tools/ant/PlatformJarTask.java
index 25fdeb6..9c1f6ac 100755
--- a/com/trolltech/tools/ant/PlatformJarTask.java
+++ b/com/trolltech/tools/ant/PlatformJarTask.java
@@ -107,7 +107,7 @@ public class PlatformJarTask extends Task {
     public void execute_internal() throws BuildException {
         props = PropertyHelper.getPropertyHelper(getProject());
 
-        debugConfiguration = "debug".equals(props.getProperty(null, InitializeTask.CONFIGURATION));
+        debugConfiguration = "debug".equals(props.getProperty((String)null, InitializeTask.CONFIGURATION));
 
         if (outdir == null)
             throw new BuildException("Missing required attribute 'outdir'. This directory is used for building the .jar file...");
@@ -148,7 +148,7 @@ public class PlatformJarTask extends Task {
         }
 
         writer.println("<qtjambi-deploy"
-                       + " system=\"" + props.getProperty(null, InitializeTask.OSNAME).toString()
+                       + " system=\"" + props.getProperty((String)null, InitializeTask.OSNAME).toString()
                        + "\">");
         writer.println("\n  <cache key=\"" + cacheKey + "\" />");
 
@@ -237,7 +237,7 @@ public class PlatformJarTask extends Task {
 
 
     private void processSystemLibs() {
-        String compiler = String.valueOf(props.getProperty(null, InitializeTask.COMPILER));
+        String compiler = String.valueOf(props.getProperty((String)null, InitializeTask.COMPILER));
         InitializeTask.Compiler c = InitializeTask.Compiler.resolve(compiler);
 
         String vcnumber = "80";
@@ -256,7 +256,7 @@ public class PlatformJarTask extends Task {
                 break;
             }
 
-            File crt = new File(props.getProperty(null, InitializeTask.VSREDISTDIR).toString(),
+            File crt = new File(props.getProperty((String)null, InitializeTask.VSREDISTDIR).toString(),
                                 "Microsoft.VC" + vcnumber + ".CRT");
 
             String files[] = new String[] { "Microsoft.VC" + vcnumber + ".CRT.manifest",
@@ -330,7 +330,7 @@ public class PlatformJarTask extends Task {
             throw new BuildException("Runtime library '" + name + "' was not found in library path...");
         }
 
-        String libDir = props.getProperty(null, InitializeTask.LIBSUBDIR).toString();
+        String libDir = props.getProperty((String)null, InitializeTask.LIBSUBDIR).toString();
 
         try {
             Util.copy(rt, new File(outdir, libDir + "/" + name));
