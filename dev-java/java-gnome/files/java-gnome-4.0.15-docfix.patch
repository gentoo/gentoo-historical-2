=== modified file 'src/bindings/org/gnome/gdk/EventMask.java'
--- src/bindings/org/gnome/gdk/EventMask.java	2010-02-03 23:45:54 +0000
+++ src/bindings/org/gnome/gdk/EventMask.java	2010-03-15 23:32:01 +0000
@@ -33,7 +33,6 @@
 package org.gnome.gdk;
 
 import org.freedesktop.bindings.Flag;
-import org.gnome.gtk.Widget;
 
 /**
  * The events a Widget will receive. You can use the Flags defined here to
@@ -41,9 +40,10 @@
  * 
  * <p>
  * While most common events are enabled by default, some of them need to be
- * {@link Widget#addEvents(EventMask) enabled} in order to be received. Such
- * cases are properly documented together with each event signal, so unless
- * specified there you usually do not need to worry about this at all.
+ * {@link org.gnome.gtk.Widget#addEvents(EventMask) enabled} in order to be
+ * received. Such cases are properly documented together with each event
+ * signal, so unless specified there you usually do not need to worry about
+ * this at all.
  * 
  * @author Vreixo Formoso
  * @since 4.0.15
@@ -63,13 +63,14 @@
     }
 
     /**
-     * Enable/disable {@link Widget.ExposeEvent Expose} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.ExposeEvent Widget.Expose}
+     * events.
      */
     public static final EventMask EXPOSURE = new EventMask(GdkEventMask.EXPOSURE_MASK, "EXPOSURE");
 
     /**
-     * Enable/disable all {@link Widget.MotionNotifyEvent MotionNotify}
-     * events.
+     * Enable/disable all {@link org.gnome.gtk.Widget.MotionNotifyEvent
+     * Widget.MotionNotify} events.
      */
     public static final EventMask POINTER_MOTION = new EventMask(GdkEventMask.POINTER_MOTION_MASK,
             "POINTER_MOTION");
@@ -81,85 +82,92 @@
             "POINTER_MOTION_HINT");
 
     /**
-     * Enable/disable {@link Widget.MotionNotifyEvent MotionNotify} events
-     * when any mouse button is pressed.
+     * Enable/disable {@link org.gnome.gtk.Widget.MotionNotifyEvent
+     * Widget.MotionNotify} events when any mouse button is pressed.
      */
     public static final EventMask BUTTON_MOTION = new EventMask(GdkEventMask.BUTTON_MOTION_MASK,
             "BUTTON_MOTION");
 
     /**
-     * Enable/disable {@link Widget.MotionNotifyEvent MotionNotify} events
-     * when the left button is pressed.
+     * Enable/disable {@link org.gnome.gtk.Widget.MotionNotifyEvent
+     * Widget.MotionNotifyEvent} events when the left button is pressed.
      */
     public static final EventMask LEFT_BUTTON_MOTION = new EventMask(GdkEventMask.BUTTON1_MOTION_MASK,
             "LEFT_BUTTON_MOTION");
 
     /**
-     * Enable/disable {@link Widget.MotionNotifyEvent MotionNotify} events
-     * when the middle button is pressed.
+     * Enable/disable {@link org.gnome.gtk.Widget.MotionNotifyEvent
+     * Widget.MotionNotifyEvent} when the middle button is pressed.
      */
     public static final EventMask MIDDLE_BUTTON_MOTION = new EventMask(GdkEventMask.BUTTON2_MOTION_MASK,
             "MIDDLE_BUTTON_MOTION");
 
     /**
-     * Enable/disable {@link Widget.MotionNotifyEvent MotionNotify} events
-     * when the right button is pressed.
+     * Enable/disable {@link org.gnome.gtk.Widget.MotionNotifyEvent
+     * Widget.MotionNotifyEvent} when the right button is pressed.
      */
     public static final EventMask RIGHT_BUTTON_MOTION = new EventMask(GdkEventMask.BUTTON3_MOTION_MASK,
             "RIGHT_BUTTON_MOTION");
 
     /**
-     * Enable/disable {@link Widget.ButtonPressEvent ButtonPress} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.ButtonPressEvent
+     * Widget.ButtonPressEvent} events.
      */
     public static final EventMask BUTTON_PRESS = new EventMask(GdkEventMask.BUTTON_PRESS_MASK,
             "BUTTON_PRESS");
 
     /**
-     * Enable/disable {@link Widget.ButtonReleaseEvent ButtonRelease} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.ButtonReleaseEvent
+     * Widget.ButtonReleaseEvent} events.
      */
     public static final EventMask BUTTON_RELEASE = new EventMask(GdkEventMask.BUTTON_RELEASE_MASK,
             "BUTTON_RELEASE");
 
     /**
-     * Enable/disable {@link Widget.KeyPressEvent KeyPress} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.KeyPressEvent
+     * Widget.KeyPressEvent} events.
      */
     public static final EventMask KEY_PRESS = new EventMask(GdkEventMask.KEY_PRESS_MASK, "KEY_PRESS");
 
     /**
-     * Enable/disable {@link Widget.KeyReleaseEvent KeyRelease} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.KeyReleaseEvent
+     * Widget.KeyReleaseEvent} events.
      */
     public static final EventMask KEY_RELEASE = new EventMask(GdkEventMask.KEY_RELEASE_MASK,
             "KEY_RELEASE");
 
     /**
-     * Enable/disable {@link Widget.EnterNotifyEvent EnterNotify} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.EnterNotifyEvent
+     * Widget.EnterNotifyEvent} events.
      */
     public static final EventMask ENTER_NOTIFY = new EventMask(GdkEventMask.ENTER_NOTIFY_MASK,
             "ENTER_NOTIFY");
 
     /**
-     * Enable/disable {@link Widget.LeaveNotifyEvent LeaveNotify} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.LeaveNotifyEvent
+     * Widget.LeaveNotifyEvent} events.
      */
     public static final EventMask LEAVE_NOTIFY = new EventMask(GdkEventMask.LEAVE_NOTIFY_MASK,
             "LEAVE_NOTIFY");
 
     /**
      * Enable/disable focus related events, such as
-     * {@link Widget.FocusInEvent FocusIn} and {@link Widget.FocusOutEvent
-     * FocusOut}.
+     * {@link org.gnome.gtk.Widget.FocusInEvent Widget.FocusInEvent} and
+     * {@link org.gnome.gtk.Widget.FocusOutEvent Widget.FocusOutEvent}.
      */
     public static final EventMask FOCUS_CHANGE = new EventMask(GdkEventMask.FOCUS_CHANGE_MASK,
             "FOCUS_CHANGE");
 
     /**
-     * Enable/disable {@link Widget.VisibilityNotifyEvent VisibilityNotify}
-     * events.
+     * Enable/disable {@link org.gnome.gtk.Widget.VisibilityNotifyEvent
+     * Widget.VisibilityNotifyEvent} events.
      */
     public static final EventMask VISIBILITY_NOTIFY = new EventMask(GdkEventMask.VISIBILITY_NOTIFY_MASK,
             "VISIBILITY_NOTIFY");
 
     /**
-     * Enable/disable {@link Widget.ScrollEvent Scroll} events.
+     * Enable/disable {@link org.gnome.gtk.Widget.ScrollEvent
+     * Widget.ScrollEvent} events.
      */
     public static final EventMask SCROLL = new EventMask(GdkEventMask.SCROLL_MASK, "SCROLL");
 

=== modified file 'src/bindings/org/gnome/gtk/RadioAction.java'
--- src/bindings/org/gnome/gtk/RadioAction.java	2010-02-18 21:22:43 +0000
+++ src/bindings/org/gnome/gtk/RadioAction.java	2010-03-15 23:32:29 +0000
@@ -65,10 +65,6 @@
      *            localized.
      * @param stock
      *            The stock icon to display in proxy Widgets.
-     * @param handler
-     *            A handler to connect to the <code>RadioAction.Toggled</code>
-     *            signal. Typically this will be used to actually start the
-     *            operation related to this RadioAction.
      * @since 4.0.15
      */
     /*

=== modified file 'src/bindings/org/gnome/gtk/Widget.java'
--- src/bindings/org/gnome/gtk/Widget.java	2010-02-03 23:45:54 +0000
+++ src/bindings/org/gnome/gtk/Widget.java	2010-03-15 23:32:29 +0000
@@ -670,7 +670,7 @@
      * 
      * <p>
      * Note that by default this event is disabled, even if you connect to it.
-     * You will need to {@link Widget#enableEvents(EventMask) enable} it. If
+     * You will need to {@link Widget#addEvents(EventMask) enable} it. If
      * you want to receive all mouse motion events, you will need to supply
      * the POINTER_MOTION mask. Note that it generates a big amount of events,
      * typically tens of events per second, when the user moves the mouse over

=== modified file 'tests/screenshots/org/gnome/gtk/SnapshotAboutDialog.java'
--- tests/screenshots/org/gnome/gtk/SnapshotAboutDialog.java	2010-01-06 04:18:57 +0000
+++ tests/screenshots/org/gnome/gtk/SnapshotAboutDialog.java	2010-03-15 23:32:29 +0000
@@ -34,7 +34,7 @@
         dialog.setProgramName("java-gnome");
         dialog.setVersion(Version.getVersion());
         dialog.setComments("The library allowing you to write outstanding GNOME applications with the GTK widget toolkit, from Java!");
-        dialog.setCopyright("Copyright \u00A9 2006-2009 Operational Dynamics Consulting Pty Ltd, and Others");
+        dialog.setCopyright("Copyright \u00A9 2006-2010 Operational Dynamics Consulting Pty Ltd, and Others");
         dialog.setAuthors(new String[] {
                 "Andrew Cowie <andrew@operationaldynamics.com>",
                 "Srichand Pendyala <srichand.pendyala@gmail.com>",

