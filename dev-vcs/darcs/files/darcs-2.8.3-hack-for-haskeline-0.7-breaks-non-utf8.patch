CAUTION: The patch is very incomplete!
It will not work if your locale is not UTF-8.
diff --git a/src/ByteStringUtils.hs b/src/ByteStringUtils.hs
index 6394fea..6999312 100644
--- a/src/ByteStringUtils.hs
+++ b/src/ByteStringUtils.hs
@@ -71,7 +71,10 @@ import Control.Exception.Extensible ( catch, SomeException )
 import System.IO
 import System.IO.Unsafe         ( unsafePerformIO )
 import System.Console.Haskeline ( InputT, runInputTBehavior, defaultSettings, useFileHandle )
+
+#if ! MIN_VERSION_haskeline(0,7,0)
 import System.Console.Haskeline.Encoding ( decode, encode )
+#endif
 
 import Foreign.Storable         ( peekElemOff, peek )
 import Foreign.Marshal.Array    ( advancePtr )
@@ -526,6 +529,7 @@ unsafeRunInput = unsafePerformIO . runInputTBehavior (useFileHandle stdin) defau
 isAscii :: B.ByteString -> Bool
 isAscii = B.all (\w -> w < 128)
 
+#if ! MIN_VERSION_haskeline(0,7,0)
 -- | Decode a ByteString to a String according to the current locale
 -- unsafePerformIO in the locale function is ratified by the fact that GHC 6.12
 -- and above also supply locale conversion with functions with a pure type.
@@ -533,19 +537,30 @@ isAscii = B.all (\w -> w < 128)
 decodeLocale :: B.ByteString -> String
 decodeLocale = unsafeRunInput . decode
 
+-- | Encode a String to a ByteString according to the current locale
+encodeLocale :: String -> B.ByteString
+encodeLocale = unsafeRunInput . encode
+#else
+
+-- | Yes! I cheat here a lot and just assume you have UTF-8 locale.
+-- | haskeline-0.7 dropped encoding export.
+-- | All the blame should be directed to Sergei Trofimovich <slyfox@gentoo.org>
+
+decodeLocale :: B.ByteString -> String
+decodeLocale = unpackPSFromUTF8
+
+encodeLocale :: String -> B.ByteString
+encodeLocale = packStringToUTF8
+#endif
+
+
 -- | Encode a String to a ByteString with latin1 (i.e., the values of the
 -- characters become the values of the bytes; if a character value is greater
 -- than 255, its byte becomes the character value modulo 256)
 encodeLatin1 :: String -> B.ByteString
 encodeLatin1 = B.pack . (map (fromIntegral . ord))
 
--- | Encode a String to a ByteString according to the current locale
-encodeLocale :: String -> B.ByteString
-encodeLocale = unsafeRunInput . encode
-
 -- | Take a @String@ that represents byte values and re-decode it acording to
 -- the current locale.
 decodeString :: String -> String
 decodeString = decodeLocale . encodeLatin1
-
-
