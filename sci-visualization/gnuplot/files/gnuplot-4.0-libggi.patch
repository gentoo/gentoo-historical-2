--- gnuplot-4.0.0/term/ggi.trm.orig	2006-03-24 16:25:59.000000000 +0900
+++ gnuplot-4.0.0/term/ggi.trm	2006-03-24 16:29:09.000000000 +0900
@@ -116,9 +116,8 @@
 } GGI_vertex_t;
 
 TERM_PUBLIC long int GGI_SetTime(const struct timeval* current);
-TERM_PUBLIC int GGI_from_keysym __PROTO((uint32 keysym));
-TERM_PUBLIC int GGI_from_button __PROTO((uint32 button));
-TERM_PUBLIC int GGI_y __PROTO((sint32 y));
+TERM_PUBLIC int GGI_from_keysym __PROTO((uint32_t keysym));
+TERM_PUBLIC int GGI_from_button __PROTO((uint32_t button));
 TERM_PUBLIC int GGI_dispatch_event __PROTO((const ggi_event* event));
 TERM_PUBLIC int GGI_eventually_update_modifiers __PROTO((const ggi_event* event, const int add));
 TERM_PUBLIC int GGI_waitforinput __PROTO((void));
@@ -134,13 +133,13 @@
 TERM_PUBLIC void GGI_save_puts __PROTO((GGI_vertex_t* v, const int tag));
 TERM_PUBLIC void GGI_set_vertex __PROTO((GGI_vertex_t* v, const int x, const int y, const char* str, const int tag));
 TERM_PUBLIC void GGI_abort_zooming __PROTO((void));
-TERM_PUBLIC void GGI_put_tmptext __PROTO((int, const char str[]));
-TERM_PUBLIC void GGI_relative __PROTO((int r[2]));
+TERM_PUBLIC void GGI_put_tmptext __PROTO((int, const char *str));
+TERM_PUBLIC void GGI_relative __PROTO((int *r));
 TERM_PUBLIC void GGI_clear_hline __PROTO((int x1, int x2, int y));
 TERM_PUBLIC void GGI_clear_vline __PROTO((int y1, int y2, int x));
 TERM_PUBLIC void GGI_draw_hline __PROTO((int x1, int x2, int y));
 TERM_PUBLIC void GGI_draw_vline __PROTO((int y1, int y2, int x));
-TERM_PUBLIC void GGI_set_clipboard __PROTO((const char[]));
+TERM_PUBLIC void GGI_set_clipboard __PROTO((const char*));
 #endif /* USE_MOUSE */
 
 #ifdef PM3D
@@ -488,8 +487,7 @@
     setvbuf(stdin, (char*)0, _IONBF, 0);
 }
 
-TERM_PUBLIC void GGI_linetype(linetype)
-    int linetype;
+TERM_PUBLIC void GGI_linetype(int linetype)
 {
     if(linetype==-2) ggiSetGCForeground(GGIvisual,GGIborderColor);
     if(linetype==-1) ggiSetGCForeground(GGIvisual,GGIaxisColor);
@@ -498,11 +496,10 @@
     ggiSetGCForeground(GGIvisual,GGIcolors[linetype]);
 }
 
-TERM_PUBLIC void GGI_move(x,y)
-    unsigned int x,y;
+TERM_PUBLIC void GGI_move(unsigned int x, unsigned int y)
 {
     GGIx=x;
-    GGIy=GGI_y(y);
+    GGIy=GGIymax - y;
 }
 
 TERM_PUBLIC void
@@ -588,14 +585,12 @@
 #endif
 }
 
-TERM_PUBLIC void GGI_put_text(x,y,str)
-    unsigned int x,y;
-    const char *str;
+TERM_PUBLIC void GGI_put_text(unsigned int x, unsigned int y, const char *str)
 {
     ggi_pixel current_foreground;
     ggiGetGCForeground(GGIvisual,&current_foreground);
     ggiSetGCForeground(GGIvisual,GGIborderColor);
-    ggiPuts(GGIvisual,x,GGI_y(y) - 4 /* ? (joze ? */,str);
+    ggiPuts(GGIvisual,x,GGIymax - y - 4 /* ? (joze ? */,str);
     ggiSetGCForeground(GGIvisual,current_foreground);
 }
 
@@ -613,9 +608,7 @@
 }
 
 TERM_PUBLIC void
-GGI_fillbox(style, x, y, w, h)
-int style;
-unsigned int x, y, w, h;
+GGI_fillbox(int style, unsigned int x, unsigned int y, unsigned int w, unsigned int h)
 {
     /* when is this called ? */
     /* ULIG: the style parameter is now used for the fillboxes style
@@ -644,10 +637,9 @@
 #endif
 }
 
-TERM_PUBLIC void GGI_vector(x,y)
-    unsigned int x,y;
+TERM_PUBLIC void GGI_vector(unsigned int x, unsigned int y)
 {
-    y = GGI_y(y);
+    y = GGIymax - y;
     ggiDrawLine(GGIvisual,GGIx,GGIy,x,y);
     GGIx=x;
     GGIy=y;
@@ -657,8 +649,7 @@
 
 /* tranlate ggi keysym to gnuplot keysym */
 TERM_PUBLIC int
-GGI_from_keysym(keysym)
-    uint32 keysym;
+GGI_from_keysym(uint32_t keysym)
 {
     switch (keysym) {
 	case GIIUC_BackSpace:
@@ -812,8 +803,7 @@
 }
 
 TERM_PUBLIC long int
-GGI_SetTime(current)
-    const struct timeval* current;
+GGI_SetTime(const struct timeval* current)
 {
     /* --> dsec in musec */
     int dsec = (current->tv_sec - GGI_timestamp.tv_sec) * 1000000;
@@ -824,8 +814,7 @@
 }
 
 TERM_PUBLIC int
-GGI_from_button(button)
-    uint32 button;
+GGI_from_button(uint32_t button)
 {
     switch (button) {
 	case GII_PBUTTON_LEFT:
@@ -841,16 +830,7 @@
 }
 
 TERM_PUBLIC int
-GGI_y(y)
-    sint32 y;
-{
-    return GGIymax - y;
-}
-
-TERM_PUBLIC int
-GGI_eventually_update_modifiers(event, add)
-    const ggi_event* event;
-    const int add;
+GGI_eventually_update_modifiers(const ggi_event* event, const int add)
 {
     int mod = 0;
     int old_modifiers = GGI_modifiers;
@@ -882,7 +862,7 @@
 
 	gp_ev.type = GE_modifier;
 	gp_ev.mx   = GGI_mouse_x;
-	gp_ev.my   = GGI_y(GGI_mouse_y);
+	gp_ev.my   = GGIymax - GGI_mouse_y;
 	gp_ev.par1 = 0;
 	gp_ev.par2 = 0;
 	gp_ev.par1 = GGI_modifiers;
@@ -894,14 +874,13 @@
 }
 
 TERM_PUBLIC int
-GGI_dispatch_event(event)
-    const ggi_event* event;
+GGI_dispatch_event(const ggi_event* event)
 {
     struct gp_event_t gp_ev;
 
     gp_ev.type = 0;
     gp_ev.mx   = GGI_mouse_x;
-    gp_ev.my   = GGI_y(GGI_mouse_y);
+    gp_ev.my   = GGIymax - GGI_mouse_y;
     gp_ev.par1 = 0;
     gp_ev.par2 = 0;
 
@@ -1037,9 +1016,7 @@
 }
 
 TERM_PUBLIC void
-GGI_clear(v, tag)
-    const GGI_vertex_t* v;
-    const int tag;
+GGI_clear(const GGI_vertex_t* v, const int tag)
 {
     if (tag && v->width) {
 	/* turn off current */
@@ -1049,9 +1026,7 @@
 }
 
 TERM_PUBLIC void
-GGI_save_puts(v, tag)
-    GGI_vertex_t* v;
-    const int tag;
+GGI_save_puts(GGI_vertex_t* v, const int tag)
 {
     GGI_clear(v, tag);
 
@@ -1067,12 +1042,7 @@
 }
 
 TERM_PUBLIC void
-GGI_set_vertex(v, x, y, str, tag)
-    GGI_vertex_t* v;
-    const int x;
-    const int y;
-    const char* str;
-    const int tag;
+GGI_set_vertex(GGI_vertex_t* v, const int x, const int y, const char* str, const int tag)
 {
     GGI_clear(v, tag);
 
@@ -1091,8 +1061,7 @@
 }
 
 TERM_PUBLIC void
-GGI_relative(r)
-    int r[2];
+GGI_relative(int *r)
 {
     int diff = r[1] - r[0];
     if (diff < 0) {
@@ -1104,10 +1073,7 @@
 }
 
 TERM_PUBLIC void
-GGI_clear_hline(x1, x2, y)
-    int x1;
-    int x2;
-    int y;
+GGI_clear_hline(int x1, int x2, int y)
 {
     if (GGI_saved_canvas && x1 >= 0 && x2 >= 0 && y >= 0) {
 	int r[2];
@@ -1122,10 +1088,7 @@
 }
 
 TERM_PUBLIC void
-GGI_clear_vline(y1, y2, x)
-    int y1;
-    int y2;
-    int x;
+GGI_clear_vline(int y1, int y2, int x)
 {
     if (GGI_saved_canvas && y1 >= 0 && y2 >= 0 && x >= 0) {
 	int r[2];
@@ -1140,10 +1103,7 @@
 }
 
 TERM_PUBLIC void
-GGI_draw_hline(x1, x2, y)
-    int x1;
-    int x2;
-    int y;
+GGI_draw_hline(int x1, int x2, int y)
 {
     if (x1 >= 0 && x2 >= 0 && y >= 0) {
 	int r[2];
@@ -1157,10 +1117,7 @@
 }
 
 TERM_PUBLIC void
-GGI_draw_vline(y1, y2, x)
-    int y1;
-    int y2;
-    int x;
+GGI_draw_vline(int y1, int y2, int x)
 {
     if (y1 >= 0 && y2 >= 0 && x >= 0) {
 	int r[2];
@@ -1308,9 +1265,7 @@
 }
 
 TERM_PUBLIC void
-GGI_put_tmptext(i, str)
-    int i;
-    const char str[];
+GGI_put_tmptext(int i, const char *str)
 {
     char* second;
 
@@ -1364,8 +1319,7 @@
 }
 
 TERM_PUBLIC void
-GGI_set_ruler(x, y)
-    int x, y;
+GGI_set_ruler(int x, int y)
 {
     if (x < 0) {
 
@@ -1377,14 +1331,13 @@
 
     } else {
 	GGI_ruler.x = x;
-	GGI_ruler.y = GGI_y(y);
+	GGI_ruler.y = GGIymax - y;
     }
     GGI_needs_update++;
 }
 
 TERM_PUBLIC void
-GGI_set_cursor(c, x, y)
-    int c, x, y;
+GGI_set_cursor(int c, int x, int y)
 {
     /* TODO */
     switch (c) {
@@ -1402,8 +1355,7 @@
 }
 
 TERM_PUBLIC void
-GGI_set_clipboard(s)
-    const char s[];
+GGI_set_clipboard(const char *s)
 {
     /* XXX: not implemented */
 }
@@ -1411,8 +1363,7 @@
 
 #ifdef PM3D
 TERM_PUBLIC int
-GGI_make_palette(palette)
-    t_sm_palette *palette;
+GGI_make_palette(t_sm_palette *palette)
 {
     /* reallocate only, if it has changed */
     if (palette && (GGI_save_pal.colorFormulae < 0
@@ -1454,8 +1405,7 @@
 }
 
 TERM_PUBLIC void
-GGI_set_color(gray)
-    double gray;
+GGI_set_color(double gray)
 {
     if (GGIvisual) {
 	int idx = (gray <= 0) ? 0 : (int)(gray * ggi_pm3d_colors);
@@ -1470,9 +1420,7 @@
 
 #ifdef ENABLE_XMI
 TERM_PUBLIC void
-GGI_filled_polygon(points, corners)
-    int points;
-    gpiPoint *corners;
+GGI_filled_polygon(int points, gpiPoint *corners)
 {
     static miPoint offset = {0, 0};
     if (GGI_miPaintedSet) {
@@ -1485,7 +1433,7 @@
 	}
 	for (i = 0; i < MI_POINTS; i++) {
 	    mi_corners[i].x = corners[i].x;
-	    mi_corners[i].y = GGI_y(corners[i].y);
+	    mi_corners[i].y = GGIymax - corners[i].y;
 	}
 	miFillPolygon(GGIvisual, GGI_miPaintedSet, GGI_miGC,
 	    MI_SHAPE_GENERAL, MI_COORD_MODE_ORIGIN, MI_POINTS, mi_corners);
