diff -Naur ParaView-3.4.0/Applications/Client/CMakeLists.txt ParaView-3.4.0.new/Applications/Client/CMakeLists.txt
--- ParaView-3.4.0/Applications/Client/CMakeLists.txt	2008-09-09 14:48:15.000000000 -0400
+++ ParaView-3.4.0.new/Applications/Client/CMakeLists.txt	2009-07-14 10:19:28.000000000 -0400
@@ -538,34 +538,34 @@
   ENDIF(FFMPEG_${fmpglib}_LIBRARY)
 ENDFOREACH(fmpglib)
 
-SET (QTLIBLIST QTCORE QTGUI QTNETWORK QTXML QTTEST QTSQL)
+#SET (QTLIBLIST QTCORE QTGUI QTNETWORK QTXML QTTEST QTSQL)
 # the variable and library names are not the same
-IF (WIN32)
-  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANTCLIENT)
-ELSE (WIN32)
-  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANT)
-ENDIF (WIN32)
+#IF (WIN32)
+#  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANTCLIENT)
+#ELSE (WIN32)
+#  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANT)
+#ENDIF (WIN32)
 
-IF(NOT Q_WS_MAC)
-  FOREACH(qtlib ${QTLIBLIST})
-    IF (NOT WIN32)
+#IF(NOT Q_WS_MAC)
+#  FOREACH(qtlib ${QTLIBLIST})
+#    IF (NOT WIN32)
       #INSTALL(FILES ${QT_${qtlib}_LIBRARY_RELEASE} DESTINATION ${PV_INSTALL_LIB_DIR_CM24})
-      GET_FILENAME_COMPONENT(QT_LIB_DIR_tmp ${QT_${qtlib}_LIBRARY_RELEASE} PATH)
-      GET_FILENAME_COMPONENT(QT_LIB_NAME_tmp ${QT_${qtlib}_LIBRARY_RELEASE} NAME)
-      FILE(GLOB QT_LIB_LIST RELATIVE ${QT_LIB_DIR_tmp} "${QT_${qtlib}_LIBRARY_RELEASE}*")
-      INSTALL(CODE "
-MESSAGE(STATUS \"Installing \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24}/${QT_LIB_NAME_tmp}\")
-EXECUTE_PROCESS (WORKING_DIRECTORY ${QT_LIB_DIR_tmp}
-                 COMMAND tar c ${QT_LIB_LIST}
-                 COMMAND tar -xC \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24})
-        " COMPONENT Runtime)
-    ELSE (NOT WIN32)
-      GET_FILENAME_COMPONENT(QT_DLL_PATH_tmp ${QT_QMAKE_EXECUTABLE} PATH)
-      INSTALL(FILES ${QT_DLL_PATH_tmp}/${qtlib}4.dll DESTINATION ${PV_INSTALL_BIN_DIR_CM24} COMPONENT Runtime)
-    ENDIF (NOT WIN32)
+      #      GET_FILENAME_COMPONENT(QT_LIB_DIR_tmp ${QT_${qtlib}_LIBRARY_RELEASE} PATH)
+      #      GET_FILENAME_COMPONENT(QT_LIB_NAME_tmp ${QT_${qtlib}_LIBRARY_RELEASE} NAME)
+      #FILE(GLOB QT_LIB_LIST RELATIVE ${QT_LIB_DIR_tmp} "${QT_${qtlib}_LIBRARY_RELEASE}*")
+      #      INSTALL(CODE "
+      #MESSAGE(STATUS \"Installing \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24}/${QT_LIB_NAME_tmp}\")
+      #EXECUTE_PROCESS (WORKING_DIRECTORY ${QT_LIB_DIR_tmp}
+      #           COMMAND tar c ${QT_LIB_LIST}
+      #           COMMAND tar -xC \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24})
+      #  " COMPONENT Runtime)
+      # ELSE (NOT WIN32)
+      #   GET_FILENAME_COMPONENT(QT_DLL_PATH_tmp ${QT_QMAKE_EXECUTABLE} PATH)
+      #     INSTALL(FILES ${QT_DLL_PATH_tmp}/${qtlib}4.dll DESTINATION ${PV_INSTALL_BIN_DIR_CM24} COMPONENT Runtime)
+      #  ENDIF (NOT WIN32)
     
-  ENDFOREACH(qtlib)
-ENDIF(NOT Q_WS_MAC)
+      #  ENDFOREACH(qtlib)
+      #ENDIF(NOT Q_WS_MAC)
 
 # Hard-coded install rules for anything left to install. These should
 # probably go to a local cmake file. Change to match the build system's
diff -Naur ParaView-3.4.0/Applications/Client/CMakeLists.txt.orig ParaView-3.4.0.new/Applications/Client/CMakeLists.txt.orig
--- ParaView-3.4.0/Applications/Client/CMakeLists.txt.orig	1969-12-31 19:00:00.000000000 -0500
+++ ParaView-3.4.0.new/Applications/Client/CMakeLists.txt.orig	2008-09-09 14:48:15.000000000 -0400
@@ -0,0 +1,604 @@
+PROJECT(pqClient)
+
+MACRO(GET_IMAGE_THRESHOLD_ARG variable testname)
+# Macro used to obtain the command argument to set the image threshold.
+  SET (${variable})
+  IF (${testname}_THRESHOLD)
+    SET (${variable} --image-threshold=${${testname}_THRESHOLD})
+  ENDIF (${testname}_THRESHOLD)
+ENDMACRO(GET_IMAGE_THRESHOLD_ARG)
+
+MACRO(GET_REVERSE_CONNECT_ARG variable testname)
+# Macro used to obtain when this test must use reverse connection
+  SET (${variable})
+  IF (${testname}_REVERSE_CONNECT)
+    SET (${variable} --test-rc)
+  ENDIF (${testname}_REVERSE_CONNECT)
+ENDMACRO(GET_REVERSE_CONNECT_ARG)
+
+SET(QT_USE_QTASSISTANT TRUE)
+SET(QT_USE_QTNETWORK TRUE) # QtAssistant depends on it (only for linking)
+SET(QT_USE_QTUITOOLS TRUE)
+INCLUDE(${QT_USE_FILE})
+
+IF(VTK_USE_MPI)
+  INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
+ENDIF(VTK_USE_MPI)
+
+INCLUDE_DIRECTORIES(
+  ${pqClient_SOURCE_DIR}
+  ${pqClient_BINARY_DIR}
+)
+
+# Reduce the number of dirs that get included on moc command line
+# since it causes issues on Windows 2000.
+GET_DIRECTORY_PROPERTY(include_dirs_tmp INCLUDE_DIRECTORIES)
+SET_DIRECTORY_PROPERTIES(PROPERTIES INCLUDE_DIRECTORIES "${MOC_INCLUDE_DIRS}")
+
+QT4_WRAP_CPP(MOC_BUILT_SOURCES
+  AboutDialog.h
+  MainWindow.h
+)
+
+SET_DIRECTORY_PROPERTIES(PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_tmp}")
+
+SET(UI_FORMS
+  AboutDialog.ui
+  MainWindow.ui
+)
+
+QT4_WRAP_UI(UI_BUILT_SOURCES
+  ${UI_FORMS}
+)
+
+SET(UI_RESOURCES
+  Resources.qrc
+)
+
+QT4_ADD_RESOURCES(RCS_SOURCES
+  ${UI_RESOURCES}
+)
+
+IF(WIN32)
+  SET(EXE_ICON pqClient.rc)
+ENDIF(WIN32)
+
+SOURCE_GROUP("Resources" FILES
+  ${UI_RESOURCES}
+  ${UI_FORMS}
+  ${EXE_ICON}
+)
+
+SOURCE_GROUP("Generated" FILES
+  ${MOC_BUILT_SOURCES}
+  ${RCS_SOURCES}
+  ${UI_BUILT_SOURCES}
+)
+
+IF(WIN32)
+  LINK_DIRECTORIES(${QT_LIBRARY_DIR})
+ENDIF(WIN32)
+
+IF(Q_WS_MAC)
+  SET(apple_bundle_sources "MacIcon.icns")
+  SET_SOURCE_FILES_PROPERTIES(
+    "MacIcon.icns"
+    PROPERTIES
+    MACOSX_PACKAGE_LOCATION Resources
+    )
+  SET(MACOSX_BUNDLE_ICON_FILE MacIcon.icns)
+  SET(MAKE_BUNDLE MACOSX_BUNDLE)
+ENDIF(Q_WS_MAC)
+
+# Add main server executables.
+IF(NOT Q_WS_MAC)
+  SET(PV_EXE_LIST paraview)
+ENDIF(NOT Q_WS_MAC)
+# Add Qt assistant to the list of shared lib. forwarded executables.
+# If this is enabled, the build system will create an executable
+# call assistant. This executable will set the appropriate ld library
+# path and execute assistant-real. It is the installation's requirement
+# to install assistant-real
+SET(PV_EXE_LIST ${PV_EXE_LIST} assistant)
+
+SET(MACOSX_BUNDLE_BUNDLE_NAME "ParaView")
+IF(NOT Q_WS_MAC)
+  SET(PV_EXE_NAME paraview${PV_EXE_SUFFIX})
+ELSE(NOT Q_WS_MAC)
+  SET(PV_EXE_NAME paraview)
+ENDIF(NOT Q_WS_MAC)
+
+ADD_EXECUTABLE(${PV_EXE_NAME} WIN32 ${MAKE_BUNDLE}  
+  AboutDialog.cxx
+  AboutDialog.h
+  MainWindow.cxx
+  MainWindow.h
+  main.cxx
+  ProcessModuleGUIHelper.cxx
+  ProcessModuleGUIHelper.h
+  ${MOC_BUILT_SOURCES}
+  ${RCS_SOURCES}
+  ${UI_BUILT_SOURCES}
+  ${EXE_ICON}
+  ${apple_bundle_sources}
+)
+
+TARGET_LINK_LIBRARIES(${PV_EXE_NAME}
+  pqComponents
+  pqCore
+  pqWidgets
+  QtChart
+  QtTesting
+  ${QT_LIBRARIES}
+)
+
+IF(Q_WS_MAC)
+  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/CompleteBundle.cmake.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/CompleteBundle.cmake"
+    @ONLY IMMEDIATE)
+  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/CreateBundle.sh.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/CreateBundle.sh"
+    @ONLY IMMEDIATE)
+  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/CreateBundleDuringMakeInstall.cmake.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/CreateBundleDuringMakeInstall.cmake"
+    @ONLY IMMEDIATE)
+ENDIF(Q_WS_MAC)
+
+IF(WIN32)
+  TARGET_LINK_LIBRARIES(${PV_EXE_NAME} ${QT_QTMAIN_LIBRARY} )
+ENDIF(WIN32)
+
+FIND_PROGRAM(QT_ASSISTANT_EXECUTABLE
+   NAMES assistant_adp assistant 
+   PATHS ${QT_BINARY_DIR}
+   DOC "path to assistant executable for documentation"
+   NO_DEFAULT_PATH)
+FILE(TO_NATIVE_PATH "${QT_ASSISTANT_EXECUTABLE}" PV_ASSISTANT)
+MARK_AS_ADVANCED(QT_ASSISTANT_EXECUTABLE)
+
+FILE(TO_NATIVE_PATH "${ParaView_BINARY_DIR}/pqClient.adp" PV_CLIENT_DOC)
+
+CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/pqClientDocFinder.txt.in"
+               "${EXECUTABLE_OUTPUT_PATH}/pqClientDocFinder.txt"
+               @ONLY IMMEDIATE)
+  
+IF(BUILD_TESTING)
+  IF(Q_WS_MAC)
+    SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/paraview.app/Contents/MacOS/paraview --test-directory=${PARAVIEW_TEST_DIR})
+  ELSE(Q_WS_MAC)
+    SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/paraview --test-directory=${PARAVIEW_TEST_DIR})
+  ENDIF(Q_WS_MAC)
+
+  SET(TEST_XML ${pqClient_SOURCE_DIR}/Testing/XML)
+  SET(TEST_PYTHON ${pqClient_SOURCE_DIR}/Testing/Python)
+  SET(TEST_IMAGE ${PARAVIEW_DATA_ROOT}/Baseline)
+
+  SET (XML_TESTS_WITH_BASELINES
+    # ColorEditor3 doesn't work in client/server mode
+    ColorEditor3
+    CreateSourceWithoutConnect
+#    LoadStateSelection
+    OpenFile
+#    SelectionUndo
+    )
+
+  SET (TESTS_WITHOUT_BASELINES
+    AboutDialog
+    ChartOptions
+    )
+  IF(PARAVIEW_DATA_ROOT)
+    SET (TESTS_WITHOUT_BASELINES
+      ${TESTS_WITHOUT_BASELINES}
+      LoadStateHistogram
+      )
+  ENDIF(PARAVIEW_DATA_ROOT)
+
+  IF(QT_TESTING_WITH_PYTHON)
+    SET(XML_TESTS_WITH_BASELINES ${XML_TESTS_WITH_BASELINES}
+      PythonProgrammableFilter
+      )
+    SET(PYTHON_TESTS
+      OpenHelp
+      ToolBarAndMenus
+      TestContourWidget
+      )
+    IF(PARAVIEW_DATA_ROOT)
+      SET(PYTHON_TESTS ${PYTHON_TESTS}
+        #HistogramChart
+        LoadStateMultiView
+        FileSeries
+        SaveLargeScreenshot
+        #SaveAnimationMultiView   -- need to fix race condition on Mac
+        VCRAnimation
+        )
+      # Set image threshold overrides for the tests.
+      SET(SaveLargeScreenshot_THRESHOLD 10000)
+
+      SET(PYTHON_TESTS_REMOTE_ONLY 
+        DisconnectAndSaveAnimation)
+    ENDIF(PARAVIEW_DATA_ROOT)
+  ENDIF(QT_TESTING_WITH_PYTHON)
+
+  FOREACH(test ${TESTS_WITHOUT_BASELINES})
+    ADD_TEST(pqClient${test}
+      ${TEST_BINARY} -dr 
+        --test-directory=${PARAVIEW_TEST_DIR}
+        --run-test=${TEST_XML}/${test}.xml --exit)
+  ENDFOREACH(test)
+  
+  IF(PARAVIEW_DATA_ROOT)
+    FOREACH(test ${XML_TESTS_WITH_BASELINES})
+      GET_IMAGE_THRESHOLD_ARG(THRESHOLD_CMD ${test})
+      ADD_TEST(pqClient${test}
+        ${TEST_BINARY} -dr --run-test=${TEST_XML}/${test}.xml
+        --test-directory=${PARAVIEW_TEST_DIR}
+        --compare-view=${TEST_IMAGE}/${test}.png
+        ${THRESHOLD_CMD}
+        --exit)
+    ENDFOREACH(test) 
+  ENDIF(PARAVIEW_DATA_ROOT)
+  
+  FOREACH(test ${PYTHON_TESTS})
+    GET_IMAGE_THRESHOLD_ARG(THRESHOLD_CMD ${test})
+    ADD_TEST(pqClient${test}-Python
+      ${TEST_BINARY} -dr --run-test=${TEST_PYTHON}/${test}.py
+      --test-directory=${PARAVIEW_TEST_DIR}
+      ${THRESHOLD_CMD}
+      --exit)
+  ENDFOREACH(test)
+
+  # test the plugins
+  IF(BUILD_SHARED_LIBS AND BUILD_EXAMPLES)
+    SET(DOLLAR "$")
+    IF(CMAKE_CONFIGURATION_TYPES)
+      SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/${DOLLAR}{CTEST_CONFIGURATION_TYPE}/paraview --test-directory=${PARAVIEW_TEST_DIR})
+      SET(RUN_PATH ${EXECUTABLE_OUTPUT_PATH}/${DOLLAR}{CTEST_CONFIGURATION_TYPE})
+    ELSE(CMAKE_CONFIGURATION_TYPES)
+      SET(RUN_PATH ${EXECUTABLE_OUTPUT_PATH})
+      IF(Q_WS_MAC)
+        SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/paraview.app/Contents/MacOS/paraview --test-directory=${PARAVIEW_TEST_DIR})
+      ELSE(Q_WS_MAC)
+        SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/paraview --test-directory=${PARAVIEW_TEST_DIR})
+      ENDIF(Q_WS_MAC)
+    ENDIF(CMAKE_CONFIGURATION_TYPES)
+  
+
+    IF (QT_TESTING_WITH_PYTHON)
+      # Since these tests need python, it's essential to verify that testing
+      # with python is enabled.
+      SET(PLUGIN_TESTS
+          ToolBarPlugin
+          ObjectPanelPlugin
+          )
+
+      FOREACH(test ${PLUGIN_TESTS})
+        ADD_TEST(pqClient${test}
+                 ${CMAKE_COMMAND} -E chdir ${RUN_PATH}
+                 ${TEST_BINARY} -dr --run-test=${TEST_PYTHON}/${test}.py
+                 --exit)
+      ENDFOREACH(test)
+    ENDIF (QT_TESTING_WITH_PYTHON)
+
+  ENDIF(BUILD_SHARED_LIBS AND BUILD_EXAMPLES)
+
+
+# Now we add tests that use the pvTestDriver for running.
+  SET(XML_TESTS_WITH_BASELINES
+    3DWidgetInCustomFilter
+    AnimatePipelineTime
+    CalcParens
+    Calculator
+    CameraLink
+    Clip
+    ClipHidden
+    ClipPlaneLink
+    ClipUndo
+    ColorEditor1
+    ColorEditor2
+    ColorEditor4
+    Contour
+    ContourRange
+    CreateAndLoadLookmark
+    CreateCustomFilter
+    CreateSource
+    CustomFilter
+    Cut
+    CutMulti
+    D3SmallCells
+    DualSphereAnimation
+    ExodusIIPanel
+    ExodusModeShapes
+    ExodusPanel
+#    ExodusWriter -- ENABLE WHEN WRITER IS ADDED
+    ExodusXML
+    ExTimeseries
+    ExtractBlock
+    ExtractLevel
+    Flow
+    Flow2
+    Fractal2D
+    Fractal3D
+    LinePlot
+    LoadSaveStateAnimation
+    LoadState
+    NormalGlyphs
+    ObjectInspectorSphere
+    OpenSaveData
+    Plot3DReader
+    PropertyLink
+    ReadXMLPolyDataFileSeries
+    RectilinearFractal
+    RepresentationSelector
+    SaveAnimationGeometry
+    SaveColorMap
+    SelectReader
+    SimpleInteraction
+    Slice
+    SPTimeseries
+    StreamTracer
+    StreamTracerUpdates
+    TemporalInterpolator
+    TemporalShiftScale
+    Tessellate
+    TextWidget
+    Threshold
+    UndoRedo
+    UndoRedo1
+    UndoRedo2
+    UndoRedo3
+    UndoRedo4
+    UndoRedo5
+    UndoRedo6
+    UndoRedo7
+    UnstructuredOutline
+    VariableSelector
+    ViewSettingsDialog
+    XdmfRead
+    XdmfReadImageData
+    XdmfReadImageDataCollection
+    XdmfReadRectilinearGrid
+    XdmfReadRectilinearGridCollection
+    XdmfReadStructuredGrid
+    XdmfReadStructuredGridCollection
+  )
+
+  # Add image threshold overrides for tests.
+  # Generally all tests with wireframes need higher thresholds.
+  SET (Flow2_THRESHOLD 15)
+  SET (UndoRedo4_THRESHOLD 15)
+
+  # These Xdmf tests have wireframes, hence the increased thresholds.
+  SET (XdmfReadImageData_THRESHOLD 20)
+  SET (XdmfReadRectilinearGrid_THRESHOLD 20)
+  SET (XdmfReadRectilinearGridCollection_THRESHOLD 20)
+  SET (XdmfReadStructuredGrid_THRESHOLD 20)
+  SET (XdmfReadStructuredGridCollection_THRESHOLD 20)
+  SET (XdmfReadImageDataCollection_THRESHOLD 20)
+
+  # Make these tests use reverse connection.
+  SET (CutMulti_REVERSE_CONNECT TRUE)
+
+  # Test compositing for a few client server and client render server tests.
+  SET(COMPOSITING_XML_TESTS_WITH_BASELINES
+    Calculator
+    CameraLink
+    ColorEditor1
+    ContourRange
+    D3SmallCells
+    Fractal3D
+    StreamTracer
+    UndoRedo2
+    )
+
+  SET(TEST_BINARY ${EXECUTABLE_OUTPUT_PATH}/pvTestDriver)
+
+  IF(PARAVIEW_DATA_ROOT)
+    OPTION(PARAVIEW_CLIENT_RENDER_SERVER_TESTS
+      "Turn on/off client tests that involve separate data and render servers."
+      ON)
+    MARK_AS_ADVANCED(PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+    FOREACH(test ${XML_TESTS_WITH_BASELINES})
+      GET_IMAGE_THRESHOLD_ARG(THRESHOLD_CMD ${test})
+      GET_REVERSE_CONNECT_ARG(REVERSE_CONNECTION_CMD ${test})
+
+      ADD_TEST(pqClient${test}-Builtin
+        ${TEST_BINARY}
+        --test-directory=${PARAVIEW_TEST_DIR}
+        -dr
+        --run-test=${TEST_XML}/${test}.xml
+        --compare-view=${TEST_IMAGE}/${test}.png
+        ${THRESHOLD_CMD}
+        --exit)
+      
+      ADD_TEST(pqClient${test}-ClientServer
+        ${TEST_BINARY} --test-server
+        ${REVERSE_CONNECTION_CMD}
+        --test-directory=${PARAVIEW_TEST_DIR}
+        -dr
+        --run-test=${TEST_XML}/${test}.xml
+        --compare-view=${TEST_IMAGE}/${test}.png
+        ${THRESHOLD_CMD}
+        --exit)
+
+      IF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+        ADD_TEST(pqClient${test}-ClientRenderServer
+          ${TEST_BINARY} --test-render-server
+          ${REVERSE_CONNECTION_CMD}
+          --test-directory=${PARAVIEW_TEST_DIR}
+          -dr
+          --run-test=${TEST_XML}/${test}.xml
+          --compare-view=${TEST_IMAGE}/${test}.png
+          ${THRESHOLD_CMD}
+          --exit)
+      ENDIF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+    ENDFOREACH(test)
+
+    FOREACH(test ${COMPOSITING_XML_TESTS_WITH_BASELINES})
+      GET_IMAGE_THRESHOLD_ARG(THRESHOLD_CMD ${test})
+      ADD_TEST(pqClient${test}-ClientServerRemoteRender
+        ${TEST_BINARY} --test-server --test-remote-rendering
+        --test-directory=${PARAVIEW_TEST_DIR}
+        -dr
+        --run-test=${TEST_XML}/${test}.xml
+        --compare-view=${TEST_IMAGE}/${test}.png
+        ${THRESHOLD_CMD}
+        --exit)
+        
+      IF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+        ADD_TEST(pqClient${test}-ClientRenderServerRemoteRender
+          ${TEST_BINARY} --test-render-server --test-remote-rendering
+          --test-directory=${PARAVIEW_TEST_DIR}
+          -dr
+          --run-test=${TEST_XML}/${test}.xml
+          --compare-view=${TEST_IMAGE}/${test}.png
+          ${THRESHOLD_CMD}
+          --exit)
+      ENDIF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+    ENDFOREACH(test)
+
+    FOREACH(test ${PYTHON_TESTS_REMOTE_ONLY})
+        GET_IMAGE_THRESHOLD_ARG(THRESHOLD_CMD ${test})
+        ADD_TEST(pqClient${test}-ClientServer-Python
+          ${TEST_BINARY} --test-server
+          --test-directory=${PARAVIEW_TEST_DIR}
+          -dr
+          --run-test=${TEST_PYTHON}/${test}.py
+          ${THRESHOLD_CMD}
+          --exit)
+
+     #FIXME
+     #IF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+     #  ADD_TEST(pqClient${test}-ClientRenderServer-Python
+     #    ${TEST_BINARY} --test-render-server
+     #    --test-directory=${PARAVIEW_TEST_DIR}
+     #    -dr
+     #    --run-test=${TEST_PYTHON}/${test}.py
+     #    --exit)
+     #ENDIF (PARAVIEW_CLIENT_RENDER_SERVER_TESTS)
+    ENDFOREACH(test) 
+
+    ADD_TEST(StructuredVolumeRender-ClientServerRemoteRender
+      ${TEST_BINARY} --test-server --test-remote-rendering
+      --test-directory=${PARAVIEW_TEST_DIR}
+      -dr
+      --run-test=${TEST_XML}/StructuredVolumeRender.xml
+      --compare-view=${TEST_IMAGE}/StructuredVolumeRender.png
+      --exit)
+    ADD_TEST(UnstructuredVolumeRender-ClientServerRemoteRender
+      ${TEST_BINARY} --test-server --test-remote-rendering
+      --test-directory=${PARAVIEW_TEST_DIR}
+      -dr
+      --run-test=${TEST_XML}/UnstructuredVolumeRender.xml
+      --compare-view=${TEST_IMAGE}/UnstructuredVolumeRender.png
+      --exit)
+
+  ENDIF(PARAVIEW_DATA_ROOT)
+
+  ADD_SUBDIRECTORY(Testing/Cxx)
+
+  # Do the link forwarding for the test driver as well.
+  SET(PV_EXE_LIST ${PV_EXE_LIST} pvTestDriver)
+ENDIF(BUILD_TESTING)
+
+# Add shared link forwarding executables if necessary.
+IF(PV_NEED_SHARED_FORWARD)
+  FOREACH(pvexe ${PV_EXE_LIST})
+    SET(PV_FORWARD_EXE ${pvexe}${PV_EXE_SUFFIX})
+    CONFIGURE_FILE(
+      ${ParaView_SOURCE_DIR}/Servers/Executables/pv-forward.c.in
+      ${CMAKE_CURRENT_BINARY_DIR}/${pvexe}-forward.c
+      @ONLY IMMEDIATE)
+    ADD_EXECUTABLE(${pvexe} ${CMAKE_CURRENT_BINARY_DIR}/${pvexe}-forward.c)
+    ADD_DEPENDENCIES(${pvexe} ${pvexe}${PV_EXE_SUFFIX})
+    INSTALL(TARGETS ${pvexe} DESTINATION ${PV_INSTALL_BIN_DIR_CM24} COMPONENT Runtime)
+  ENDFOREACH(pvexe)
+ENDIF(PV_NEED_SHARED_FORWARD)
+
+IF(NOT Q_WS_MAC)
+  INSTALL(TARGETS ${PV_EXE_NAME}
+    DESTINATION ${PV_EXE_INSTALL_CM24}
+    COMPONENT Runtime)
+ENDIF(NOT Q_WS_MAC)
+
+# Install system libraries on Linux (will not work on any other Unix
+# yet)
+FOREACH(fmpglib avcodec avformat avutil)
+  IF(FFMPEG_${fmpglib}_LIBRARY)
+    GET_FILENAME_COMPONENT(FFMPEG_LIB_DIR_tmp ${FFMPEG_${fmpglib}_LIBRARY} PATH)
+    GET_FILENAME_COMPONENT(FFMPEG_LIB_NAME_tmp ${FFMPEG_${fmpglib}_LIBRARY} NAME)
+    FILE(GLOB FFMPEG_LIB_LIST RELATIVE ${FFMPEG_LIB_DIR_tmp} "${FFMPEG_${fmpglib}_LIBRARY}*")
+    INSTALL(CODE "
+MESSAGE(STATUS \"Installing \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24}/${FFMPEG_LIB_NAME_tmp}\")
+EXECUTE_PROCESS (WORKING_DIRECTORY ${FFMPEG_LIB_DIR_tmp}
+                 COMMAND tar c ${FFMPEG_LIB_LIST}
+                 COMMAND tar -xC \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24})
+        " COMPONENT Runtime)
+    #INSTALL(FILES ${FFMPEG_${fmpglib}_LIBRARY} DESTINATION ${PV_INSTALL_LIB_DIR_CM24})
+    
+  ENDIF(FFMPEG_${fmpglib}_LIBRARY)
+ENDFOREACH(fmpglib)
+
+SET (QTLIBLIST QTCORE QTGUI QTNETWORK QTXML QTTEST QTSQL)
+# the variable and library names are not the same
+IF (WIN32)
+  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANTCLIENT)
+ELSE (WIN32)
+  SET (QTLIBLIST ${QTLIBLIST} QTASSISTANT)
+ENDIF (WIN32)
+
+IF(NOT Q_WS_MAC)
+  FOREACH(qtlib ${QTLIBLIST})
+    IF (NOT WIN32)
+      #INSTALL(FILES ${QT_${qtlib}_LIBRARY_RELEASE} DESTINATION ${PV_INSTALL_LIB_DIR_CM24})
+      GET_FILENAME_COMPONENT(QT_LIB_DIR_tmp ${QT_${qtlib}_LIBRARY_RELEASE} PATH)
+      GET_FILENAME_COMPONENT(QT_LIB_NAME_tmp ${QT_${qtlib}_LIBRARY_RELEASE} NAME)
+      FILE(GLOB QT_LIB_LIST RELATIVE ${QT_LIB_DIR_tmp} "${QT_${qtlib}_LIBRARY_RELEASE}*")
+      INSTALL(CODE "
+MESSAGE(STATUS \"Installing \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24}/${QT_LIB_NAME_tmp}\")
+EXECUTE_PROCESS (WORKING_DIRECTORY ${QT_LIB_DIR_tmp}
+                 COMMAND tar c ${QT_LIB_LIST}
+                 COMMAND tar -xC \${CMAKE_INSTALL_PREFIX}/${PV_INSTALL_LIB_DIR_CM24})
+        " COMPONENT Runtime)
+    ELSE (NOT WIN32)
+      GET_FILENAME_COMPONENT(QT_DLL_PATH_tmp ${QT_QMAKE_EXECUTABLE} PATH)
+      INSTALL(FILES ${QT_DLL_PATH_tmp}/${qtlib}4.dll DESTINATION ${PV_INSTALL_BIN_DIR_CM24} COMPONENT Runtime)
+    ENDIF (NOT WIN32)
+    
+  ENDFOREACH(qtlib)
+ENDIF(NOT Q_WS_MAC)
+
+# Hard-coded install rules for anything left to install. These should
+# probably go to a local cmake file. Change to match the build system's
+# libraries
+# INSTALL(FILES /usr/lib/libstdc++.so.5 /lib/libgcc_s.so.1 /usr/lib/libpng.so.3 /usr/lib/libexpat.so.0 /usr/lib/libfontconfig.so.1 /usr/lib/libfreetype.so.6 /lib/libz.so.1 DESTINATION ${PV_INSTALL_LIB_DIR_CM24} COMPONENT Runtime)
+
+# We also need Qt assistant
+IF(WIN32)
+  INSTALL(FILES ${QT_ASSISTANT_EXECUTABLE}
+    DESTINATION ${PV_EXE_INSTALL_CM24} 
+    PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ 
+    COMPONENT Runtime
+    RENAME assistant)
+ELSE(WIN32)
+  IF (NOT Q_WS_MAC)
+    IF(PV_NEED_SHARED_FORWARD)
+      INSTALL(FILES ${QT_ASSISTANT_EXECUTABLE}
+        DESTINATION ${PV_EXE_INSTALL_CM24} 
+        PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ 
+        COMPONENT Runtime
+        RENAME assistant-real)
+    ELSE(PV_NEED_SHARED_FORWARD)
+      INSTALL(FILES ${QT_ASSISTANT_EXECUTABLE}
+        DESTINATION ${PV_EXE_INSTALL_CM24} 
+        PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ 
+        COMPONENT Runtime
+        RENAME assistant)
+    ENDIF(PV_NEED_SHARED_FORWARD)
+  ENDIF (NOT Q_WS_MAC)
+ENDIF(WIN32)
+
+# Call this one last so that it happens after the above targets are all installed:
+#
+IF(Q_WS_MAC)
+  INSTALL(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/CreateBundleDuringMakeInstall.cmake")
+ENDIF(Q_WS_MAC)
diff -Naur ParaView-3.4.0/CMakeLists.txt ParaView-3.4.0.new/CMakeLists.txt
--- ParaView-3.4.0/CMakeLists.txt	2008-09-12 09:33:51.000000000 -0400
+++ ParaView-3.4.0.new/CMakeLists.txt	2009-07-14 10:19:48.000000000 -0400
@@ -89,7 +89,7 @@
     MESSAGE(SEND_ERROR "Qt ${QT_MIN_VERSION} or greater not found.  Please check the QT_QMAKE_EXECUTABLE variable.")
   ELSE(NOT QT4_FOUND)
     # don't go greater than supported version
-    STRING(REGEX MATCH "^4\\.3\\.[0-9]+" qt_version_tmp "${QTVERSION}")
+    STRING(REGEX MATCH "^4\\.[3-5]\\.[0-9]+" qt_version_tmp "${QTVERSION}")
     IF (NOT qt_version_tmp)
       STRING(REGEX MATCH "^4\\.4\\.[0-9]+" qt_version4_4_tmp "${QTVERSION}")
       IF (NOT qt_version4_4_tmp)
diff -Naur ParaView-3.4.0/CMakeLists.txt.orig ParaView-3.4.0.new/CMakeLists.txt.orig
--- ParaView-3.4.0/CMakeLists.txt.orig	1969-12-31 19:00:00.000000000 -0500
+++ ParaView-3.4.0.new/CMakeLists.txt.orig	2008-09-12 09:33:51.000000000 -0400
@@ -0,0 +1,292 @@
+PROJECT(ParaView)
+CMAKE_MINIMUM_REQUIRED(VERSION 2.4.5)
+IF(COMMAND CMAKE_POLICY)
+  CMAKE_POLICY(SET CMP0003 NEW)
+ENDIF(COMMAND CMAKE_POLICY)
+
+IF(CMAKE_CROSSCOMPILING)
+  FIND_PACKAGE(ParaView3CompileTools REQUIRED)
+ENDIF(CMAKE_CROSSCOMPILING)
+
+SET(EXPORT_EXECUTABLES_FILE "${CMAKE_BINARY_DIR}/ParaView3CompileToolsConfig.cmake")
+SET(EXPORT_EXECUTABLES_NAMESPACE "")
+FILE(WRITE "${EXPORT_EXECUTABLES_FILE}" "#generated by Paraview, do not edit\n")
+IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.5)
+  # Host tools are for cross compiling, need at least cmake 2.6
+  ADD_CUSTOM_TARGET(pvHostTools)
+  SET(COMPILE_TOOLS_TARGET pvHostTools)
+ENDIF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.5)
+
+# EXPORT() will be in cmake 2.6, add an empty macro so cmake 2.4 is still able to build ParaView3
+IF(NOT COMMAND EXPORT)
+  MACRO(EXPORT)
+  ENDMACRO(EXPORT)
+ENDIF(NOT COMMAND EXPORT)
+
+# GET_PROPERTY() will be in cmake 2.6
+IF(COMMAND GET_PROPERTY)
+  GET_PROPERTY(PV_TARGET_SUPPORTS_SHARED_LIBS
+    GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
+ELSE(COMMAND GET_PROPERTY)
+  SET(PV_TARGET_SUPPORTS_SHARED_LIBS  TRUE)
+ENDIF(COMMAND GET_PROPERTY)
+
+#########################################################################
+# Warn about ParaQ
+SET(PARAVIEW_WARN_ABOUT_PARAQ)
+IF(EXISTS "${ParaView_SOURCE_DIR}/CVS/Root")
+  FILE(READ "${ParaView_SOURCE_DIR}/CVS/Root" paraview_cvs_root)
+  IF("${paraview_cvs_root}" MATCHES ParaQ)
+    SET(PARAVIEW_WARN_ABOUT_PARAQ 1)
+  ENDIF("${paraview_cvs_root}" MATCHES ParaQ)
+ENDIF(EXISTS "${ParaView_SOURCE_DIR}/CVS/Root")
+IF("${ParaView_SOURCE_DIR}" MATCHES "ParaQ")
+  SET(PARAVIEW_WARN_ABOUT_PARAQ 1)
+ENDIF("${ParaView_SOURCE_DIR}" MATCHES "ParaQ")
+IF(PARAVIEW_WARN_ABOUT_PARAQ)
+  MESSAGE(SEND_ERROR "ParaView 3 should be checked out from ParaView3 repository. ParaQ repository is deprecated and will be removed")
+ENDIF(PARAVIEW_WARN_ABOUT_PARAQ)
+
+#########################################################################
+# Disallow in-source build
+IF("${ParaView_SOURCE_DIR}"  STREQUAL "${ParaView_BINARY_DIR}")
+  MESSAGE(FATAL_ERROR "ParaView requires an out of source Build. Please create a separate binary directory and run CMake there.")
+ENDIF("${ParaView_SOURCE_DIR}"  STREQUAL "${ParaView_BINARY_DIR}")
+
+#########################################################################
+SET(PARAVIEW_VERSION_MAJOR 3)
+SET(PARAVIEW_VERSION_MINOR 4)
+SET(PARAVIEW_VERSION_PATCH 0)
+SET(PARAVIEW_VERSION "${PARAVIEW_VERSION_MAJOR}.${PARAVIEW_VERSION_MINOR}")
+SET(PARAVIEW_VERSION_FULL "${PARAVIEW_VERSION}.${PARAVIEW_VERSION_PATCH}")
+
+# See VTK/CMakeLists.txt for an explanation of this default selection.
+IF(PARAVIEW_VERSION_MINOR MATCHES "[02468]$")
+  # This is a release version.  Default to not use rpath.
+  SET(VTK_USE_RPATH_DEFAULT OFF)
+ELSE(PARAVIEW_VERSION_MINOR MATCHES "[02468]$")
+  # This is a development version.  Default to use rpath.
+  SET(VTK_USE_RPATH_DEFAULT ON)
+ENDIF(PARAVIEW_VERSION_MINOR MATCHES "[02468]$")
+
+#########################################################################
+# build VTK/Qt support
+OPTION(PARAVIEW_BUILD_QT_GUI "Build ParaView Qt Client. This requires Qt." ON)
+IF (PARAVIEW_BUILD_QT_GUI)
+  # need to set up Qt stuff here because there are Qt dependencies before
+  # CMake traverses the Qt directory (VTK/GUISupport/Qt).
+  
+  # set vars to build the QVTK library
+  SET(VTK_USE_GUISUPPORT ON CACHE BOOL "Build VTK with GUI Support" FORCE)
+  SET(VTK_USE_QVTK ON CACHE BOOL "Build VTK with Qt Support" FORCE)
+  SET(DESIRED_QT_VERSION 4 CACHE STRING "Use Qt4" FORCE)
+  # ParaView requires this minimum version of Qt, and let's do it here before
+  # our first call to FindQt4.cmake
+  SET(QT_MIN_VERSION "4.3.0")
+  SET(QT_REQUIRED TRUE)
+  FIND_PACKAGE(Qt4)
+  IF(NOT QT4_FOUND)
+    MESSAGE(SEND_ERROR "Qt ${QT_MIN_VERSION} or greater not found.  Please check the QT_QMAKE_EXECUTABLE variable.")
+  ELSE(NOT QT4_FOUND)
+    # don't go greater than supported version
+    STRING(REGEX MATCH "^4\\.3\\.[0-9]+" qt_version_tmp "${QTVERSION}")
+    IF (NOT qt_version_tmp)
+      STRING(REGEX MATCH "^4\\.4\\.[0-9]+" qt_version4_4_tmp "${QTVERSION}")
+      IF (NOT qt_version4_4_tmp)
+        MESSAGE(SEND_ERROR "Qt ${QTVERSION} not supported.  Please use Qt 4.3 (you may need to clean your dirtied cache).")
+      ELSE (NOT qt_version4_4_tmp)
+        MESSAGE("WARNING: You are using Qt ${QTVERSION}. Officially supported version is Qt 4.3")
+      ENDIF (NOT qt_version4_4_tmp)
+    ENDIF (NOT qt_version_tmp)
+    # enforce Carbon in VTK for Qt/Mac
+    IF(Q_WS_MAC)
+      SET(VTK_USE_CARBON ON CACHE BOOL "Build VTK with Carbon" FORCE)
+      SET(VTK_USE_COCOA OFF CACHE BOOL "Build VTK with Cocoa" FORCE)
+    ENDIF(Q_WS_MAC)
+    # Mark these Qt variables as advanced. Users don't really have to set them.
+    MARK_AS_ADVANCED(DESIRED_QT_VERSION VTK_USE_QVTK VTK_USE_GUISUPPORT)
+    MARK_AS_ADVANCED(QT_MKSPECS_DIR QT_PLUGINS_DIR QT_X11_X11_LIBRARY QT_X11_Xext_LIBRARY QT_X11_m_LIBRARY)
+  ENDIF(NOT QT4_FOUND)
+ELSE (PARAVIEW_BUILD_QT_GUI)
+  SET(VTK_USE_QVTK OFF CACHE BOOL "Build VTK with Qt Support" FORCE)
+ENDIF (PARAVIEW_BUILD_QT_GUI)
+
+
+# Work around CMake 2.2.x FindPythonLibs bug.
+# Do not find Python subdirectory as python debug library.
+SET(PYTHON_DEBUG_LIBRARY "" CACHE FILEPATH "Purposely empty: work around CMake FindPythonLibs bug")
+MARK_AS_ADVANCED(PYTHON_DEBUG_LIBRARY)
+
+#########################################################################
+# Define a PARAVIEW_USE_MPI that is not advanced
+SET(PARAVIEW_USE_MPI OFF CACHE BOOL "Build ParaView with MPI support")
+SET(VTK_USE_MPI ${PARAVIEW_USE_MPI} CACHE INTERNAL "Build VTK with MPI support" FORCE)
+# define this variable so that VTK_DEPENDENT_OPTION in the VTK 
+# CMakeLists.txt does not turn VTK_USE_MPI back to a regular cache
+# variable
+# set it to PARAVIEW_USE_MPI so that VTK_USE_MPI is slaved to it.
+SET(VTK_USE_MPI_ISSET ${PARAVIEW_USE_MPI})
+
+#########################################################################
+# Force Infovis support on
+SET(VTK_USE_INFOVIS ON CACHE BOOL "Build VTK with Infovis Support" FORCE)
+MARK_AS_ADVANCED(VTK_USE_INFOVIS)
+
+#########################################################################
+# Configure Testing
+OPTION(BUILD_TESTING "Build ParaView Testing" ON)
+IF(BUILD_TESTING)
+  SET(PARAVIEW_TEST_DIR    ${ParaView_BINARY_DIR}/Testing/Temporary)
+  MAKE_DIRECTORY(${PARAVIEW_TEST_DIR})
+  ENABLE_TESTING()
+  INCLUDE (CTest)
+ENDIF(BUILD_TESTING)
+
+#########################################################################
+# Configure data directory
+IF(NOT PARAVIEW_DATA_ROOT AND PARAQ_DATA_ROOT)
+  SET(PARAVIEW_DATA_ROOT "${PARAQ_DATA_ROOT}")
+ENDIF(NOT PARAVIEW_DATA_ROOT AND PARAQ_DATA_ROOT)
+FIND_PATH(PARAVIEW_DATA_ROOT ParaViewData.readme
+  ${ParaView_SOURCE_DIR}/ParaViewData
+  ${ParaView_SOURCE_DIR}/../ParaViewData
+  ${ParaView_SOURCE_DIR}/ParaQData
+  ${ParaView_SOURCE_DIR}/../ParaQData
+  $ENV{PARAVIEW_DATA_ROOT}
+  )
+
+#########################################################################
+# Configure Python
+OPTION(PARAVIEW_ENABLE_PYTHON "Enable/Disable Python scripting support." OFF)
+
+# PARAVIEW_TESTING_WITH_PYTHON must be used only when PARAVIEW_ENABLE_PYTHON 
+# is ON. If PARAVIEW_ENABLE_PYTHON is OFF, PARAVIEW_TESTING_WITH_PYTHON 
+# is ignored and treated as disabled.
+OPTION(PARAVIEW_TESTING_WITH_PYTHON 
+    "Build Python Testing support if PARAVIEW_ENABLE_PYTHON is ON"  
+    ON)
+MARK_AS_ADVANCED(PARAVIEW_TESTING_WITH_PYTHON)
+
+IF (PARAVIEW_TESTING_WITH_PYTHON AND PARAVIEW_ENABLE_PYTHON)
+  SET (QT_TESTING_WITH_PYTHON ON)
+ELSE (PARAVIEW_TESTING_WITH_PYTHON AND PARAVIEW_ENABLE_PYTHON)
+  SET (QT_TESTING_WITH_PYTHON OFF)
+ENDIF (PARAVIEW_TESTING_WITH_PYTHON AND PARAVIEW_ENABLE_PYTHON)
+
+IF (PARAVIEW_ENABLE_PYTHON AND PV_TARGET_SUPPORTS_SHARED_LIBS)
+  SET(BUILD_SHARED_LIBS ON CACHE BOOL "Build ParaView using shared libraries" FORCE)
+ENDIF (PARAVIEW_ENABLE_PYTHON AND PV_TARGET_SUPPORTS_SHARED_LIBS)
+
+IF (PARAVIEW_ENABLE_PYTHON)
+  SET(VTK_WRAP_PYTHON ON CACHE INTERNAL "" FORCE)
+
+  # ParaView python uses NewInterpretor API, which cannot be used with the
+  # python's thread support API (PyGIL*). Hence, we disable all thread support.
+  # No mutiple threads in paraview. Sorry.
+  SET(VTK_NO_PYTHON_THREADS 1 CACHE INTERNAL "Build VTK with MPI support" FORCE)
+ELSE (PARAVIEW_ENABLE_PYTHON)
+  SET(VTK_WRAP_PYTHON OFF CACHE INTERNAL "" FORCE)
+ENDIF (PARAVIEW_ENABLE_PYTHON)
+
+#########################################################################
+# Set the ServerManager test data dir,
+SET(PVServerManagerTestData ${PARAVIEW_DATA_ROOT})
+
+# Find hints file for the client/server wrapping
+FIND_FILE(VTK_WRAP_HINTS hints ${ParaView_SOURCE_DIR}/VTK/Wrapping NO_CMAKE_FIND_ROOT_PATH)
+MARK_AS_ADVANCED(VTK_WRAP_HINTS)
+
+#########################################################################
+CONFIGURE_FILE(${ParaView_SOURCE_DIR}/vtkPQConfig.h.in
+  ${ParaView_BINARY_DIR}/vtkPQConfig.h
+  ESCAPE_QUOTES)
+
+
+#########################################################################
+#
+# add directories
+#
+#########################################################################
+
+#########################################################################
+# Include the file that most of the environment setup (except GUI)
+# It also adds the VTK directories
+INCLUDE(${ParaView_SOURCE_DIR}/CMake/ParaViewCommon.cmake)
+
+#########################################################################
+IF(BUILD_DOCUMENTATION)
+  ADD_SUBDIRECTORY(Utilities/Doxygen)
+ENDIF(BUILD_DOCUMENTATION)
+ADD_SUBDIRECTORY(Documentation)
+
+#########################################################################
+IF (PARAVIEW_BUILD_QT_GUI)
+  ADD_SUBDIRECTORY(Qt)
+ENDIF (PARAVIEW_BUILD_QT_GUI)
+
+#########################################################################
+IF (PARAVIEW_BUILD_QT_GUI)
+  ADD_SUBDIRECTORY(Applications)
+ENDIF (PARAVIEW_BUILD_QT_GUI)
+
+#########################################################################
+OPTION(BUILD_EXAMPLES "Build ParaView examples." OFF)
+IF (BUILD_EXAMPLES)
+  ADD_SUBDIRECTORY(Examples)
+ENDIF (BUILD_EXAMPLES)
+
+#########################################################################
+# Setup CPack
+
+INCLUDE(ParaView3CPack.cmake)
+
+#########################################################################
+# Additional definitions for ParaViewConfig.cmake
+
+SET(PARAVIEW_USE_FILE "${ParaView_SOURCE_DIR}/ParaViewUse.cmake")
+SET(PARAVIEW_VTK_DIR "${ParaView_BINARY_DIR}/VTK")
+
+SET(PARAVIEW_CMAKE_EXTENSIONS "${ParaView_SOURCE_DIR}/VTK/CMake")
+SET(PARAVIEW_CMAKE_CLIENT_SERVER_EXTENSION 
+  "${ParaView_SOURCE_DIR}/Utilities/VTKClientServer/CMake/vtkWrapClientServer.cmake")
+GET_TARGET_PROPERTY(VTK_WRAP_ClientServer_EXE_CONFIG vtkWrapClientServer LOCATION)
+
+SET(PARAVIEW_LIBRARY_DIRS 
+  ${LIBRARY_OUTPUT_PATH} ${PARAVIEW_EXTRA_LINK_DIRECTORIES})
+
+SET(PARAVIEW_GUI_INCLUDE_DIRS ${ParaView_SOURCE_DIR}/Qt/Widgets
+                              ${ParaView_BINARY_DIR}/Qt/Widgets
+                              ${ParaView_SOURCE_DIR}/Qt/Core
+                              ${ParaView_BINARY_DIR}/Qt/Core
+                              ${ParaView_SOURCE_DIR}/Qt/Components
+                              ${ParaView_BINARY_DIR}/Qt/Components )
+SET(PARAVIEW_KWSYS_INCLUDE_DIRS ${PARAVIEW_INCLUDE_DIRS})
+
+GET_TARGET_PROPERTY(PARAVIEW_GUI_CLIENT_EXECUTABLE paraview${PV_EXE_SUFFIX} LOCATION)
+GET_TARGET_PROPERTY(PARAVIEW_BATCH_EXECUTABLE pvbatch${PV_EXE_SUFFIX} LOCATION)
+GET_TARGET_PROPERTY(PARAVIEW_PROCESS_XML_EXECUTABLE kwProcessXML LOCATION)
+SET(PARAVIEW_SERVER_MANAGER_RESOURCES_DIRECTORY 
+  "${ParaView_SOURCE_DIR}/Servers/ServerManager/Resources")
+SET(VTKCS_SOURCE_DIR 
+  "${ParaView_SOURCE_DIR}/Utilities/VTKClientServer")
+
+# The ParaView library dependencies.
+SET(PARAVIEW_LIBRARY_DEPENDS_FILE
+  "${ParaView_BINARY_DIR}/ParaViewLibraryDepends.cmake")
+EXPORT_LIBRARY_DEPENDENCIES(${PARAVIEW_LIBRARY_DEPENDS_FILE})
+
+# Perform configuration.
+CONFIGURE_FILE(${ParaView_SOURCE_DIR}/ParaViewConfig.cmake.in
+  ${ParaView_BINARY_DIR}/ParaViewConfig.cmake @ONLY IMMEDIATE)
+
+
+#########################################################################
+IF(BUILD_SHARED_LIBS)
+  ADD_SUBDIRECTORY(Plugins)
+ENDIF(BUILD_SHARED_LIBS)
+
+# Mark certain VTK variables as advanced. Users do not really have to set these.
+IF (APPLE)
+  MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES CMAKE_OSX_SYSROOT VTK_USE_CARBON VTK_USE_COCOA VTK_APPLE_RESOURCE)
+ENDIF(APPLE)
+MARK_AS_ADVANCED(VTK_USE_MPEG2_ENCODER QT_PLUGINS_DIR QT_MKSPECS_DIR VTK_USE_MFC)
