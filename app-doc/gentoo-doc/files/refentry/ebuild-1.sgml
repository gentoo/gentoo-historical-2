<refentry id="ebuild.1">

  <refmeta>
    <refentrytitle><application>ebuild</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>ebuild 1.4</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application>ebuild</application></refname>
    <refpurpose>manual page for the ebuild program, the main user interface to the Portage system</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
        <command>ebuild</command>
        <arg choice="req"><replaceable class="parameter">file</replaceable></arg>
        <arg rep="repeat"><replaceable class="parameter">command</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>
    <para>
      The <command>ebuild</command> program is the heart of the current 
      implementation of the Portage system.  Accepting an ebuild script 
      and one or more commands as arguments, the ebuild program will parse 
      the ebuild script and execute the specified commands.  Commands exist 
      to fetch sources, unpack sources, compile sources, install object files 
      into a temporary directory "image", merge the image to the local 
      filesystem, create a bzipped tarball package out of the image, and more. 
    </para>
  </refsect1>

  <refsect1>
    <title>OPTIONS</title>
    <variablelist>
      <varlistentry>
        <term><replaceable class="parameter">file</replaceable></term>
        <listitem>
          <para>
            This must be a valid ebuild script. For further information 
            read ebuild(5).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
   <title>COMMANDS</title>
    <variablelist>

      <varlistentry>
        <term><replaceable class="parameter">check</replaceable></term>
        <listitem>
          <para>
            Checks to see if all build dependencies are satisfied.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">clean</replaceable></term>
        <listitem>
          <para>
            Cleans the temporary build directory that Portage 
            has created for this particular ebuild file. The 
            temporary build directory normally contains the 
            extracted source files as well as a possible 
            "install image" (all the files that will be merged 
            to the local filesystem or stored in a package.  
            The location of the build directory is set by the 
            <envar>BUILD_PREFIX</envar> variable in 
            <filename>/etc/make.defaults</filename> (it 
            defaults to <filename>/tmp/portage</filename>).  
            If you'd like to override the <envar>BUILD_PREFIX</envar>, add 
            the appropriate line to <filename>/etc/make.conf</filename> 
            (where all your particular customizations are supposed to go.)
          </para>
          <note><para>
            Currently, Portage doesn't clean up after a 
            package has been created or merged. This means that 
            the <envar>BUILD_PREFIX</envar> directory will accumulate lots of 
            things you probably don't want  and should be manually 
            cleaned regularly (<command>rm -rf /tmp/portage/*</command>
            will take care of this). As Portage matures, a 
            <filename>make.conf</filename> option will be added 
            that will allow you to control whether <envar>BUILD_PREFIX</envar>
            gets cleaned automatically or gets left as is.
          </para></note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">fetch</replaceable></term>
        <listitem>
          <para>
            Checks to see if all the sources specified in <envar>SRC_URI</envar>
            are available in <envar>DISTDIR</envar> (defined in <filename>/etc/make.defaults</filename>
            as <filename>/usr/portage/distfiles</filename>) and have a valid md5 checksum.  
            If the sources aren't available, an attempt is made to download them 
            from the locations specified in <envar>SRC_URI</envar>.  If multiple download locations 
            are listed for a particular file, Portage pings each location to see
            which location is closer. The Gentoo Linux mirror at 
            <ulink url="ftp://ftp.ibiblio.org"></ulink>
            is always considered as a possible download location.  If for some 
            reason the current or just-downloaded sources' md5 digests don't 
            match those recorded in <filename>files/digest-[package]-[version-rev]</filename>, 
            a warning is printed and ebuild exits with an error code of 1.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">unpack</replaceable></term>
        <listitem>
          <para>
            Extracts the sources to a subdirectory in the build directory (<envar>BUILD_PREFIX</envar>) 
            by running the <function>src_unpack()</function> function in the ebuild file.  If no <function>src_unpack()</function>
            function has been specified, a default <function>src_unpack()</function> function is used that extracts
            all the files specified in <envar>SRC_URI</envar>.  The sources are normally extracted to 
            <filename>${BUILD_PREFIX}/[package]-[version-rev]/work</filename>. This particular directory can be 
            referenced by using the <envar>WORKDIR</envar> variable.  If you're creating an ebuild, you'll want 
            to make sure that the <envar>S</envar> (source directory) variable defined at at the top of your 
            ebuild script points to the directory that contains your extracted sources.  Normally, this directory 
            is <filename>${WORKDIR}/${P}</filename>.
          </para><para>
            The <function>src_unpack()</function> function is also responsible for making the appropriate patches 
            to the sources so that they're ready for compilation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">compile</replaceable></term>
        <listitem>
          <para>
            Compiles the extracted sources by running the the <function>src_compile()</function> function specified 
            in the ebuild file.  When <function>src_compile()</function> starts, the current working directory will 
            be set to <envar>S</envar>.  When <function>src_compile()</function> completes, the sources should be 
            fully compiled.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">install</replaceable></term>
        <listitem>
          <para>
            Installs the package to the temporary "install directory"
            by running the <function>src_install()</function> function.  When 
            completed, the "install directory"
            (<filename>${BUILD_PREFIX}/[package]-[version-rev]/image</filename>) 
            will contain all the files that should either be merged to the local 
            file system or included in a binary package.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">qmerge</replaceable></term>
        <listitem>
          <para>
            This function installs all the files in the "install directory"
            to the live filesystem. The process works as follows: first, the 
            <function>pkg_preinst()</function> function (if specified) is run.
            Then, the files are merged into the live filesystem, and the installed 
            files' md5 digests are recorded in <filename>/var/db/pkg/[category]/[package]-[version-rev]/CONTENTS</filename>
            . After all the files have been merged, the <function>pkg_postinst()</function> 
            function (if specified) is executed.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">merge</replaceable></term>
        <listitem>
          <para>
            Normally, to merge an ebuild, you need to <command>fetch</command>, <command>unpack</command>,
            <command>compile</command>, <command>install</command> and <command>qmerge</command>.
            If you're simply interested in merging the ebuild, you can use this command, which will 
            perform all these steps for you, stopping along the way if a particular step doesn't complete successfully. 
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">remerge</replaceable></term>
        <listitem>
          <para>
            Normally, you're not allowed to merge an ebuild when you have the exact same version 
            (down to the revision) already installed.  This command performs the same function 
            as the <command>merge</command> command, with the exception that it allows
            you to merge even if the exact same package is already on the system.
          </para>
          <note><para>Obsolte/dropped in portage 1.5</para></note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">unmerge</replaceable></term>
        <listitem>
          <para>
            This function first executes the <function>pkg_prerm</function> function (if specified.) 
            Then it removes all files from the live filesystem that have a valid md5 checksum and mtime 
            in the package contents file.  Any empty directories are recursively removed.
            Finally, it runs <function>pkg_postrm</function> function (if specified.) It is safe to merge
            a new version of a package first and then unmerge the old one; in fact, this is the recommended
            package upgrade method.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">package</replaceable></term>
        <listitem>
          <para>
            This command is a lot like the <command>merge</command> command, except that after fetching, 
            unpacking, compiling and installing, a <filename>.tbz2</filename> binary package tarball is 
            created and stored in <filename>${PKGDIR}/All</filename> (<envar>PKGDIR</envar> defaults to 
            <filename>/usr/portage/packages</filename>).
          </para><para>
            A symbolic link is created in <filename>${PKGDIR}/[category]</filename> that points to the 
            package in <filename>${PKGDIR}/All</filename>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable class="parameter">rpm</replaceable></term>
        <listitem>
          <para>
            Builds a RedHat RPM package from the files in the temporary "install directory".
            At the moment, the ebuild's dependency information is not incorporated into the RPM.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  <refsect1>
    <title>AUTHORS</title>
    <para>
      <author>
        <firstname>Achim</firstname>
        <surname>Gottinger</surname>
        <affiliation><address><email>achim@gentoo.org</email></address></affiliation>
      </author>
    </para><para>
      <author>
        <firstname>Daniel</firstname>
        <surname>Robbins</surname>
        <affiliation><address><email>drobbins@gentoo.org</email></address></affiliation>
      </author>
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para>ebuild(5) make.defaults(5) make.conf(5)</para>
    <para>The <filename>/usr/sbin/ebuild</filename> script</para>
  </refsect1>
  <refsect1>
    <title>FILES</title>
    <para><filename>/etc/make.conf</filename>
      Contains variables for the build-process and overwrites those in make.default
    </para>
   <para><filename>/etc/make.defaults</filename>
      Contains the default variables for the build-process, you should edit <filename>/etc/make.conf</filename> instead.  
    </para>    
  </refsect1>
</refentry>

