<?xml version='1.0'?>

<guide>
<title>Gentoo Linux HOWTO</title>
<author title="Author"><mail link="pete@gentoo.org">Peter Gavin</mail></author>
<abstract>This document is a work in progress, and is constantly being
updated and changed. It is by no means complete.</abstract>

<version>0.51</version>
<date>9 Apr 2001</date>

<!--

Contents

I. Introduction
II. The Portage Tree
  A. What (Not) to Put in the Portage Tree
  B. Categories
  C. The files Directory
III. .ebuild Files
  A. Naming .ebuild Files
  B. Contents of an .ebuild File
  C. Rules for Writing an .ebuild File
IV. Filesystem Locations
  A. Introduction to the FHS
  B. How to Fit Your Packages into the Filesystem
V. The Portage Scripts and Utilities
  A. Public Scripts
  B. Private Scripts
VI. Package Dependencies
    
-->


<chapter>
<title>The Portage tree</title>

<section>
<title>Introduction</title>
<body><p>The portage tree is a heirarchy, in which the first level is the category,
and the second is the name of the package.
</p></body>
</section>

<section>
<title> What (not) to put in the Portage tree</title>
<body><p>The Portage tree should only include ebuild files, and other
files in the <path>files</path> directory for each package. Generally, no binary
files should be placed in the portage tree. No files that can
be downloaded from other sources (such as patches written by
other people) should be put here. No patches you write
yourself should be compressed.
</p></body>
</section>

<section>
<title>Categories</title>
<body><p>The categories are defined as follows:</p>
<table><tr><th>Category</th><th>Description</th></tr>
<tr><ti><path>app-admin</path></ti><ti>non-critical system administration utilities</ti></tr>
<tr><ti><path>app-arch</path></ti><ti>non-critical archival/compression utilities </ti></tr>
<tr><ti><path>app-cdr</path></ti><ti> CD recording utilities </ti></tr>
<tr><ti><path>app-doc</path></ti><ti>application documentation </ti></tr>
<tr><ti><path>app-editors</path></ti><ti>non-critical text editors </ti></tr>
<tr><ti><path>app-emulation</path></ti><ti>packages for emulating other systems/OSes </ti></tr>
<tr><ti><path>app-misc</path></ti><ti>applications that don't fit anywhere else </ti></tr>
<tr><ti><path>app-office</path></ti><ti>office-type (word processing, spreadsheet, etc.) packages </ti></tr>
<tr><ti><path>app-shells</path></ti><ti>non-critical shells and command interpreters </ti></tr>
<tr><ti><path>app-text</path></ti><ti>text processing, spell checkers, and document formatting packages </ti></tr>
<tr><ti><path>dev-db</path></ti><ti>database libraries </ti></tr>
<tr><ti><path>dev-java</path></ti><ti>java classes/packages/etc.  </ti></tr>
<tr><ti><path>dev-lang</path></ti><ti>compilers and interpreters for different languages </ti></tr>
<tr><ti><path>dev-libs</path></ti><ti>miscellaneous developer's libraries </ti></tr>
<tr><ti><path>dev-perl</path></ti><ti>perl modules </ti></tr>
<tr><ti><path>dev-python</path></ti><ti>python modules </ti></tr>
<tr><ti><path>dev-ruby</path></ti><ti>ruby modules </ti></tr>
<tr><ti><path>dev-util</path></ti><ti>various developers utilities </ti></tr>
<tr><ti><path>gnome-apps</path></ti><ti>applications for GNOME </ti></tr>
<tr><ti><path>gnome-base</path></ti><ti>base GNOME packages </ti></tr>
<tr><ti><path>gnome-libs</path></ti><ti>non-essential GNOME libraries </ti></tr>
<tr><ti><path>gnome-office</path></ti><ti>office packages for gnome </ti></tr>
<tr><ti><path>kde-apps</path></ti><ti>applications for KDE </ti></tr>
<tr><ti><path>kde-base</path></ti><ti>base KDE packages </ti></tr>
<tr><ti><path>kde-i18n</path></ti><ti>KDE internationalization packages </ti></tr>
<tr><ti><path>media-gfx</path></ti><ti>graphics-related programs </ti></tr>
<tr><ti><path>media-libs</path></ti><ti>  libraries for manipulating different media, including accessing multimedia peripherals of your computer (sound card, video card, etc.) </ti></tr>
<tr><ti><path>media-sound</path></ti><ti>programs related to sound, including cd-audio and sound encoding </ti></tr>
<tr><ti><path>media-video</path></ti><ti>programs related to video, including video codecs and players </ti></tr>
<tr><ti><path>net-analyzer</path></ti><ti>network usage statistics monitors/analyzers </ti></tr>
<tr><ti><path>net-dialup</path></ti><ti>network dialup clients and servers such as pppd </ti></tr>
<tr><ti><path>net-fs</path></ti><ti>network filesystems </ti></tr>
<tr><ti><path>net-ftp</path></ti><ti>ftp servers and clients </ti></tr>
<tr><ti><path>net-irc</path></ti><ti>irc servers and clients </ti></tr>
<tr><ti><path>net-libs</path></ti><ti>networking-related libraries </ti></tr>
<tr><ti><path>net-mail</path></ti><ti>MTAs and MUAs </ti></tr>
<tr><ti><path>net-misc</path></ti><ti>miscellaneous servers, clients, firewalls, etc. </ti></tr>
<tr><ti><path>net-nds</path></ti><ti>NIS/NIS+ and other network directory services </ti></tr>
<tr><ti><path>net-print</path></ti><ti>print servers and clients </ti></tr>
<tr><ti><path>net-www</path></ti><ti>http/www servers and clients </ti></tr>
<tr><ti><path>sys-apps</path></ti><ti>system-critical applications and utilities </ti></tr>
<tr><ti><path>sys-devel</path></ti><ti>base development packages, such as gcc and make </ti></tr>
<tr><ti><path>sys-kernel</path></ti><ti>Linux kernels and kernel source packages </ti></tr>
<tr><ti><path>sys-libs</path></ti><ti>system-critical libraries such as glibc </ti></tr>
<tr><ti><path>x11-base</path></ti><ti>base X packages, such as XFree86 and drivers for various video cards </ti></tr>
<tr><ti><path>x11-libs</path></ti><ti>widget sets and other X-specific libraries</ti></tr>
<tr><ti><path>x11-terms</path></ti><ti>X-based terminal emulators </ti></tr>
<tr><ti><path>x11-wm</path></ti><ti>X window managers </ti></tr>
</table>
</body>
</section>

<section>
<title>The files Directory</title>
<body><p>Under each package subdirectory is a <path>files</path> directory. You
should place any patches, configuration files, and other
auxillary files your package might require in this
directory. Patches you create yourself just to get your
package to build should be called <path>${PF}-gentoo.diff</path>. You
should not compress these diffs, since they should not be big
enough to require compressing, and cvs does not play well
with binary files.
</p><p>Please add a suffix or prefix such as <path>${PVR}</path> to the tail of every file you put into
the <path>files</path> directory, so that the files used for each
individual version of your ebuild scripts are distinguishable
from one another, and so that the changes between different
revisions are visible.
</p><p>If you have many files that should go into the files
directory, you should create a subdirectory <path>files/${PVR}</path>, and put all these files
in there. If you use this method, you do not need to suffix
the names of the files in this directory with the ebuild version.
</p></body>
</section>
</chapter>
	
<chapter>
<title>ebuild files</title>
<section>
<title>Introduction</title>
<body><p>ebuild files are the basis for the entire portage
system. They contain all the information required to build a
package, and every installed package requires one of these
files. ebuild files are essentially just bash scripts that
contain a few functions and environment variable settings. The
<c>ebuild</c> command takes care of the rest of the details, such as
merging the package into the filesystem and recording the
package into the package database.
</p></body>
</section>

<section>
<title>Naming ebuild Files</title>
<body><p>ebuild file names are in four sections:</p>
<p>The first section is the package name, which should only
contain lowercase letters, the digits 0-9, and hyphen ('-')
characters.
</p><p>The second section is the version of the package, which should
normally be the same as the version on the main source
tarball. The version is normally made up of two or three numbers
separated by periods, such as <c>1.2</c> or <c>4.5.2</c> (although very long period-separated number sequences <e>are</e> supported), and may have a
single letter immediately following the last digit, e.g., <c>1.4b</c>
or <c>2.6h</c>. This letter should <e>not</e> be used to signify alpha or
beta status for the package. There are four special suffixes that
may be used for these packages: <c>_alpha</c>, <c>_beta</c>, <c>_pre</c> and <c>_rc</c>. Each
of these suffixes may be immediately followed my a number,
e.g., <c>linux-2.4.0_pre10</c>.  Assuming identical version parts, an <c>_alpha</c> package is
older than <c>_beta</c>, <c>_beta</c> older than <c>_pre</c>, and <c>_pre</c> older than <c>_rc</c>.
An <c>_rc</c> package is older than a package without an underscore prefix (i.e. <c>linux-2.4.0</c>),
and <c>linux-2.4.0</c> is older than a package with a single letter prefix, i.e. <c>linux-2.4.0b</c>.
As you would expect, the <c>linux-2.4.0b</c> package is considered older than <c>linux-2.4.0c</c>.
All this versioning information is important, as Portage uses it internally to determine whether one package
or ebuild is newer than another with the same category and name.
</p>

<p>The third section of the package name is the Gentoo Linux-specific <e>revision</e> number,
which is specified by <c>-r#</c>, where <c>#</c> is a number,
e.g. <c>package-4.5.3-r3</c>. This revision number is independent of
the version of the source tarball, but if you need to make
non-trivial changes to your ebuild file, you should copy the
ebuild file to a new file with the revision number
incremented by 1. Initial releases normally have no revision
number, e.g. <c>package-4.5.3</c> and default to a revision of zero.

</p><p>The fourth section of the ebuild file name is always the
<c>.ebuild</c> extension.
</p></body>
</section>

<section>
<title>Contents of an ebuild File</title>
<body><p>1. Variable Settings:</p>
<p>The first part of every ebuild file is made up of a number of
variable settings. The variables you can set are:</p>
<table>
<tr><ti><c>P</c></ti><ti>the name name and version of the package; you should not need to set this, as it is determined from the name of the ebuild file</ti></tr>
<tr><ti><c>A</c></ti><ti>the name (without the path) of the main archive file for your package</ti></tr>
<tr><ti><c>S</c></ti><ti>the source directory for your package; normally ${WORKDIR}/${P}</ti></tr>
<tr><ti><c>DESCRIPTION</c></ti><ti>a short, one line description of your package</ti></tr>
<tr><ti><c>SRC_URI</c></ti><ti>the URIs for every source file in your package, separated by whitespace; normally the first one is something like &quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;</ti></tr>
<tr><ti><c>HOMEPAGE</c></ti><ti>your package's homepage</ti></tr>
<tr><ti><c>DEPEND</c></ti><ti>build dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
<tr><ti><c>RDEPEND</c></ti><ti>runtime dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
</table>
<p>2. ebuild Functions</p>
<p>There are a number of different functions that you can define in ebuild files that control the building and installation process of your package.</p>
<table>
<tr><ti><c>src_unpack</c></ti><ti>Use this function to unpack your sources and apply patches, and run autoconf/automake/etc. if necessary. By default, unpacks the packages in <c>${A}</c> and applies <c>${PF}-gentoo.diff</c>. The default starting directory is <c>${BUILDDIR}</c>.</ti></tr>
<tr><ti><c>src_compile</c></ti><ti>Use this function to configure and build the package. Default starting directory is <c>${S}</c>.</ti></tr>
<tr><ti><c>src_install</c></ti><ti>Use this function install the package to an image in <c>${D}</c>. If your package uses automake, you can do this simply with <c>make DESTDIR=${D} install</c>. <emph>Make sure your package installs all its files using <c>${D}</c> as the root!</emph></ti></tr>
<tr><ti><c>pkg_preinst</c></ti><ti>The commands in this function are run just prior to merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_postinst</c></ti><ti>The commands in this function are run just following merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_prerm</c></ti><ti>The commands in this function are run just prior to unmerging a package image from the filesystem.</ti></tr>
<tr><ti><c>pkg_postrm</c></ti><ti>The commands in this function are run just following unmerging a package image from the filesystem.</ti></tr>
</table>
</body>
</section>

<section>
<title>Rules for writing an ebuild File</title>
<body><p>Since ebuild files are really just shell scripts, you should use your editor's
shell-script mode for editing them. You should use proper indentation, using only tab characters --
no spaces. Make sure you set up your editor to put tabstops at 4 spaces. Always make sure you use braces around your environment variables; e.g. <c>${P}</c> instead of just <c>$P</c>.</p>
<p>TODO: add stuff about emacs &amp; vi.</p></body>
</section>
</chapter>

<chapter>
<title>Filesystem Locations</title>

<section>
<title>Introduction to the FHS</title>
<body>
<p>The filesystem standard used in Gentoo Linux is the FHS,
short for Filesystem Heirarchy Standard, version 2.0. A simplified
description of the standard is given here; for a complete
specification go to <uri>http://www.ibiblio.org/pub/Linux/docs/fhs/</uri>.</p>
</body>
</section>

<section>
<title>How to fit your packages into the filesystem</title>
<body><p>Usually, if the package uses autoconf and automake, the
default installation destinations are fine, with a few exceptions:</p>
<ul>
<li>most packages go into prefix <path>/usr</path>; X11 specific programs and libraries can go into prefix <path>/usr/X11R6</path>; GNOME packages go into <path>/opt/gnome</path>; and KDE packages go into <path>/opt/kde</path></li>
<li>man pages always go into <path>${prefix}/share/man</path>, not <path>${prefix}/man</path>; you can set this with <c>./configure --mandir=${prefix}/share/man</c></li>
<li>info pages always go into <path>${prefix}/share/info</path>, not <path>${prefix}/info</path>; you can set this with <c>./configure --mandir=${prefix}/share/info</c></li>
</ul>
</body>
</section>
</chapter>

<chapter>
<title>The Portage scripts and utilities</title>

<section>
<title>Public scripts</title>
<body><p>These are scripts used by the system-administrator to install and remove packages, and maintain the package database.</p>
<ul>
<li>ebuild - the main engine of the Portage system; performs all major tasks such as unpacking, compiling, installing, merging, and unmerging packages</li>
<li>emerge - recursively merges a package and all of its dependencies</li>
<li>pkgmerge - merges a pre-packaged .tbz2 file for a package</li>
</ul>
</body>
</section>

<section>
<title>Private Scripts and Commands</title>
<body><p>These are scripts you can use in your ebuild files to perform common tasks.</p>
<table>
<tr><ti>dobin</ti><ti></ti></tr>
<tr><ti>dodir</ti><ti></ti></tr>
<tr><ti>dodoc</ti><ti></ti></tr>
<tr><ti>doexe</ti><ti></ti></tr>
<tr><ti>dohard</ti><ti></ti></tr>
<tr><ti>doinfo</ti><ti></ti></tr>
<tr><ti>doins</ti><ti></ti></tr>
<tr><ti>dolib</ti><ti></ti></tr>
<tr><ti>dolib.a</ti><ti></ti></tr>
<tr><ti>dolib.so</ti><ti></ti></tr>
<tr><ti>doman</ti><ti></ti></tr>
<tr><ti>domo</ti><ti></ti></tr>
<tr><ti>donewins</ti><ti></ti></tr>
<tr><ti>dopython</ti><ti></ti></tr>
<tr><ti>dosbin</ti><ti></ti></tr>
<tr><ti>dosed</ti><ti></ti></tr>
<tr><ti>dosym</ti><ti></ti></tr>
<tr><ti>ebuild</ti><ti></ti></tr>
<tr><ti>ebuild.sh</ti><ti></ti></tr>
<tr><ti>emerge</ti><ti></ti></tr>
<tr><ti>env-update</ti><ti></ti></tr>
<tr><ti>find-packages</ti><ti></ti></tr>
<tr><ti>find-requires</ti><ti></ti></tr>
<tr><ti>fowners</ti><ti></ti></tr>
<tr><ti>fperms</ti><ti></ti></tr>
<tr><ti>import-configsettings</ti><ti></ti></tr>
<tr><ti>import-settings</ti><ti></ti></tr>
<tr><ti>megadigest</ti><ti></ti></tr>
<tr><ti>megadownload</ti><ti></ti></tr>
<tr><ti>megatouch</ti><ti></ti></tr>
<tr><ti>newbin</ti><ti></ti></tr>
<tr><ti>newdoc</ti><ti></ti></tr>
<tr><ti>newexe</ti><ti></ti></tr>
<tr><ti>newins</ti><ti></ti></tr>
<tr><ti>newlib.a</ti><ti></ti></tr>
<tr><ti>newlib.so</ti><ti></ti></tr>
<tr><ti>newman</ti><ti></ti></tr>
<tr><ti>newsbin</ti><ti></ti></tr>
<tr><ti>pkgmerge</ti><ti></ti></tr>
<tr><ti>pkgmerge.new</ti><ti></ti></tr>
<tr><ti>pkgname</ti><ti></ti></tr>
<tr><ti>pmake</ti><ti></ti></tr>
<tr><ti>portage-maintain</ti><ti></ti></tr>
<tr><ti>prepall</ti><ti></ti></tr>
<tr><ti>prepalldocs</ti><ti></ti></tr>
<tr><ti>prepallinfo</ti><ti></ti></tr>
<tr><ti>prepallman</ti><ti></ti></tr>
<tr><ti>try</ti><ti></ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Package Dependencies</title>

<section>
<title>Why dependencies are important</title>
<body><p>(TODO)<!-- todo -->
</p></body>
</section>

<section>
<title>How to Specify Dependencies in Your ebuild Files</title>
<body><p>(TODO)<!-- todo -->
</p></body>
</section>
</chapter>

</guide>
