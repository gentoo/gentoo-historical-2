<?xml version='1.0'?>
<guide>
<title>Gentoo Linux Installation Guide</title>
<author title="Chief Architect" email="drobbins@gentoo.org">Daniel Robbins</author>
<author title="Editor" email="thomasfl@gentoo.org">Thomas Flavel</author>

<abstract>This guide shows you how to install Gentoo Linux 1.0_rc4_pre2.  Right now,
Gentoo Linux installation is geared towards intermediate to advanced developers
and system administrators.  The process itself is not incredibly complex, but
you must know how to set up partitions, manually create filesystems, and
extract tarballs.  If you know how to do this, then you're ready to install the
Gentoo Linux release candidate.</abstract>

<version>1.0</version>
<date>18 Feb 2001</date>

<chapter link="chap1">
<title>Getting started</title>

<section>
<title>Install Methods</title>
<body>
<p>Rather than provide a special system installer program, we've chosen to provide
you with a real Linux shell prompt.  From this prompt, you can perform all the
steps necessary to install Gentoo Linux, and get everything set up exactly as
you need it.  People often ask whether we're going to provide a fancy install
program in the future.  Yes, we'd like to do this, but there will always be a
relatively simple "manual" install method for those who need it.  By having
a manual install method, we not only cater to Linux experts, but also make it
easy for people building a special-purpose product out of Gentoo Linux.  Because
our install process is "out in the open", it's easy for others to customize,
automate or beautify to their liking.
</p></body>
</section>

<section>
<title>Partition layout</title>
<body>
<p>Here's a quick overview of the standard Gentoo Linux partition layout.  We're going to create at
least three partitions: a swap partition, a root partition (to hold the bulk of Gentoo Linux), and a special boot
partition.  The boot partition is designed to hold GRUB boot loader information
as well as your Linux kernel(s).  The boot partition gives us a safe place to
store everything related to booting Linux. During normal day-to-day Gentoo
Linux use, your boot partition should remain <i>unmounted</i>.  This prevents
your kernel from being made unavailable to GRUB (due to filesystem corruption)
in the event of a system crash, preventing the chicken-and-egg problem where
GRUB can't read your kernel (since your filesystem is corrupted) but you can't
run fsck to uncorrupt your filesystem (since you can't boot!)      
</p>
</body>
</section>

<section>
<title>Partition Selection</title>
<body>
<p>Now, on to filesystem types.  We recommend that you install Gentoo Linux on a
ReiserFS filesystem because they're much faster and generally more reliable
than their ext2 counterparts.  We've been using ReiserFS for a long time now
and we believe it's not only "stable enough", but perfect for use in production
environments.  However, if you want to use ext2 for your root and boot
filesystems, we support this as well.  Support will likely be added for JFS in
the near future, as well as XFS - as soon as it's ready.  Here are our recommended
filesystem sizes and types:</p>

  <table border="1"><tr border="0"><td><b>Partition</b></td><td><b>Size</b></td><td><b>Type</b></td></tr>
  <tr><td>boot partition, containing kernel(s) and boot information</td><td>~100 Megabytes</td><td>ReiserFS recommended, ext2 ok</td></tr>
  <tr><td>root partition, containing main filesystem (/usr, /home, etc)</td><td>&gt;=1.5 Gigabytes</td><td>ReiserFS recommended, ext2 ok</td></tr>
  <tr><td>swap partition (no longer a 128 Megabyte limit)</td><td>&gt;=128 Megabytes</td><td>Linux swap</td></tr>
  </table>
</body>
</section>

<section>
<title>Getting What You Need</title>
<body><p>
In this install guide, I'm going to be stepping you through the Gentoo
Linux CD-based installation process.  To perform the CD install, you'll
need the Gentoo Linux 1.0_rc4_pre2 CD ISO image, available <a
href="http://www.ibiblio.org/gentoo/gentoo-iso-images/">here</a> (~550Mb download.)
It's also possible to install Gentoo Linux from an existing Linux
installation.  If you'd like to do this instead, you'll need to
download the 1.0_rc4_pre2 sys.tbz2 file, available from <a
href="http://www.ibiblio.org/gentoo/gentoo-x86-distro/gentoo-1.0_rc4_pre2/packages">here</a> (~67Mb download.)
If you choose to install Gentoo Linux from another Linux distribution, you'll
need to have the tools to unpack a bzip'd tarball (nearly all distributions do.)  However,
at this time, most distributions don't have the ability to create and mount ReiserFS
partitions.  If you don't have this ability, you may need to ReiserFS-enable your
current system if you'd like to use ReiserFS.  Another possibility is to use
ext2 filesystems for Gentoo Linux, or alternatively just download and burn our
CD image, which has all the tools you need for ReiserFS.    
</p>
</body>
</section>

</chapter>
<chapter link="chap2">
<title>Installation</title>

<section>
<title>Booting the CD</title>
<body>
<p>
Once you've downloaded the ISO image and burned your own Gentoo Linux CD, go ahead
and boot your system from the CD.  You'll be presented with a GRUB menu that looks
like this:
</p>
<p>
<img src="install-boot.gif"/>
</p>
<p>
Go ahead and select the first option to continue the CD boot process.  Linux will boot and the Gentoo
Linux CD detector will start up and detect and mount a minimal Gentoo Linux system included
on the CD.  When the boot process is complete, you'll be presented with a login prompt.  To
log in, go ahead and type "<code>root</code>" and hit Enter.  You won't be prompted for a password.  
</p>
</body>
</section>

<section>
<title>Step 1: Create and Format Your Partitions</title>
<body>
<p>
The first step is to create your boot, root (plus optional /home, /usr, /var)
and swap partitions using fdisk (type "<code>fdisk /dev/hd?</code>" to start it up.)  Your
boot and root partition should be tagged as a "Linux" partitions (type 83) even
if you're using ReiserFS.  Your swap partition should be tagged as "Linux swap"
(type 82).  Here's a screenshot of an example partition layout.  In this
example, /dev/hda1 is the boot partition (256Mb), /dev/hda2 is the swap
partition (256Mb), and /dev/hda3 is the root partition (1.5Mb).  Notice that
/dev/hda1 has the bootable flag set (you can set this with the "a" option.)
Once you've created your partitions, remember to write your changes with the
"w" option.
</p><p>
<img src="install-fdisk.gif"/>
</p>                     
</body>
</section>

<section>
<title>Step 2: Create and Mount Filesystems</title>
<body>
<p>
The second step is to create your filesystems.  Use the commands <code>mke2fs</code>, <code>mkreiserfs</code> and <code>mkswap</code> for this.  For example, to create
a new ReiserFS filesystem on the partition /dev/hda1, type:
</p><pre>
# mkreiserfs /dev/hda1</pre>

<p>For my example partition layout above, I typed in the following commands:
</p>

<pre>
# mkreiserfs /dev/hda1
# mkswap /dev/hda2
# mkreiserfs /dev/hda3
</pre><p>
Now that the filesystems have been created, it's time to get your boot and root (and optionally your /var, /usr and /home partitions) mounted.
For my example partition layout, I typed in the following:
</p><pre>
# mount /dev/hda3 /mnt/gentoo
# mkdir /mnt/gentoo/boot
# mount /dev/hda1 /mnt/gentoo/boot -o notail
</pre><p>(note: the "notail" option is required if you're installing GRUB as a secondary boot loader.  It also doesn't hurt to include it if you're not.)
</p>

<p>Notice that I had to create the /mnt/gentoo/boot filesystem before mounting /dev/hda1.  If you've created
additional non-root filesystems (/var, /usr, /home, etc), you'll need to create the appropriate directories under /mnt/gentoo
and then mount all your filesystems at the correct locations.  Once all your filesystems are mounted, we're ready to extract
the sys.tbz2 tarball - the file that contains the Gentoo Linux base system.
</p>

<p><b>Note for those installing from an existing Linux distro:</b><br/>
If you're installing from an existing Linux distribution, make sure that all your filesystems are mounted at the /mnt/gentoo
mountpoint just like I described above.  From this point on, you should be able to follow our install instructions word for
word.
</p>     
</body>
</section>


<section>
<title>Step 3: Extract the sys.tbz2 Tarball</title>
<body>
<p>
Now, it's time to extract the sys.tbz2 tarball to /mnt/gentoo.
You'll find the tarball at /mnt/distcd/packages/sys.tbz2.
Extract it by typing:</p>
<pre>
# tar xjvf /mnt/distcd/packages/sys.tbz2 -C /mnt/gentoo
</pre><p>
If you're installing from another Linux distribution and your version of tar doesn't have the -j (bzip2) option, the following
pipeline should do the exact same thing:
</p><pre>
# cat /path/to/sys.tbz2 | bzip2 -d | tar -xvf - -C /mnt/gentoo
</pre>                                                         
</body>
</section>
</chapter>



<chapter link="chap3">
<title>Configuration</title>
<section>
<title>Configure the system</title>
<body><p><font color="#FF0000">Note: If you want to compile a custom kernel during the install process, them before proceeding with the
following instructions, copy the linux-sources tbz2 file from /mnt/distcd/packages/All/linux-sources-???.tbz2 to /mnt/gentoo/tmp.
Then, proceed with these instructions.  I'll let you know when it's time to merge it.</font>
</p>

<p>Now that the base system tarball has been extracted, we need to get the system ready for booting.  Begin this process
by typing:
</p><pre>
# chroot /mnt/gentoo
</pre><p>The chroot command will start a new shell with the root filesystem set to /mnt/gentoo.  
If you have a non-US keyboard, you've probably noticed that some keys aren't in the right place.  This can be fixed by
typing:
</p><pre>
# loadkeys [keymap]
</pre><p>Replace [keymap] with the name of your preferred keymap from /usr/share/keymaps.  If you have a German keyboard, you should
use "de-latin1-nodeadkeys".  Please <a href="mailto:drobbins@gentoo.org">email me</a> the keymaps that you use for your
preferred language so that I can add them to this document.  Now, type the following commands:
</p><pre>
# env-update
# /etc/rc.d/init.d/initscripts-install
</pre><p>The first command, env-update, is a special Gentoo Linux command that auto-generates the /etc/ld.so.conf file and configures
the default shell environment variable and path settings.  The second script will configure Gentoo Linux initialization scripts,
so that all the proper symlinks are in place in /etc/rc.d so that the system will boot.
</p>

<p>There are just a few files that need to be configured before we're ready to install the Gentoo Linux boot loader (GRUB) and
start Gentoo Linux.  Right now, the only editor included with the base system is "vi".  In the next release, we're also going
to include another text editor that's easier to use for those who don't know vi.  If you don't know how to use vi, here are
some quick instructions.  To edit a file, type "<code>vi filename</code>".  Immediately after vi loads the file, press the "i" key to enter
INSERT mode.  In this mode, you'll be able to move around in the file by using the arrow keys, and you'll be able to insert
text just by typing it and delete text with the backspace or delete key.  If you need to delete an entire line, press escape
to leave INSERT mode (you're now in command mode), and hit "dd".  Then, hit "i" again to go back to insert mode.  When you need
to save your changes, hit escape to leave INSERT mode and type "<code>:x</code>".  If you want to throw away your changes, type "<code>:q!</code>".
Vim, the version of vi that's included with Gentoo Linux, also includes extensive help.  You can type "<code>:help</code>" (in command mode)
to access it.</p>
</body>
</section>

<section>
<title>/etc/fstab</title>
<body>
<p>Edit this file, making sure that the partition names and filesystem types are correct.  Here are the
first three configuration lines for my example system configuration:
</p><pre>
/dev/hda3       /         reiserfs        defaults         1 1
/dev/hda2       none      swap            sw               0 0
/dev/hda1       /boot     reiserfs        noauto,notail    0 2
</pre>
</body>
</section>

<section>
<title>/etc/localtime</title>
<body>
<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in /usr/share/zoneinfo.  Then, make a symbolic link by typing:
</p><pre>
# cd /etc; ln -sf /usr/share/zoneinfo/path/to/timezonefile localtime
</pre>
</body>
</section>

<section>
<title>/etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. "mymachine.mydomain.com" (without the quotes).
</p>
</body>
</section>

<section>
<title>/etc/resolve.conf</title>
<body>
<p>This file contains DNS server and domain information.  Here's a template to follow:
</p><pre>
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file:
</p><pre>
127.0.0.1	localhost
# the next line contains your IP for your local LAN, and your associated machine name
192.168.1.1	mymachine.mydomain.com	mymachine
</pre>
</body>
</section>

<section>
<title>Configure ethernet</title>
<body>
<p>Look in the /etc/rc.d/config directory; you'll see a file called OFF_inet.eth0.  Copy this file to inet.eth0, and edit
the top part of it so that it contains the IP address settings you want to use on your first ethernet card.  Look in /lib/modules for the ethernet module specific to your particular ethernet card,
and append it to the /etc/rc.d/config/modules file (you can also add any options you need to the same line.)  Then, when Gentoo Linux boots, this module will be automatically loaded from disk.  If you have multiple network cards, 
copy inet.eth0 to inet.eth1 and edit this file so that it configures your second interface correctly.  Repeat for eth2, etc as necessary.  If you have a static ppp link, you can copy the inet.eth0 file to inet.ppp0, and insert the appropriate commands in the
netup() and netdown() functions.  All /etc/rc.d/config/inet.* files will be started automatically at boot time by the /etc/rc.d/init.d/inet rc script.
</p>
</body>
</section>

<section>
<title>Configure basic settings</title>
<body>
<p>Take a look at the /etc/rc.d/config/basic, and make sure that it's set up properly.  Important settings are GMT
(set to "yes" if your system clock is set to GMT, otherwise "no" if it's set to your local time) and KEYMAP (look in 
/usr/share/keymaps/i386/qwerty,dvorak,etc. for available keymaps.  To specify the keymap, set KEYMAP to the *prefix*
of the keymap filename (i.e. drop the ".kmap.gz" extension from the end.)
</p>
</body>
</section>

<section>
<title>Configure GRUB</title>
<body>
<p>
The most critical part of understanding GRUB is getting comfortable with how GRUB refers to hard drives and partitions.
Your Linux partition /dev/hda1 is called (hd0,0) under GRUB.  Notice the parenthesis around the hd0,0 - they are required.  
Hard drives count from zero rather than "a", and partitions start at zero rather than one.  So, /dev/hdb3 gets translated to (hd1,2), and /dev/hdd7 gets translated to (hd3,6).  After you've gotten the feel for that, convert your boot and root partition names to the GRUB format and write them down.  Now, it's time to install GRUB.
</p>

<p>The easiest way to install grub is to simply type "<code>grub</code>" at your chrooted shell prompt:
</p><pre>
# grub
</pre><p>You'll be presented with the "grub&gt; " grub command-line prompt.  Now, you need to type in the
right commands to install the GRUB boot record onto your hard drive.  In my example configuration,
I want to install the GRUB boot record on my hard drive's MBR (master boot record), so that 
the first thing I see when I turn on the computer is the GRUB prompt.  In my case, the commands
I want to type are:</p><pre>grub&gt; root (hd0,0)
grub&gt; setup (hd0)
</pre>

<p>Here's how the two commands work.  The first "root ( )" command tells GRUB
the location of your boot partition (in my case, hda1 or in GRUB terminology
(hd0,0)).  Then, the second "setup ( )" command tells GRUB where to install the
boot record - it will be configure to look for its special files at the "root
( )" location that you specified.  In my case, I want the boot record on the
MBR of the hard drive, so I simply specify hda ((hd0)).  If I were using
another boot loader and wanted to set up GRUB as a secondary boot-loader, I
could install GRUB to the boot record of a particular partition.  In that case,
I'd specify a particular partition rather than the entire disk.  Once the GRUB
boot record has been 
successfully installed, you can type "quit" to quit GRUB.  Gentoo Linux is
installed, but we need to create the /boot/boot/grub/menu.lst file so that
we get a nice GRUB boot menu when the system reboots.  Here's how to do it.</p>

<p>Now, create the menu.lst file ("<code>vi /boot/boot/grub/menu.lst</code>"), and add the following to it:</p>
<pre>
default 0
timeout 30

title=My example Gentoo Linux
root (hd0,0) <font color="#FF0000">(note: (hd0,0) should point to your "boot" partition (hda1 in my case)</font>
kernel /boot/bzImage root=/dev/hda3 <font color="#FF0000">(note: /dev/hda3 should point to your "root" filesystem)</font>

title=Windows NT Workstation
root (hd0,2) <font color="#FF0000">(note: (hd0,2) contains the NT boot loader)</font>
</pre><p>After saving this file, Gentoo Linux installation is complete.  Selecting the first option will
tell GRUB to boot Gentoo Linux without a fuss.  The second part of the menu.lst file is optional, and shows you how to
use GRUB to boot a bootable Windows partition.</p>

<p>Also, if you need to pass any options to the kernel, simply add them to the end of the "kernel" command.  We're already
passing one option "root=/dev/hda3", but you can pass others as well.  There's one in particular that you may be interested
in.  If you want to enable devfs (a special device filesystem), you can add the "devfs=mount" option at the end of the kernel
line.
</p>
</body>
</section>

<section>
<title>One Last Step</title>
<body>
<p>If you copied over the linux-sources-???.tbz2 file, you can now install the package and compile a fresh new
kernel.  To merge the linux-sources, type "<code>pkgmerge /tmp/linux-sources-???.tbz2</code>".  After the merge completes,
you can remove the .tbz2 from /tmp and continue with the kernel compile step.  If you didn't copy over the
linux sources, you can skip the kernel compile step and proceed unmounting your filesystems below.</p>
<p>To compile your own kernel, perform the following steps:</p><pre>
# cd /usr/src/linux
# make menuconfig <font color="#FF0000">(Note: make sure you compile-in support for ReiserFS as well as your boot drive controller)</font>
# make bzImage
# make modules
# make modules_install
# cp arch/i386/boot/bzImage /boot/boot <font color="#FF0000">(Note: the "/boot/boot" is intentional and should not simply be "/boot")</font>
</pre>

<p>Now, Gentoo Linux is installed.  The only remaining step is to exit the chrooted shell, safely unmount your partitions
and reboot the system:</p>
<pre>
# exit <font color="#FF0000">(note: this exits the chrooted shell; you can also type <code>^D)</code></font>
# umount /mnt/gentoo/boot
# umount /mnt/gentoo
# reboot
</pre>
</body>
</section>

</chapter>

<chapter link="chap4">
<title></title>
<section>
<title>Congratulations!</title>
<body><p>If you have any questions or would like to get involved with Gentoo Linux development, 
consider joining our gentoo-dev mailing list (there's a "click to subscribe" link on our <a href="http://www.gentoo.org">main page</a>).
</p>
</body>
</section>
</chapter>
</guide>
