<?xml version='1.0'?>
<mainpage id="download">
<title>Gentoo Linux 1.0_rc5 Installation</title>
<author title="Chief Architect"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Editor"><mail link="thomasfl@gentoo.org">Thomas Flavel</mail></author>

<standout>
<title>Important News</title>
<body>

<e>Gentoo Linux 1.0_rc5 has been released!</e>  You can find the release at
<uri>http://www.ibiblio.org/gentoo/releases/1.0_rc5</uri>.  Currently, our
binary CD (620Mb) is built with i686 optimizations, meaning that you need a P6 core or
greater to use it.  If you have a Pentium Pro/II/III/4 or
Athlon/Duron, then you're all set.  You can find installation instructions
below.  This install procedure has been independently
tested and works.  We also have a 42Mb build image that will run on any type of
processor (486 and up); however, we do not have installation instructions for it
yet.  As soon as solid, tested install instructions are available, we'll post them
here.  Enjoy Gentoo Linux 1.0_rc5 and if you have any questions, please post them
to <mail link="gentoo-dev@gentoo.org">the gentoo-dev mailing list</mail> or stop by
#gentoo on irc.openprojects.net.
</body>
</standout>

<version>2.1</version>
<date>30 Jun 2001</date>

<chapter>
<title>About the Install</title>
<section>
<body>

<p>The Gentoo Linux 1.0_rc5 ISO release is based upon a new <c>isolinux</c>-based
boot process.  This new boot CD will boot from nearly any modern IDE CD-ROM drive,
as well as almost any modern SCSI CD-ROM.  We've included support for the following
SCSI controllers: Adaptec (all), Buslogic (all), Initio, ICP Vortex, IBM ServeRAID,
NCR, Symbios, Tekram and more.  Pretty much any modern SCSI controller should be
supported.</p>

<p>Right now, the best way to install Gentoo Linux is to use our i686-specific
binary CD, which is around 620Mb in size and is available at <uri>
http://www.ibiblio.org/gentoo/releases/1.0_rc5/isos/gentoo-i686-exclusive-bin-1.0_rc5-r3.iso</uri>.
To use this CD, you'll need a system with a P6 or P6-compatible core, such as a
Pentium Pro/II/III/4 or Athlon.  Our i586 binary CD will be available soon and
will support the AMD K6 and Pentium Classic processors.  Assuming you have a P6 or
P6-compatible core, you're ready to get Gentoo Linux 1.0_rc5 running on your 
system.</p>

</body>
</section>
</chapter>
<chapter>
<title>Download and burn</title>
<section>
<body>
<p>First, download and burn the ISO image (link above) and boot your system with the CD in the drive.  At
the <c>login:</c> prompt, type <c>root</c> and hit <e>Enter</e>.</p>
</body>
</section>
</chapter>
<chapter>
<title>Set up partitions</title>
<section>
<body>

<note>At this point, you should create your partitions, LVM logical volumes or
   software RAID volumes, as desired.  LVM is supported, and we will have 
   instructions on how to create an LVM initrd soon.  Until then, the LVM 
   option is only for the Sistina guys and those who are really LVM-saavy :)
   <c>fdisk</c> and <c>cfdisk</c> are at your disposal.  Make sure to format your swap
   partition using <c>mkswap</c>; we'll use this swap area in a bit.  Now,
   for a bit more detail about partition setup.
</note>

<p>Here's a quick overview of the standard Gentoo Linux partition layout.  We're going to create at
least three partitions: a swap partition, a root partition (to hold the bulk of Gentoo Linux), and a special boot
partition.  The boot partition is designed to hold GRUB boot loader information
as well as your Linux kernel(s).  The boot partition gives us a safe place to
store everything related to booting Linux. During normal day-to-day Gentoo
Linux use, your boot partition should remain <e>unmounted</e>.  This prevents
your kernel from being made unavailable to GRUB (due to filesystem corruption)
in the event of a system crash, preventing the chicken-and-egg problem where
GRUB can't read your kernel (since your filesystem isn't consistent) but you can't
bring your filesystem back to a consistent state (since you can't boot!)      
</p>

<p>Now, on to filesystem types.  We recommend that you install Gentoo Linux on
a ReiserFS root filesystem because they're much faster and generally more
reliable than their ext2 counterparts.  We've been using ReiserFS for a long
time now and we believe that with kernel 2.4.4, it's not only "stable enough",
but perfect for use in production environments.  However, if you want to use
ext2 for your root and boot filesystems, we support this as well.  Support will
likely be added for JFS in the near future, as well as XFS - as soon as it's
ready.  Here are our recommended filesystem sizes and types:</p>

  <table>
  <tr>
  	<th>Partition</th>
	<th>Size</th>
	<th>Type</th>
  </tr>
  <tr>
  	<ti>boot partition, containing kernel(s) and boot information</ti>
	<ti>~100 Megabytes</ti>
	<ti>ext2 or reiserfs, if reiserfs then mount with <c>-o notail</c></ti>
  </tr>
  <tr>
  	<ti>root partition, containing main filesystem (/usr, /home, etc)</ti>
	<ti>&gt;=1.5 Gigabytes</ti>
	<ti>ReiserFS recommended, ext2 ok</ti>
  </tr>
  <tr>
  	<ti>swap partition (no longer a 128 Megabyte limit)</ti>
	<ti>&gt;=128 Megabytes</ti>
	<ti>Linux swap</ti>
  </tr>
  </table>

<p>Once you've created your partitions using <c>fdisk</c> or <c>cfdisk</c>, be sure
to <c>mkswap /dev/????</c> (replace <c>????</c> with the device set aside for swap).
We'll need to activate this swap in just a bit.</p>

</body>
</section>
</chapter>
<chapter>
<title>Mount partitions</title>
<section>
<body>
<p>Now, mount your root partition to <path>/mnt/gentoo</path> and your boot partition to 
   <path>/mnt/gentoo/boot</path> (create these <path>/mnt</path> dirs first).  If you are setting up Gentoo
   Linux with a separate <path>/usr</path> or <path>/var</path>, these would get mounted to
   <path>/mnt/gentoo/usr</path> and <path>/mnt/gentoo/var</path>, respectively.
</p>
   <impo>If your <e>boot</e> partition (the one holding the kernel) is Reiserfs, be sure to mount it
   with the <c>-o notail</c> option so GRUB gets properly installed.  Make sure 
   that <c>notail</c> ends up in your new <path>/etc/fstab</path> boot partition entry, too.
   We'll get to that in a bit.</impo>
</body>
</section>
</chapter>
<chapter>
<title>Get ready</title>
<section>
<body>
<p>Now, it's time get everything ready for the package install.  Perform the following steps:</p>
<pre>
# <i>export ROOT=/mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/etc</i>
# <i>mkdir -p /mnt/gentoo/usr/portage</i>
# <i>mount --bind /usr/portage /mnt/gentoo/usr/portage</i>
# <i>ln -s /usr/portage/profiles/default /mnt/gentoo/etc/make.profile</i>
# <i>swapon /dev/<comment>hdxy</comment></i>	
</pre>
<p>Above, we set the <c>ROOT</c> environment variable to point to the base of where Gentoo Linux
will be installed, and then set up various directories in <path>/mnt/gentoo</path>, including
<path>etc</path> and <path>usr/portage</path>.  Then, we create a symbolic link required by 
Portage, and finally, we enable our swap with the <c>swapon</c> command.  You should replace the
<c>hdxy</c> string with the device name of your swap partition.  We need to enable swap at this
point because the next step requires a good amount of memory.</p>

</body>
</section>
</chapter>
<chapter>
<title>Go!</title>
<section>
<body>
<p>Now, type the following command to begin the package installation process:</p>
<pre>
# <i>emerge --usepkg system</i>
</pre>
<p>The <c>--usepkg</c> option tells Portage to use the packages on CD rather than attempting
to compile them from sources.</p>
</body>
</section>
</chapter>
<chapter>
<title>Here kernel. . .</title>
<section>
<body>
<p>OK; even if you'd like to custom-compile your own kernel from the bootcd
(yes, this is possible!) you need to emerge our default kernel package.  Everyone
should do this:</p>
<pre>
# <i>emerge /usr/portage/packages/All/linux-2.4.4.9.tbz2</i>
</pre>
<p>If you want to compile your own kernel, I'll show you how in a bit.</p>
</body>
</section>
</chapter>
<chapter>
<title>Do the chroot</title>
<section>
<body>
<p>Now it's time to <c>chroot</c> over to the new Gentoo Linux installation and initialize
the new Gentoo Linux environment:</p>
<pre>
# <i>mount --bind /mnt/cdrom/gentoo/packages /mnt/gentoo/usr/portage/packages</i>
# <i>mount --bind /proc /mnt/gentoo/proc</i>
# <i>chroot /mnt/gentoo</i>
# <i>rm /etc/make.profile</i>
# <i>ln -s /usr/portage/profiles/default /etc/make.profile</i>
# <i>unset ROOT</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
# <i>/etc/rc.d/init.d/initscripts-install</i>
</pre>
<p>After you execute these commands, you'll be "inside" your new Gentoo Linux environment,
ready to complete the installation process.  The Gentoo Linux packages from the CD are now
available at <path>/usr/portage/packages</path>.</p>
</body>
</section>
</chapter>
<chapter>
<title>Install packages, compile kernel (optional)</title>
<section>
<body>
<p>
You can now <c>emerge</c> any packages in <path>/usr/portage/packages/All</path> that you'd
like to install, for example:</p>
<pre>
# <i>emerge --usepkg /usr/portage/packages/All/xfree-4.1.0.tbz2</i>
</pre>
<p>This is completely optional at this point; you already have a basic console-based Linux
system, and you can always configure the rest of the system and reboot before installing
additional packages.  However, you may want to go ahead and compile your own custom kernel
at this point.  If you don't, a default kernel is already installed which should work just
fine.  Here's how to compile your own:</p>
<pre>
# <i>emerge /usr/portage/packages/All/linux-sources-2.4.4.9.tbz2</i>
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
# <i>make dep; make clean; make bzImage; make modules; make modules_install</i>
# <i>depmod -a</i>
# <i>cd /boot/boot</i>
# <i>mv bzImage bzImage.orig</i>
# <i>cp /usr/src/linux/arch/i386/boot/bzImage .</i>
</pre>
<p>
Your new custom kernel (and modules) are now installed.
</p>
</body>
</section>
</chapter>
<chapter>
<title>Final configuration</title>
<section>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All we need to do now is configure
a few important system files and install the GRUB boot loader.  The <c>vim</c> editor is 
available for editing these files; we'll be adding an additional easier-to-use simple editor for 1.0_rc6. The first file we need to
configure is <path>/etc/fstab</path>.  Here's an example file; remember that you should use
the <c>notail</c> option for your boot partition if you created a Reiserfs filesystem on it:</p>
<pre>
<comment># /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.
#
# &lt;fs&gt;          &lt;mountpoint&gt;    &lt;type&gt;  	&lt;opts&gt;      		&lt;dump/pass&gt;
</comment>
/dev/hda1	/boot		ext2		noauto,noatime		1 1
/dev/hda2	/		reiserfs	notail,noatime		0 0
/dev/hda3	none            swap		sw			0 0
/dev/hdc	/mnt/cdrom	iso9660		noauto,ro		0 0
<comment>
# /proc should always be enabled
# /proc/bus/usb should be enabled if you need usb support
# no /dev devfs line is needed; mounting /dev is done by our devfs initscript
</comment>
proc		/proc           proc		defaults		0 0
none		/proc/bus/usb	usbdevfs	defaults		0 0
<comment>
# The following are optional; /dev/pts isn't needed for devfs; /dev/shm is
# an example only (shm is a dynamically expandable/shrinkable ramdisk

#none		/dev/pts	devpts		mode=620		0 0
#shm		/dev/shm	shm		defaults		0 0
</comment>
</pre>


</body>
</section>
<section>
<title>/etc/localtime</title>
<body>
<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:
</p><pre>
# <i>cd /etc; ln -sf /usr/share/zoneinfo/path/to/timezonefile localtime</i>
</pre>
</body>
</section>

<section>
<title>/etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>.
</p>
</body>
</section>

<section>
<title>/etc/resolv.conf</title>
<body>
<p>This file contains DNS server and domain information.  Here's a template to follow:
</p><pre>
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file:
</p><pre>
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>
</body>
</section>

<section>
<title>Configure ethernet</title>
<body>

<p>Look in the <path>/etc/rc.d/config</path> directory; you'll see a file
called <path>OFF_inet.eth0</path>.  Copy this file to <path>inet.eth0</path>, and edit the top part of it
so that it contains the IP address settings you want to use on your first
ethernet card.  
(If you dynamically obtain your IP address from DHCP then instead 
copy <path>OFF_inet.dhcp_eth0</path>
to <path>inet.dhcp_eth0</path>.  No editing should be required.)
Look in <path>/lib/modules</path> for the ethernet module
specific to your particular ethernet card, and append it to the
<path>/etc/rc.d/config/modules</path> file (you can also add any options you
need to the same line.)  Then, when Gentoo Linux boots, this module will be
automatically loaded from disk.  If you have multiple network cards, copy
<path>inet.eth0</path> to <path>inet.eth1</path> and edit this file so that it
configures your second interface correctly.  Repeat for eth2, etc as necessary.
If you have a static ppp link, you can copy the <path>inet.eth0</path> file to
<path>inet.ppp0</path>, and insert the appropriate commands in the
<c>netup()</c> and <c>netdown()</c> functions.  All
<path>/etc/rc.d/config/inet.*</path> files will be started automatically at
boot time by the <path>/etc/rc.d/init.d/inet</path> rc script.  </p>

</body>
</section>

<section>
<title>Configure basic settings</title>
<body>

<p>Take a look at the <path>/etc/rc.d/config/basic</path>, and make sure that it's set up properly.  Important settings are GMT
(set to <c>yes</c> if your system clock is set to GMT, otherwise <c>no</c> if it's set to your local time) and KEYMAP (look in 
<path>/usr/share/keymaps/i386</path> for available keymaps.  To specify the keymap, set KEYMAP to the <e>prefix</e>
of the keymap filename (i.e. drop the <path>.kmap.gz</path> extension from the end.)
</p>

</body>
</section>

<section>
<title>Configure GRUB</title>
<body>
<p>
The most critical part of understanding GRUB is getting comfortable with how GRUB refers to hard drives and partitions.
Your Linux partition <path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB.  Notice the parenthesis around the hd0,0 - they are required.  
Hard drives count from zero rather than "a", and partitions start at zero rather than one.  So, <path>/dev/hdb3</path> gets translated to <path>(hd1,2)</path>, and <path>/dev/hdd7</path> gets translated to <path>(hd3,6)</path>.  After you've gotten the feel for that, convert your boot and root partition names to the GRUB format and write them down.  Now, it's time to install GRUB.
</p>

<p>The easiest way to install grub is to simply type <c>grub</c> at your chrooted shell prompt:
</p><pre>
# <i>grub</i>
</pre><p>You'll be presented with the <c>grub&gt;</c> grub command-line prompt.  Now, you need to type in the
right commands to install the GRUB boot record onto your hard drive.  In my example configuration,
I want to install the GRUB boot record on my hard drive's MBR (master boot record), so that 
the first thing I see when I turn on the computer is the GRUB prompt.  In my case, the commands
I want to type are:</p>
<pre>grub&gt; <i>root (hd0,0)</i>
grub&gt; <i>setup (hd0)</i>
</pre>

<p>Here's how the two commands work.  The first <c>root ( )</c> command tells GRUB
the location of your boot partition (in my case, <path>/dev/hda1</path> or 
<path>(hd0,0)</path> in GRUB terminology.  Then, the second <c>setup ( )</c> command tells GRUB where to install the
boot record - it will be configure to look for its special files at the <c>root
( )</c> location that you specified.  In my case, I want the boot record on the
MBR of the hard drive, so I simply specify <path>/dev/hda</path> (also known as <path>(hd0)</path>).  If I were using
another boot loader and wanted to set up GRUB as a secondary boot-loader, I
could install GRUB to the boot record of a particular partition.  In that case,
I'd specify a particular partition rather than the entire disk.  Once the GRUB
boot record has been 
successfully installed, you can type <c>quit</c> to quit GRUB.  Gentoo Linux is
installed, but we need to create the <path>/boot/boot/grub/menu.lst</path> file so that
we get a nice GRUB boot menu when the system reboots.  Here's how to do it.</p>

<p>Now, create the menu.lst file (<c>vi /boot/boot/grub/menu.lst</c>), and add the following to it:</p>
<pre>
default 0
timeout 30

title=My example Gentoo Linux
root (hd0,0) 
kernel /boot/bzImage root=/dev/hda2 

title=Windows NT Workstation
root (hd0,2) 
chainloader +1
</pre><p>After saving this file, Gentoo Linux installation is complete.  Selecting the first option will
tell GRUB to boot Gentoo Linux without a fuss.  The second part of the menu.lst file is optional, and shows you how to
use GRUB to boot a bootable Windows partition.</p>

<note>Above, <path>(hd0,0)</path> should point to your "boot" partition
(<path>/dev/hda1</path> in my case) and <path>/dev/hda2</path> should point to
your root filesystem.  <path>(hd0,2)</path> contains the NT boot
loader.</note> <p>Also, if you need to pass any options to the kernel, simply
add them to the end of the <c>kernel</c> command.  We're already passing one option
(<c>root=/dev/hda2</c>), but you can pass others as well.  
<!--
There's one in particular
that you may be interested in.  If you want to enable devfs (a special device
filesystem), you can add the <c>devfs=mount</c> option at the end of the <c>kernel</c>
line.  
-->
<note>Unlike in earlier versions of Gentoo Linux, you no longer have to add 
<c>devfs=mount</c> to the end of the <c>kernel</c> line to enable devfs.  In rc5
devfs is enabled by default.
</note>
</p>

</body>
</section>
</chapter>
<chapter>
<title>Installation complete!</title>
<section>
<body>
<p>Now, Gentoo Linux is installed.  The only remaining step is to exit the chrooted shell, safely unmount your partitions
and reboot the system:</p>
<pre>
# <i>exit</i> 
<codenote>This exits the chrooted shell; you can also type <c>^D</c></codenote>
# <i>umount /mnt/gentoo/boot</i>
# <i>umount /mnt/gentoo</i>
# <i>reboot</i>
</pre>
<p>If you have any questions or would like to get involved with Gentoo Linux development, 
consider joining our gentoo-dev mailing list (there's a "click to subscribe" link on our <uri link="http://www.gentoo.org">main page</uri>).
</p>
</body>
</section>
</chapter>
</mainpage>
