--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -236,8 +236,8 @@ def lars_path(X, y, Xy=None, Gram=None,
                 L_.flat[::n_active + 1] += (2 ** i) * eps
                 least_squares, info = solve_cholesky(L_,
                                     sign_active[:n_active], lower=True)
-                AA = 1. / np.sqrt(np.sum(least_squares
-                                         * sign_active[:n_active]))
+                tmp = max(np.sum(least_squares * sign_active[:n_active]), eps)
+                AA = 1. / np.sqrt(tmp)
                 i += 1
         least_squares *= AA
 
--- a/sklearn/linear_model/tests/test_least_angle.py
+++ b/sklearn/linear_model/tests/test_least_angle.py
@@ -101,6 +101,13 @@ def test_collinearity():
     assert_true(not np.isnan(coef_path_).any())
     residual = np.dot(X, coef_path_[:, -1]) - y
     assert_less((residual ** 2).sum(), 1.)  # just make sure it's bounded
+    
+    n_samples = 10
+    X = np.random.rand(n_samples, 5)
+    y = np.zeros(n_samples)
+    _, _, coef_path_ = linear_model.lars_path(X, y, Gram='auto', copy_X=False, 
+         copy_Gram=False, alpha_min=0., method='lasso', verbose=0, max_iter=500)
+    assert_array_almost_equal(coef_path_, np.zeros_like(coef_path_))
 
 
 def test_no_path():
