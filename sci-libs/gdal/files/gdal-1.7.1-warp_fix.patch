--- alg/gdalwarper.cpp.orig	2010-04-11 19:20:16.985645233 -0700
+++ alg/gdalwarper.cpp	2010-04-11 19:22:02.711324130 -0700
@@ -697,6 +697,14 @@
  * to enable ALL_TOUCHEd mode when rasterizing cutline polygons.  This is
  * useful to ensure that that all pixels overlapping the cutline polygon
  * will be selected, not just those whose center point falls within the 
+ *
+ * - OPTIMIZE_SIZE: This defaults to FALSE, but may be set to TRUE when
+ * outputing typically to a compressed dataset (GeoTIFF with COMPRESSED creation
+ * option set for example) for achieving a smaller file size. This is achieved
+ * by writing at once data aligned on full blocks of the target dataset, which
+ * avoids partial writes of compressed blocks and lost space when they are rewritten
+ * at the end of the file. However sticking to target block size may cause major
+ * processing slowdown for some particular reprojections.
  * polygon.
  */
 
--- alg/gdalwarpoperation.cpp.orig	2010-04-11 19:11:35.921500930 -0700
+++ alg/gdalwarpoperation.cpp	2010-04-11 19:19:15.691577821 -0700
@@ -1000,16 +1000,21 @@
     if( dfTotalMemoryUse > psOptions->dfWarpMemoryLimit 
         && (nDstXSize > 2 || nDstYSize > 2) )
     {
+        int bOptimizeSize =
+                CSLFetchBoolean( psOptions->papszWarpOptions, "OPTIMIZE_SIZE", FALSE );
+
         /* If the region width is greater than the region height, */
-        /* cut in half in the width. Do this only if each half part */
+        /* cut in half in the width. When we want to optimize the size */
+        /* of a compressed output dataset, do this only if each half part */
         /* is at least as wide as the block width */
         if( nDstXSize > nDstYSize &&
-            (nDstXSize / 2 >= nBlockXSize || nDstYSize == 1) )
+            (!bOptimizeSize ||
+             (bOptimizeSize && (nDstXSize / 2 >= nBlockXSize || nDstYSize == 1))) )
         {
             int nChunk1 = nDstXSize / 2;
             
-            /* Try to stick on target block boundaries */
-            if (nChunk1 > nBlockXSize)
+            /* In the optimize size case, try to stick on target block boundaries */
+            if (bOptimizeSize && nChunk1 > nBlockXSize)
                 nChunk1 = (nChunk1 / nBlockXSize) * nBlockXSize;
             
             int nChunk2 = nDstXSize - nChunk1;
@@ -1026,12 +1031,13 @@
         else
         {
             int nChunk1 = nDstYSize / 2;
-            int nChunk2 = nDstYSize - nChunk1;
 
-            /* Try to stick on target block boundaries */
-            if (nChunk1 > nBlockYSize)
+            /* In the optimize size case, try to stick on target block boundaries */
+            if (bOptimizeSize && nChunk1 > nBlockYSize)
                 nChunk1 = (nChunk1 / nBlockYSize) * nBlockYSize;
 
+            int nChunk2 = nDstYSize - nChunk1;
+
             eErr = CollectChunkList( nDstXOff, nDstYOff, 
                                      nDstXSize, nChunk1 );
 
