--- partimage-0.6.4/src/client/main.cpp.pix	2004-02-04 01:57:36.000000000 +0100
+++ partimage-0.6.4/src/client/main.cpp	2005-01-24 13:46:19.388390009 +0100
@@ -142,6 +142,7 @@
   int nChoice;
   char szDevice[MAX_DEVICENAMELEN];
   char szImageFile[MAXPATHLEN];
+  char szImageDir[MAXPATHLEN];
   char szTemp[2048];
   char szTemp2[1024];
   char szTemp3[1024]; 
@@ -505,13 +506,17 @@
   if (argc - optind == 2) // commands with 1 parameter
     {
       showDebug(8, "full cmdline with 1 param\n"); 
-      strncpy(szImageFile, argv[optind+1], MAXPATHLEN);
-      
       if (strcmp(argv[optind], "restmbr")==0) // restore an MBR
 	nChoice = OPERATION_RESTMBR;
       else if (strcmp(argv[optind], "imginfo")==0)
 	// show informations about the imagefile
 	nChoice = OPERATION_IMGINFO;
+      else if (strcmp(argv[optind], "save_all")==0)
+	nChoice = OPERATION_SAVE_ALL;
+      else if (strcmp(argv[optind], "rest_all")==0)
+	nChoice = OPERATION_REST_ALL;
+
+      strncpy(nChoice == OPERATION_REST_ALL || nChoice == OPERATION_SAVE_ALL ? szImageDir : szImageFile, argv[optind+1], MAXPATHLEN);      
     }
   
   // check options
@@ -644,6 +649,38 @@
 	  nRes = -1;
 	}
       break;
+
+    case OPERATION_SAVE_ALL:
+      showDebug(1, "action=SAVE_ALL\n");
+      try { save_all(szImageDir, &options); }
+      catch (CExceptions *excep)
+	{
+          showDebug(1, "caught exception: %d\n", excep->GetExcept());
+
+	  if (!options.bBatchMode && !excep->getCaught())
+	    g_interface -> Error(excep, szImageFile);
+
+	  showDebug(1, "\nFINAL ERROR\n\n");
+
+	  nRes = -1;
+	}      
+      break;
+
+    case OPERATION_REST_ALL:
+      showDebug(1, "action=REST_ALL\n");
+      try { rest_all(szImageDir, &options); }
+      catch (CExceptions *excep)
+	{
+          showDebug(1, "caught exception: %d\n", excep->GetExcept());
+
+	  if (!options.bBatchMode && !excep->getCaught())
+	    g_interface -> Error(excep, szImageFile);
+
+	  showDebug(1, "\nFINAL ERROR\n\n");
+
+	  nRes = -1;
+	}      
+      break;
       
     default: // exit
       if (options.bSync)
--- partimage-0.6.4/src/client/misc.cpp.pix	2005-01-24 13:46:19.382388046 +0100
+++ partimage-0.6.4/src/client/misc.cpp	2005-01-24 14:39:16.454532386 +0100
@@ -2274,3 +2274,231 @@
   strcpy(szFileSystem, "befs");
   RETURN_int(FS_BEFS);
 }
+
+static int str_begins_with(const char *s, const char *prefix)
+{
+  return strncmp(s, prefix, strlen(prefix)) == 0;
+}
+
+static char *sfdisk_line_to_disk_device(const char *line)
+{
+  static const char *new_disk_prefix = "# partition table of ";
+  if (str_begins_with(line, new_disk_prefix)) { 
+    const char *device = line + strlen(new_disk_prefix);
+    return strndup(device, strlen(device) - 1);
+  } else {
+    return NULL;
+  }
+}
+
+static char *sfdisk_line_to_partition_device(const char *line)
+{
+  if (char *p = strchr(line, ':')) {
+    while (p[-1] == ' ' && p > line) p--;
+    return strndup(line, p - line);
+  } else {
+    return NULL;
+  }
+}
+
+static char *full_device_to_device(char *device)
+{
+  char *p;
+  if (str_begins_with(device, "/dev/")) {
+    p = device + strlen("/dev/");
+  } else {
+    showDebug(2, "full_device_to_device: weird device %s\n", device);
+    p = strrchr(device, '/');
+    p = p ? p + 1 : device;
+  }
+  p = strdup(p);
+  char *q;
+  while (q = strchr(p, '/')) *q = '_';
+
+  return p;
+}
+
+static void my_pclose(FILE *f)
+{
+  int status = pclose(f);
+  if (status != 0) showDebug(1, "ERROR: command failed (%d)\n", status);
+}
+
+static void write_unsigned(CImage *image, unsigned int nb)
+{
+  image->write((char *) &nb, sizeof(nb), true);
+}
+static void write_string(CImage *image, const char *s)
+{
+  unsigned int len = strlen(s);
+  write_unsigned(image, len);
+  image->write((void *) s, len, true);
+}
+static unsigned int read_unsigned(CImage *image)
+{
+  unsigned int nb;
+  image->read((char *) &nb, sizeof(nb), true);
+  return nb;
+}
+static char *read_string(CImage *image)
+{
+  unsigned int len = read_unsigned(image);
+  if (len == 0) return NULL;
+  char *s = (char *) malloc(len + 1);
+  image->read(s, len, true);
+  s[len] = '\0';
+  return s;
+}
+
+void save_all(char *szImageDir, COptions *options)
+{
+  BEGIN;  
+
+  char *sfdisk[1024];
+  unsigned int sfdisk_nb_lines = 0;
+  {
+    FILE *f = popen("LC_ALL=C sfdisk -d", "r");
+    char tmp[1024];
+  
+    while (1) {
+      if (!fgets(tmp, sizeof(tmp), f)) break;
+      if (sfdisk_nb_lines >= sizeof(sfdisk)) break;   
+      sfdisk[sfdisk_nb_lines++] = strdup(tmp);
+    }
+    my_pclose(f);
+  }
+
+  char aux[MAXPATHLEN];
+  CImage image(options);
+  SNPRINTF(aux, "%s/sfdisk.lst", szImageDir);
+  image.set_szImageFilename(aux);
+  image.openWriting();
+
+  write_unsigned(&image, sfdisk_nb_lines);
+
+  for (unsigned int i = 0; i < sfdisk_nb_lines; i++)
+    write_string(&image, sfdisk[i]);
+
+  for (unsigned int i = 0; i < sfdisk_nb_lines; i++)
+    if (char *device = sfdisk_line_to_disk_device(sfdisk[i])) {
+      showDebug(2, "opening %s to get its MBR\n", device);
+      FILE *f = fopen(device, "r");
+      char mbr[512];
+      if (f && fread(mbr, 512, 1, f) == 1) {
+	write_string(&image, device);
+	image.write(mbr, sizeof(mbr), true);
+      } else
+	showDebug(1, "ERROR: can't read MBR of device %s\n", device);
+      if (f) fclose(f);
+    }
+  write_unsigned(&image, 0);
+
+  closeFilesSave(false, *options, &image, NULL);
+
+  COptions save_part_options(*options);
+  save_part_options.qwSplitSize = 0;
+  save_part_options.bAskDesc = false;
+  save_part_options.bBackupMBR = false;
+  save_part_options.bCheckBeforeSaving = false; // checking always find an error, so...
+
+  for (unsigned int i = 0; i < sfdisk_nb_lines; i++) {
+    if (!strstr(sfdisk[i], "Id=83")) continue;
+
+    char *device = sfdisk_line_to_partition_device(sfdisk[i]);
+    if (!device) continue;
+
+    char *short_device = full_device_to_device(device);
+    SNPRINTF(aux, "%s/part_%s", szImageDir, short_device);
+    free(short_device);
+    showDebug(1, "savePartition(%s, %s, ...)\n", device, aux);
+    savePartition(device, aux, &save_part_options);
+
+    free(device);
+  }
+
+  RETURN;
+}
+
+void rest_all(char *szImageDir, COptions *options)
+{
+  BEGIN;  
+
+  char **sfdisk;
+  unsigned int sfdisk_nb_lines = 0;
+
+  char aux[MAXPATHLEN];
+  CImage image(options);
+
+  {
+    SNPRINTF(aux, "%s/sfdisk.lst", szImageDir);
+    image.set_szImageFilename(aux);
+    image.openReading();
+
+    sfdisk_nb_lines = read_unsigned(&image);
+    showDebug(2, "rest_all got sfdisk_nb_lines = %d\n", sfdisk_nb_lines);
+    sfdisk = (char **) alloca(sizeof(char *) * sfdisk_nb_lines);
+    for (unsigned int i = 0; i < sfdisk_nb_lines; i++) {
+      sfdisk[i] = read_string(&image);
+      showDebug(2, "rest_all got line = %s\n", sfdisk[i]);
+    }
+    while (1) {
+      char *device = read_string(&image);
+      if (!device) break;
+
+      char mbr[512];
+      image.read(mbr, 512, true);
+      
+      FILE *f = fopen(device, "r+b");
+      if (f && fwrite(mbr, 512, 1, f) == 1)
+	showDebug(1, "MBR of %s restored\n", device);
+      else
+	showDebug(1, "ERROR: restoring MBR of device %s failed: %s\n", device, strerror(errno));
+      if (f) fclose(f);
+    }
+    
+    // since sfdisk.lst is not really nice to the library, we can't close the thread from procReadBufferFromImage which has already exited
+    image.closeReading(false);
+  }
+
+  {
+    FILE *f = NULL;
+    for (unsigned int i = 0; i < sfdisk_nb_lines; i++) {
+      if (char *device = sfdisk_line_to_disk_device(sfdisk[i])) {
+	if (f) my_pclose(f);
+	SNPRINTF(aux, "sfdisk %s >>" PARTIMAGE_LOG " 2>>" PARTIMAGE_LOG, device);
+	showDebug(1, "calling %s\n", aux);
+	f = popen(aux, "w");
+	free(device);
+      }
+      if (f)
+	fputs(sfdisk[i], f);
+      else
+	showDebug(1, "dropping line: %s", sfdisk[i]);
+    }
+    if (f) my_pclose(f);
+  }
+
+  for (unsigned int i = 0; i < sfdisk_nb_lines; i++) {
+
+    char *device = sfdisk_line_to_partition_device(sfdisk[i]);
+    if (!device) continue;
+    
+    if (strstr(sfdisk[i], "Id=83")) {
+      char *short_device = full_device_to_device(device);
+      SNPRINTF(aux, "%s/part_%s", szImageDir, short_device);
+      free(short_device);
+      if (image.getImageDisk()->doesFileExists(aux)) {
+	showDebug(1, "restorePartition(%s, %s, ...)\n", device, aux);
+	restorePartition(device, aux, options);
+      } else
+	showDebug(1, "no such %s image disk, not restoring it\n", aux);
+    } else if (strstr(sfdisk[i], "Id=82")) {
+      SNPRINTF(aux, "mkswap %s >>" PARTIMAGE_LOG, device);
+      showDebug(2, "%s\n", aux);
+      system(aux);
+    }
+    free(device);
+  }
+  
+  RETURN;
+}
--- partimage-0.6.4/src/client/misc.h.pix	2004-02-04 01:57:36.000000000 +0100
+++ partimage-0.6.4/src/client/misc.h	2005-01-24 13:46:19.390390663 +0100
@@ -47,6 +47,8 @@
 void savePartition(char *szDevice, char *szImageName, /*char *szFilesystem, */COptions *options);
 void restorePartition(char *szDevice, char *szImageName, COptions *options);
 void restoreMbr(char *szImageFile, COptions *options);
+void save_all(char *szImageDir, COptions *options);
+void rest_all(char *szImageDir, COptions *options);
 
 // =======================================================
 void closeFilesSave(bool on_error, COptions options, CImage *image, FILE *fDeviceFile);
--- partimage-0.6.4/src/client/partimage.h.pix	2004-02-04 01:57:36.000000000 +0100
+++ partimage-0.6.4/src/client/partimage.h	2005-01-24 13:46:19.390390663 +0100
@@ -94,6 +94,8 @@
 #define OPERATION_RESTMBR    3
 #define OPERATION_IMGINFO    4
 #define OPERATION_EXIT       5
+#define OPERATION_SAVE_ALL   6
+#define OPERATION_REST_ALL   7
 
 // returned by CExceptionsGUI::windowError 
 // user canceled the job
--- partimage-0.6.4/src/shared/image_disk.cpp.pix	2004-02-04 01:57:36.000000000 +0100
+++ partimage-0.6.4/src/shared/image_disk.cpp	2005-01-24 13:46:19.391390990 +0100
@@ -526,6 +526,7 @@
   
   SNPRINTF(szShortName, "pi%.8lx", (DWORD)generateIdentificator());
   extractFilepathFromFullPath(m_szImageFilename, szPathDir); // filepath without filename
+  if (access(szPathDir, R_OK) == -1) mkdir(szPathDir, 0755);
   snprintf(m_szSpaceFilename, MAXPATHLEN, "%s/%8s.tmp", szPathDir, szShortName);
   showDebug(1, "TEMP=[%s]\n", m_szSpaceFilename);
 
