Index: libarchive-2.5.902a/configure.ac
===================================================================
--- libarchive-2.5.902a.orig/configure.ac
+++ libarchive-2.5.902a/configure.ac
@@ -162,17 +162,37 @@ AM_CONDITIONAL([STATIC_BSDCPIO], [ test 
 AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_SYS_WAIT
-AC_CHECK_HEADERS([bzlib.h errno.h ext2fs/ext2_fs.h fcntl.h  grp.h])
+AC_CHECK_HEADERS([errno.h ext2fs/ext2_fs.h fcntl.h  grp.h])
 AC_CHECK_HEADERS([inttypes.h langinfo.h limits.h linux/fs.h])
-AC_CHECK_HEADERS([locale.h lzmadec.h paths.h poll.h pwd.h regex.h stdarg.h])
+AC_CHECK_HEADERS([locale.h paths.h poll.h pwd.h regex.h stdarg.h])
 AC_CHECK_HEADERS([stdint.h stdlib.h string.h sys/acl.h sys/ioctl.h])
 AC_CHECK_HEADERS([sys/param.h sys/poll.h sys/select.h sys/time.h sys/utime.h])
-AC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h zlib.h])
+AC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h])
 
 # Checks for libraries.
-AC_CHECK_LIB(bz2,BZ2_bzDecompressInit)
-AC_CHECK_LIB(z,inflate)
-AC_CHECK_LIB(lzmadec,lzmadec_decode)
+AC_ARG_WITH([zlib],
+  AS_HELP_STRING([--without-zlib], [Don't build support for gzip through zlib]))
+
+if test "x$with_zlib" != "xno"; then
+  AC_CHECK_HEADERS([zlib.h])
+  AC_CHECK_LIB(z,inflate)
+fi
+
+AC_ARG_WITH([bz2lib],
+  AS_HELP_STRING([--without-bz2lib], [Don't build support for bzip2 through bz2lib]))
+
+if test "x$with_bz2lib" != "xno"; then
+  AC_CHECK_HEADERS([bzlib.h])
+  AC_CHECK_LIB(bz2,BZ2_bzDecompressInit)
+fi
+
+AC_ARG_WITH([lzmadec],
+  AS_HELP_STRING([--without-lzmadec], [Don't build support for lzma through lzmadec]))
+
+if test "x$with_lzmadec" != "xno"; then
+  AC_CHECK_HEADERS([lzmadec.h])
+  AC_CHECK_LIB(lzmadec,lzmadec_decode)
+fi
 
 # TODO: Give the user the option of using a pre-existing system
 # libarchive.  This will define HAVE_LIBARCHIVE which will cause
Index: libarchive-2.5.902a/libarchive/archive_read_support_compression_bzip2.c
===================================================================
--- libarchive-2.5.902a.orig/libarchive/archive_read_support_compression_bzip2.c
+++ libarchive-2.5.902a/libarchive/archive_read_support_compression_bzip2.c
@@ -171,7 +171,7 @@ bzip2_reader_bid(struct archive_reader *
  * decompression.  We can, however, still detect compressed archives
  * and emit a useful message.
  */
-static int
+static struct archive_read_source *
 bzip2_reader_init(struct archive_read *a, struct archive_reader *reader,
     struct archive_read_source *upstream, const void *buff, size_t n)
 {
@@ -183,7 +183,7 @@ bzip2_reader_init(struct archive_read *a
 
 	archive_set_error(&a->archive, -1,
 	    "This version of libarchive was compiled without bzip2 support");
-	return (ARCHIVE_FATAL);
+	return (NULL);
 }
 
 
Index: libarchive-2.5.902a/libarchive/archive_read_support_compression_gzip.c
===================================================================
--- libarchive-2.5.902a.orig/libarchive/archive_read_support_compression_gzip.c
+++ libarchive-2.5.902a/libarchive/archive_read_support_compression_gzip.c
@@ -163,17 +163,19 @@ gzip_reader_bid(struct archive_reader *s
  * decompression.  We can, however, still detect compressed archives
  * and emit a useful message.
  */
-static int
-gzip_reader_init(struct archive_read *a, struct archive_read_source *upstream,
-    const void *buff, size_t n)
+static struct archive_read_source *
+gzip_reader_init(struct archive_read *a, struct archive_reader *reader,
+    struct archive_read_source *upstream, const void *buff, size_t n)
 {
 	(void)a;	/* UNUSED */
+	(void)reader;	/* UNUSED */
+	(void)upstream; /* UNUSED */
 	(void)buff;	/* UNUSED */
 	(void)n;	/* UNUSED */
 
 	archive_set_error(&a->archive, -1,
 	    "This version of libarchive was compiled without gzip support");
-	return (ARCHIVE_FATAL);
+	return NULL;
 }
 
 #else
