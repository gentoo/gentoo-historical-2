Index: src/portage/package.cc
===================================================================
--- src/portage/package.cc	(revision 78)
+++ src/portage/package.cc	(working copy)
@@ -139,13 +139,14 @@
 	if(version == NULL) {
 		for(unsigned int i = 0; i<size(); ++i)
 			for(unsigned int j = 0; j<size(); ++j)
-				if(i != j && *((*this)[i]) == *((*this)[j])) {
+				if(i != j
+				   && *(BasicVersion*)((*this)[i]) == *(BasicVersion*)((*this)[j])) {
 					return true;
 				}
 	}
 	else {
 		for(unsigned int i = 0; i<size(); ++i)
-			if( *((*this)[i]) == *version ) {
+			if( *(BasicVersion*)((*this)[i]) == *(BasicVersion*)version ) {
 				return true;
 			}
 	}
Index: src/search/packagetest.cc
===================================================================
--- src/search/packagetest.cc	(revision 78)
+++ src/search/packagetest.cc	(working copy)
@@ -67,6 +67,16 @@
 			break;
 		}
 	}
+
+	if(installed && need < Package::NAME)
+	{
+		need = Package::NAME;
+	}
+
+	if(dup_versions && need < Package::VERSIONS)
+	{
+		need = Package::VERSIONS;
+	}
 }
 
 PackageTest::MatchField
@@ -123,8 +133,6 @@
 bool
 PackageTest::stringMatch(Package *pkg) const
 {
-	pkg->readNeeded(need);
-
 	if(field & NAME && (*algorithm)(pkg->name.c_str(), pkg))
 	{
 		return true;
@@ -167,6 +175,9 @@
 PackageTest::match(Package *pkg) const
 {
 	bool is_match = true;
+
+	pkg->readNeeded(need);
+
 	if(algorithm.get() != NULL) {
 		is_match = stringMatch(pkg);
 	}
@@ -176,8 +187,9 @@
 		is_match = vardbpkg->isInstalled(pkg);
 	}
 
-	if(dup_versions && is_match)
+	if(dup_versions && is_match) {
 		is_match = pkg->have_duplicate_versions;
+	}
 
 	return (invert ? !is_match : is_match);
 }
