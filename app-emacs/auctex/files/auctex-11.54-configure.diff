--- configure	2005-01-13 00:26:39.000000000 +0900
+++ configure-emacs	2005-04-12 23:00:32.000000000 +0900
@@ -1458,100 +1458,7 @@
    { (exit 1); exit 1; }; }
 fi
 
-echo "$as_me:$LINENO: checking if $EMACS is XEmacs" >&5
-echo $ECHO_N "checking if $EMACS is XEmacs... $ECHO_C" >&6
-
-  elisp="(if (string-match \"XEmacs\" emacs-version) \"yes\" \"no\")"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  XEMACS="`cat ${OUTPUT}`"
-  echo "=> ${1}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-if test "$XEMACS" = "yes"; then
-  EMACS_FLAVOR=xemacs
-else
-  if test "$XEMACS" = "no"; then
-    EMACS_FLAVOR=emacs
-  else
-    { { echo "$as_me:$LINENO: error: Unable to run $EMACS!  Aborting!" >&5
-echo "$as_me: error: Unable to run $EMACS!  Aborting!" >&2;}
-   { (exit 1); exit 1; }; }
-  fi
-fi
-  echo "$as_me:$LINENO: result: $XEMACS" >&5
-echo "${ECHO_T}$XEMACS" >&6
-
-
-
-echo "$as_me:$LINENO: checking if (X)Emacs is recent enough" >&5
-echo $ECHO_N "checking if (X)Emacs is recent enough... $ECHO_C" >&6
-
-  elisp="emacs-major-version"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  EMACS_MAJOR_VERSION="`cat ${OUTPUT}`"
-  echo "=> ${1}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-if (( $EMACS_MAJOR_VERSION < 21 )); then
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
-  { { echo "$as_me:$LINENO: error: AUCTeX requires at least (X)Emacs version 21.  Aborting!" >&5
-echo "$as_me: error: AUCTeX requires at least (X)Emacs version 21.  Aborting!" >&2;}
-   { (exit 1); exit 1; }; }
-else
-  echo "$as_me:$LINENO: result: yes" >&5
-echo "${ECHO_T}yes" >&6
-fi
-
-
-
-echo "$as_me:$LINENO: checking for mule support" >&5
-echo $ECHO_N "checking for mule support... $ECHO_C" >&6
-
-if test -z "silent"; then
-	echo "$as_me:$LINENO: checking for mule" >&5
-echo $ECHO_N "checking for mule... $ECHO_C" >&6
-fi
-library=`echo mule | tr _ -`
-
-  elisp="(condition-case nil (require '$library ) \
-	(error (prog1 nil (message \"$library not found\"))))"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  mule="`cat ${OUTPUT}`"
-  echo "=> ${1}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-if test "$mule" = "nil"; then
-	mule=no
-fi
-if test "$mule" = "$library"; then
-	mule=yes
-fi
-HAVE_mule=$mule
-
-if test -z "silent"; then
-	echo "$as_me:$LINENO: result: $HAVE_mule" >&5
-echo "${ECHO_T}$HAVE_mule" >&6
-fi
-
-if test "${HAVE_mule}" = "yes"; then
-  COMPILE_MULE="tex-jp.el"
-  CONTRIB_MULEELC="tex-jp.elc"
-  echo "$as_me:$LINENO: result: yes" >&5
-echo "${ECHO_T}yes" >&6
-else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
-fi
-
-
-
+EMACS_FLAVOR=emacs
 
 # The Debian package uses `--disable-build-dir-test'; normal users should
 # never need to modify the default behavior.
