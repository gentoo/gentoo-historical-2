diff -Naur auctex-11.81.old/configure auctex-11.81.new/configure
--- auctex-11.81.old/configure	2005-09-25 14:17:00.000000000 +0200
+++ auctex-11.81.new/configure	2005-10-07 14:41:11.589304500 +0200
@@ -1536,152 +1536,7 @@
    { (exit 1); exit 1; }; }
 fi
 
-echo "$as_me:$LINENO: checking if ${EMACS} is XEmacs" >&5
-echo $ECHO_N "checking if ${EMACS} is XEmacs... $ECHO_C" >&6
-
-  elisp="(if (featurep (quote xemacs)) \"yes\" \"no\")"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  XEMACS="`cat ${OUTPUT}`"
-  echo "=> ${XEMACS}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-if test "${XEMACS}" = "yes"; then
-  EMACS_FLAVOR=xemacs
-  EMACS_NAME="XEmacs"
-elif test "${XEMACS}" = "no"; then
-  EMACS_FLAVOR=emacs
-  EMACS_NAME="Emacs"
-else
-  { { echo "$as_me:$LINENO: error: Unable to run ${EMACS}!  Aborting!" >&5
-echo "$as_me: error: Unable to run ${EMACS}!  Aborting!" >&2;}
-   { (exit 1); exit 1; }; }
-fi
-  echo "$as_me:$LINENO: result: ${XEMACS}" >&5
-echo "${ECHO_T}${XEMACS}" >&6
-
-
-  echo "$as_me:$LINENO: checking for ${EMACS_NAME} prefix" >&5
-echo $ECHO_N "checking for ${EMACS_NAME} prefix... $ECHO_C" >&6
-
-
-  elisp="(condition-case nil (let*
-    ((prefix (directory-file-name (file-name-directory (executable-find cmd))))
-     (parent (directory-file-name (file-name-directory prefix))))
-    (if (string= (file-name-nondirectory prefix) \"bin\")
-        (setq prefix parent)
-      (if (string= (file-name-nondirectory parent) \"bin\")
-         (setq prefix (directory-file-name (file-name-directory parent)))))
-    prefix) (error "NONE"))"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch -no-site-file -eval "(let* ((cmd(pop command-line-args-left))(x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))" "${EMACS}" >& 5 2>&1
-  "${EMACS}" -batch -no-site-file -eval "(let* ((cmd(pop command-line-args-left))(x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))" "${EMACS}" >& 5 2>&1
-  emacsprefix="`cat ${OUTPUT}`"
-  echo "=> ${emacsprefix}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-  echo "$as_me:$LINENO: result: \"${emacsprefix}\"" >&5
-echo "${ECHO_T}\"${emacsprefix}\"" >&6
-
-
-if test ${EMACS_FLAVOR} = xemacs
-then
-
-echo "$as_me:$LINENO: checking if ${EMACS_NAME} is recent enough" >&5
-echo $ECHO_N "checking if ${EMACS_NAME} is recent enough... $ECHO_C" >&6
-
-  elisp="(cond ((< emacs-major-version 21) \"no\")
-			 ((> emacs-major-version 21) \"yes\")
-			 ((< emacs-minor-version 04) \"no\")
-			 (t \"yes\"))"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  result="`cat ${OUTPUT}`"
-  echo "=> ${result}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-echo "$as_me:$LINENO: result: ${result}" >&5
-echo "${ECHO_T}${result}" >&6
-if test "${result}" != "yes"
-then
-  { { echo "$as_me:$LINENO: error: This package requires at least ${EMACS_NAME} version 21.4  Aborting!" >&5
-echo "$as_me: error: This package requires at least ${EMACS_NAME} version 21.4  Aborting!" >&2;}
-   { (exit 1); exit 1; }; }
-fi
-
-else
-
-echo "$as_me:$LINENO: checking if ${EMACS_NAME} is recent enough" >&5
-echo $ECHO_N "checking if ${EMACS_NAME} is recent enough... $ECHO_C" >&6
-
-  elisp="(cond ((< emacs-major-version 21) \"no\")
-			 ((> emacs-major-version 21) \"yes\")
-			 ((< emacs-minor-version 01) \"no\")
-			 (t \"yes\"))"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch -no-site-file -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  result="`cat ${OUTPUT}`"
-  echo "=> ${result}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-echo "$as_me:$LINENO: result: ${result}" >&5
-echo "${ECHO_T}${result}" >&6
-if test "${result}" != "yes"
-then
-  { { echo "$as_me:$LINENO: error: This package requires at least ${EMACS_NAME} version 21.1  Aborting!" >&5
-echo "$as_me: error: This package requires at least ${EMACS_NAME} version 21.1  Aborting!" >&2;}
-   { (exit 1); exit 1; }; }
-fi
-
-fi
-
-
-echo "$as_me:$LINENO: checking for mule support" >&5
-echo $ECHO_N "checking for mule support... $ECHO_C" >&6
-
-if test -z "silent"; then
-	echo "$as_me:$LINENO: checking for mule" >&5
-echo $ECHO_N "checking for mule... $ECHO_C" >&6
-fi
-library=`echo mule | tr _ -`
-
-  elisp="(condition-case nil (require '${library} ) \
-	(error (prog1 nil (message \"${library} not found\"))))"
-  OUTPUT=./conftest-$$
-  echo "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  "${EMACS}" -batch  -eval "(let* ((x ${elisp})) (write-region (if (stringp x) x (prin1-to-string x)) nil \"${OUTPUT}\"))"  >& 5 2>&1
-  mule="`cat ${OUTPUT}`"
-  echo "=> ${mule}" >& 5 2>&1
-  rm -f ${OUTPUT}
-
-if test "$mule" = "nil"; then
-	mule=no
-fi
-if test "$mule" = "${library}"; then
-	mule=yes
-fi
-HAVE_mule=$mule
-
-if test -z "silent"; then
-	echo "$as_me:$LINENO: result: ${HAVE_mule}" >&5
-echo "${ECHO_T}${HAVE_mule}" >&6
-fi
-
-if test "${HAVE_mule}" = "yes"; then
-  MULESRC="tex-jp.el"
-  MULEELC="tex-jp.elc"
-  echo "$as_me:$LINENO: result: yes" >&5
-echo "${ECHO_T}yes" >&6
-else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
-fi
-
-
-
+EMACS_FLAVOR=emacs
 
 # The Debian package uses `--disable-build-dir-test'; normal users should
 # never need to modify the default behavior.
