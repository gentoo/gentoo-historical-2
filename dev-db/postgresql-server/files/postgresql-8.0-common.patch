diff --git a/config/programs.m4 b/config/programs.m4
index 3f87396..9c7fbf0 100644
--- a/config/programs.m4
+++ b/config/programs.m4
@@ -153,13 +153,13 @@ AC_DEFUN([PGAC_CHECK_GETTEXT],
 dnl FIXME: We should probably check for version >=0.10.36.
   AC_CHECK_PROGS(XGETTEXT, xgettext)
 
-  # Note: share/locale is always the default, independent of $datadir
-  localedir='${prefix}/share/locale'
-  if test x"$prefix" = x"NONE"; then
-    exp_localedir="$ac_default_prefix/share/locale"
-  else
-    exp_localedir="$prefix/share/locale"
-  fi
+  # Note: share/locale *WAS* always the default, independent of $datadir
+  AC_ARG_WITH([locale-dir],
+   AC_HELP_STRING([--with-locale-dir],[Set path to locale files]),
+   [ localedir="${withval}" ],
+   [ localedir='${prefix}/share/locale' ]
+  )
+  exp_localedir="${localedir}"
 
   AC_SUBST(localedir)
   AC_DEFINE_UNQUOTED(LOCALEDIR, ["$exp_localedir"],
diff --git a/configure.in b/configure.in
index c71b175..674036a 100644
--- a/configure.in
+++ b/configure.in
@@ -19,10 +19,6 @@ m4_pattern_forbid(^PGAC_)dnl to catch undefined macros
 
 AC_INIT([PostgreSQL], [8.0.15], [pgsql-bugs@postgresql.org])
 
-m4_if(m4_defn([m4_PACKAGE_VERSION]), [2.53], [], [m4_fatal([Autoconf version 2.59 is required.
-Untested combinations of 'autoconf' and PostgreSQL versions are not
-recommended.  You can remove the check from 'configure.in' but it is then
-your responsibility whether the result works or not.])])
 AC_COPYRIGHT([Copyright (c) 1996-2005, PostgreSQL Global Development Group])
 AC_CONFIG_SRCDIR([src/backend/access/common/heaptuple.c])
 AC_CONFIG_AUX_DIR(config)
diff --git a/src/include/storage/s_lock.h b/src/include/storage/s_lock.h
index 0c2dff0..d548d4d 100644
--- a/src/include/storage/s_lock.h
+++ b/src/include/storage/s_lock.h
@@ -239,6 +239,31 @@ tas(volatile slock_t *lock)
 #endif	 /* __s390__ || __s390x__ */
 
 
+#if defined(__sh__)
+#define HAS_TEST_AND_SET
+
+typedef unsigned char slock_t;
+
+#define TAS(lock) tas(lock)
+
+static __inline__ int
+tas(volatile slock_t *lock)
+{
+	register int _res = 1;
+
+	__asm__ __volatile__(
+		"tas.b	@%1\n\t"
+		"movt	%0\n\t"
+		"xor	#1,%0"
+:		"=z"(_res)
+:		"r"(lock)
+:		"t","memory");
+	return _res;
+}
+
+#endif	 /* __sh__ */
+
+
 #if defined(__sparc__)
 #define HAS_TEST_AND_SET
 
