--- src/tolua/tolua.cpp
+++ src/tolua/tolua.cpp
@@ -16179,7 +16179,12 @@
    10,115,101,116,109,101,116, 97,116, 97, 98,108,101, 40, 85,
   110,105,116, 84,121,112,101,115, 44, 32,109,116, 41,32
   };
+#if LUA_VERSION_NUM >= 501
+  luaL_loadbuffer(tolua_S, (char *)B,sizeof(B),"tolua: embedded Lua code 1");
+  lua_pcall(tolua_S, 0, 0, lua_gettop(tolua_S));
+#else
   lua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 1");
+#endif
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */
 
@@ -16242,7 +16247,12 @@
   111,110, 76,105,115,116,101,110,101,114, 58,110,101,119, 40,
   102, 41, 10,101,110,100,32
   };
+#if LUA_VERSION_NUM >= 501
+  luaL_loadbuffer(tolua_S, (char *)B,sizeof(B),"tolua: embedded Lua code 1");
+  lua_pcall(tolua_S, 0, 0, lua_gettop(tolua_S));
+#else
   lua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 2");
+#endif
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */
 
@@ -16490,7 +16500,12 @@
   105,115,116,101,110,101,114, 40,119, 46, 95, 97, 99,116,105,
   111,110, 99, 98, 41, 10,101,110,100,32
   };
+#if LUA_VERSION_NUM >= 501
+  luaL_loadbuffer(tolua_S, (char *)B,sizeof(B),"tolua: embedded Lua code 1");
+  lua_pcall(tolua_S, 0, 0, lua_gettop(tolua_S));
+#else
   lua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 3");
+#endif
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */
 
@@ -16886,7 +16901,12 @@
   110,100, 10,114,101,116,117,114,110, 32,109,101,110,117, 10,
   101,110,100,32
   };
+#if LUA_VERSION_NUM >= 501
+  luaL_loadbuffer(tolua_S, (char *)B,sizeof(B),"tolua: embedded Lua code 1");
+  lua_pcall(tolua_S, 0, 0, lua_gettop(tolua_S));
+#else
   lua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 4");
+#endif
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */
 
@@ -17086,7 +17106,12 @@
   101,110,101,114, 58,110,101,119, 40, 99, 97,108,108, 98, 97,
    99,107, 41, 41, 10,101,110,100,32
   };
+#if LUA_VERSION_NUM >= 501
+  luaL_loadbuffer(tolua_S, (char *)B,sizeof(B),"tolua: embedded Lua code 5");
+  lua_pcall(tolua_S, 0, 0, lua_gettop(tolua_S));
+#else
   lua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 5");
+#endif
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */
 
--- src/tolua/tolua_map.cpp
+++ src/tolua/tolua_map.cpp
@@ -152,7 +152,11 @@
 		{
 			lua_pop(L,1);             /* clear metatable off stack */
 			/* force garbage collection to avoid C to reuse a to-be-collected address */
+		#if LUA_VERSION_NUM >= 501
+			lua_gc(L, LUA_GCCOLLECT, 0);
+		#else
 			lua_setgcthreshold(L,0);
+		#endif
 			success = tolua_register_gc(L,1);
 		}
 	}
@@ -169,7 +173,11 @@
 	{
 		void* u = *((void**)lua_touserdata(L,1));
 		/* force garbage collection to avoid releasing a to-be-collected address */
+	#if LUA_VERSION_NUM >= 501
+		lua_gc(L, LUA_GCCOLLECT, 0);
+	#else
 		lua_setgcthreshold(L,0);
+	#endif
 		lua_pushstring(L,"tolua_gc");
 		lua_rawget(L,LUA_REGISTRYINDEX);
 		lua_pushlightuserdata(L,u);
--- src/tolua/tolua_to.cpp
+++ src/tolua/tolua_to.cpp
@@ -95,7 +95,11 @@
  void* v;
  lua_pushnumber(L,index);
  lua_gettable(L,lo);
- v = lua_isnil(L,-1) ? def : lua_unboxpointer(L,-1);
+#if LUA_VERSION_NUM >= 501
+ v = lua_isnil(L,-1) ? def : lua_touserdata(L,-1);
+#else
+ v = lua_isnil(L,-1) ? def : lua_touserdata(L,-1);
+#endif
  lua_pop(L,1);
  return v;
 }
