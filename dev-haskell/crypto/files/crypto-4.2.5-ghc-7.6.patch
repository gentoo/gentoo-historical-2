--- Crypto-4.2.5-orig/Data/Digest/SHA1.hs	2012-05-14 21:58:24.000000000 +1000
+++ Crypto-4.2.5/Data/Digest/SHA1.hs	2012-11-18 22:00:46.168927637 +1100
@@ -93,7 +93,7 @@
       g [] = Nothing
       g xs = Just (splitAt 64 xs)
 
-fromBytes :: (Bits a) => [a] -> a
+fromBytes :: (Num a, Bits a) => [a] -> a
 fromBytes input =
     let dofb accum [] = accum
         dofb accum (x:xs) = dofb ((shiftL accum 8) .|. x) xs
--- Crypto-4.2.5-orig/Data/Digest/SHA2.hs	2012-05-14 21:58:24.000000000 +1000
+++ Crypto-4.2.5/Data/Digest/SHA2.hs	2012-11-18 22:00:46.169927666 +1100
@@ -80,7 +80,7 @@
 -- | 'padding' currently requires that the bitSize of @a@ divide the bitSize 
 -- of @w@
 -----------------------------------------------------------------------------
-padding :: (ShaData w, Bits a, Integral a) => [a] -> [[w]]
+padding :: (ShaData w, Bits a, Num w, Integral a) => [a] -> [[w]]
 padding x = unfoldr block $ paddingHelper x 0 (0::Int) (0::Integer)
  where
   block [] = Nothing
@@ -155,7 +155,7 @@
 instance Hash Hash224 where
   toOctets (Hash224 x0 x1 x2 x3 x4 x5 x6) = bitsToOctets =<< [x0, x1, x2, x3, x4, x5, x6]
 
-shaStep :: (ShaData w) => Hash8 w -> [w] -> Hash8 w
+shaStep :: (ShaData w, Num w) => Hash8 w -> [w] -> Hash8 w
 shaStep h m = (foldl' (flip id) h (zipWith mkStep3 ks ws)) `plus` h
  where
   ws = m++zipWith4 smallSigma (drop (blockSize-2) ws) (drop (blockSize-7) ws)
@@ -173,7 +173,7 @@
 -- | Due to the limitations of 'padding', 'sha' currently requires that the
 -- bitSize of @a@ divide the bitSize of @w@
 -----------------------------------------------------------------------------
-sha :: (ShaData w, Bits a, Integral a) => Hash8 w -> [a] -> Hash8 w
+sha :: (ShaData w, Num w, Bits a, Integral a) => Hash8 w -> [a] -> Hash8 w
 sha h0 x = foldl' shaStep h0 $ padding x
 
 stringToOctets :: String -> [Word8]
@@ -282,4 +282,4 @@
 
 -- Test with:
 -- ghc -no-recomp -O --make Data/Digest/SHA2.hs -main-is Data.Digest.SHA2.moduleTest -o moduleTest && ./moduleTest && rm moduleTest
-moduleTest = runTestTT test_sha2
\ No newline at end of file
+moduleTest = runTestTT test_sha2
--- Crypto-4.2.5-orig/Data/LargeWord.hs	2012-05-14 21:58:24.000000000 +1000
+++ Crypto-4.2.5/Data/LargeWord.hs	2012-11-18 22:00:46.169927666 +1100
@@ -62,7 +62,7 @@
 data LargeKey a b = LargeKey a b
    deriving (Eq, Ord)
 
-instance (Ord a, Bits a, LargeWord a, Bits b, LargeWord b) =>
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Bits b, LargeWord b) =>
    LargeWord (LargeKey a b) where
       largeWordToInteger (LargeKey lo hi) =
          largeWordToInteger lo + (2^(bitSize lo)) * largeWordToInteger hi
@@ -96,17 +96,17 @@
          where conv = integerToLargeWord . largeWordToInteger
       largeBitSize ~(LargeKey lo hi) = largeBitSize lo + largeBitSize hi
 
-instance (Ord a, Bits a, LargeWord a, Bits b, LargeWord b) => Show (LargeKey a b) where
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Bits b, LargeWord b) => Show (LargeKey a b) where
    showsPrec p = showInt . largeWordToInteger
 
-instance (Ord a, Bits a, LargeWord a, Bits b, LargeWord b) => 
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Bits b, LargeWord b) => 
    Num (LargeKey a b) where
       (+) = largeWordPlus
       fromInteger = integerToLargeWord 
 
 -- Larger keys are instances of Bits provided their constituents are keys.
 
-instance (Ord a, Bits a, LargeWord a, Bits b, LargeWord b) => 
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Bits b, LargeWord b) => 
    Bits (LargeKey a b) where
       (.&.) = largeWordAnd
       (.|.) = largeWordOr
@@ -130,11 +130,11 @@
 boflk :: (LargeKey a b) -> b
 boflk = undefined
 
-instance (Ord a, Bits a, LargeWord a, Ord b, Bits b, LargeWord b) =>
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Ord b, Bits b, LargeWord b) =>
    Integral (LargeKey a b) where
       toInteger = largeWordToInteger
 
-instance (Ord a, Bits a, LargeWord a, Ord b, Bits b, LargeWord b) =>
+instance (Num a, Ord a, Bits a, LargeWord a, Num b, Ord b, Bits b, LargeWord b) =>
    Real (LargeKey a b)
 
 instance Enum (LargeKey a b)
