# Patch from upstream's CVS repository, see:
#   http://bugzilla.gnome.org/show_bug.cgi?id=160993#c9
diff -NurdB vte-0.11.13/src/table.c vte-0.11.13-patched/src/table.c
--- vte-0.11.13/src/table.c	2004-11-16 19:23:44.000000000 -0500
+++ vte-0.11.13-patched/src/table.c	2005-06-27 10:43:47.000000000 -0500
@@ -16,7 +16,7 @@
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  */
 
-#ident "$Id: vte-0.11.13-memory_fix.patch,v 1.1 2005/06/27 16:40:23 leonardop Exp $"
+#ident "$Id: vte-0.11.13-memory_fix.patch,v 1.1 2005/06/27 16:40:23 leonardop Exp $"
 #include "../config.h"
 #include <sys/types.h>
 #include <assert.h>
@@ -41,18 +41,16 @@
 	(((__c) < (VTE_TABLE_MAX_LITERAL)) ? (__c) : 0)
 #define _vte_table_is_numeric(__c) \
 	(((__c) >= '0') && ((__c) <= '9'))
-enum _vte_table_specials {
-	_vte_table_string = VTE_TABLE_MAX_LITERAL,
-	_vte_table_number,
-	_vte_table_max
-};
+
 struct _vte_table {
 	GQuark resultq;
 	const char *result;
 	unsigned char *original;
 	gssize original_length;
 	int increment;
-	struct _vte_table *table[_vte_table_max];
+	struct _vte_table *table_string;
+	struct _vte_table *table_number;
+	struct _vte_table **table;
 };
 
 /* Argument info. */
@@ -74,16 +72,31 @@
 	return g_malloc0(sizeof(struct _vte_table));
 }
 
+struct _vte_table **
+_vte_table_literal_new(void)
+{
+	return g_malloc0(sizeof(struct _vte_table *) * VTE_TABLE_MAX_LITERAL);
+}
+
 /* Free a table. */
 void
 _vte_table_free(struct _vte_table *table)
 {
 	unsigned int i;
-	for (i = 0; i < G_N_ELEMENTS(table->table); i++) {
-		if (table->table[i] != NULL) {
-			_vte_table_free(table->table[i]);
-			table->table[i] = NULL;
+	if (table->table != NULL) {
+		for (i = 0; i < VTE_TABLE_MAX_LITERAL; i++) {
+			if (table->table[i] != NULL) {
+				_vte_table_free(table->table[i]);
+				table->table[i] = NULL;
+			}
 		}
+		g_free(table->table);
+	}
+	if (table->table_string != NULL) {
+		_vte_table_free(table->table_string);
+	}
+	if (table->table_number != NULL) {
+		_vte_table_free(table->table_number);
 	}
 	if (table->original_length == 0) {
 		g_assert(table->original == NULL);
@@ -153,11 +166,11 @@
 		    (pattern[1] == '2') ||
 		    (pattern[1] == '3')) {
 			/* Create a new subtable. */
-			if (table->table[_vte_table_number] == NULL) {
+			if (table->table_number == NULL) {
 				subtable = _vte_table_new();
-				table->table[_vte_table_number] = subtable;
+				table->table_number = subtable;
 			} else {
-				subtable = table->table[_vte_table_number];
+				subtable = table->table_number;
 			}
 			/* Add the rest of the string to the subtable. */
 			_vte_table_addi(subtable, original, original_length,
@@ -213,11 +226,11 @@
 			/* It must have a terminator. */
 			g_assert(length >= 3);
 			/* Create a new subtable. */
-			if (table->table[_vte_table_string] == NULL) {
+			if (table->table_string == NULL) {
 				subtable = _vte_table_new();
-				table->table[_vte_table_string] = subtable;
+				table->table_string = subtable;
 			} else {
-				subtable = table->table[_vte_table_string];
+				subtable = table->table_string;
 			}
 			/* Add the rest of the string to the subtable. */
 			_vte_table_addi(subtable, original, original_length,
@@ -229,6 +242,11 @@
 		/* Handle an escaped '%'. */
 		if (pattern[1] == '%') {
 			/* Create a new subtable. */
+			if (table->table == NULL) {
+				table->table = _vte_table_literal_new();
+				subtable = _vte_table_new();
+				table->table['%'] = subtable;
+			} else
 			if (table->table['%'] == NULL) {
 				subtable = _vte_table_new();
 				table->table['%'] = subtable;
@@ -250,6 +268,11 @@
 			 * character value. */
 			for (i = pattern[2]; i < VTE_TABLE_MAX_LITERAL; i++) {
 				/* Create a new subtable. */
+				if (table->table == NULL) {
+					table->table = _vte_table_literal_new();
+					subtable = _vte_table_new();
+					table->table[i] = subtable;
+				} else
 				if (table->table[i] == NULL) {
 					subtable = _vte_table_new();
 					table->table[i] = subtable;
@@ -263,6 +286,11 @@
 						result, quark, inc);
 			}
 			/* Also add a subtable for higher characters. */
+			if (table->table == NULL) {
+				table->table = _vte_table_literal_new();
+				subtable = _vte_table_new();
+				table->table[0] = subtable;
+			} else
 			if (table->table[0] == NULL) {
 				subtable = _vte_table_new();
 				table->table[0] = subtable;
@@ -280,6 +308,11 @@
 	/* A literal (or an unescaped '%', which is also a literal). */
 	check = (guint8) pattern[0];
 	g_assert(check < VTE_TABLE_MAX_LITERAL);
+	if (table->table == NULL) {
+		table->table = _vte_table_literal_new();
+		subtable = _vte_table_new();
+		table->table[check] = subtable;
+	} else
 	if (table->table[check] == NULL) {
 		subtable = _vte_table_new();
 		table->table[check] = subtable;
@@ -334,11 +367,12 @@
 	}
 
 	/* Check if this node has a string disposition. */
-	if (table->table[_vte_table_string] != NULL) {
+	if (table->table_string != NULL) {
 		/* Iterate over all non-terminator values. */
-		subtable = table->table[_vte_table_string];
+		subtable = table->table_string;
 		for (i = 0; i < length; i++) {
-			if (subtable->table[_vte_table_map_literal(candidate[i])] != NULL) {
+			if ((subtable->table != NULL) &&
+			    (subtable->table[_vte_table_map_literal(candidate[i])] != NULL)) {
 				break;
 			}
 		}
@@ -356,8 +390,8 @@
 
 	/* Check if this could be a number. */
 	if ((_vte_table_is_numeric(candidate[0])) &&
-	    (table->table[_vte_table_number] != NULL)) {
-		subtable = table->table[_vte_table_number];
+	    (table->table_number != NULL)) {
+		subtable = table->table_number;
 		/* Iterate over all numeric characters. */
 		for (i = 0; i < length; i++) {
 			if (!_vte_table_is_numeric(candidate[i])) {
@@ -377,7 +411,8 @@
 	}
 
 	/* Check for an exact match. */
-	if (table->table[_vte_table_map_literal(candidate[0])] != NULL) {
+	if ((table->table != NULL) &&
+	    (table->table[_vte_table_map_literal(candidate[0])] != NULL)) {
 		subtable = table->table[_vte_table_map_literal(candidate[0])];
 		/* Save the parameter info. */
 		arginfo = g_malloc(sizeof(struct _vte_table_arginfo));
@@ -526,10 +561,11 @@
 
 	/* If there's no literal path, and no generic path, and the numeric
 	 * path isn't available, then it's not a sequence, either. */
-	if (table->table[_vte_table_map_literal(candidate[0])] == NULL) {
-		if (table->table[_vte_table_string] == NULL) {
+	if ((table->table == NULL) ||
+	    (table->table[_vte_table_map_literal(candidate[0])] == NULL)) {
+		if (table->table_string == NULL) {
 			if (!(_vte_table_is_numeric(candidate[0])) ||
-			    (table->table[_vte_table_number] == NULL)) {
+			    (table->table_number == NULL)) {
 				/* No match. */
 				return NULL;
 			}
@@ -538,7 +574,11 @@
 
 	/* Check for a literal match. */
 	for (i = 0, head = table; (i < length) && (head != NULL); i++) {
-		head = head->table[_vte_table_map_literal(candidate[i])];
+		if (head->table == NULL) {
+			head = NULL;
+		} else {
+			head = head->table[_vte_table_map_literal(candidate[i])];
+		}
 	}
 	if ((head != NULL) && (head->result != NULL)) {
 		/* Got a literal match. */
@@ -645,7 +685,7 @@
 
 	/* Literal? */
 	for (i = 1; i < VTE_TABLE_MAX_LITERAL; i++) {
-		if (table->table[i] != NULL) {
+		if ((table->table != NULL) && (table->table[i] != NULL)) {
 			if (i < 32) {
 				newlead = g_strdup_printf("%s^%c", lead,
 							  i + 64);
@@ -658,17 +698,17 @@
 	}
 
 	/* String? */
-	if (table->table[_vte_table_string] != NULL) {
+	if (table->table_string != NULL) {
 		newlead = g_strdup_printf("%s{string}", lead);
-		_vte_table_printi(table->table[_vte_table_string],
+		_vte_table_printi(table->table_string,
 				  newlead, count);
 		g_free(newlead);
 	}
 
 	/* Number(+)? */
-	if (table->table[_vte_table_number] != NULL) {
+	if (table->table_number != NULL) {
 		newlead = g_strdup_printf("%s{number}", lead);
-		_vte_table_printi(table->table[_vte_table_number],
+		_vte_table_printi(table->table_number,
 				  newlead, count);
 		g_free(newlead);
 	}
