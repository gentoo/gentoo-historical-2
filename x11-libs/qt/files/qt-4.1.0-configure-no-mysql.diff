--- configure	2005-11-28 14:49:16 -0000
+++ configure	2005-11-28 14:49:16 -0000

@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/sh
 #
 # Configures to build the Qt library
 #
@@ -196,7 +196,7 @@
             Edition="Console"
             QT_EDITION="QT_EDITION_CONSOLE"
             ;;
-        esac	
+        esac
         ;;
     Z4M|R4M|Q4M)
         LicenseType="Evaluation"
@@ -295,7 +295,7 @@
             cp -f $relpath/.LICENSE-EDUCATIONAL-US $outpath/LICENSE
             ;;
         esac
-        ;;        
+        ;;
     2)
         # non-US
         case "$LicenseType" in
@@ -742,7 +742,7 @@
             UNKNOWN_OPT=yes
         fi
         ;;
-    sdk) 
+    sdk)
         if [ "$PLATFORM_MAC" = "yes" ]; then
             CFG_SDK="$VAL"
         else
@@ -1084,13 +1084,13 @@
         VAR=`echo $VAR | sed "s,^\([^-]*\).*,\1,"`
         ERROR=no
         if [ "$VAR" = "decoration" ]; then
-            ERROR=yes            
+            ERROR=yes
             for d in $CFG_DECORATION_AVAILABLE; do
                 if [ "$VAL" = "$d" ]; then
                     ERROR=no
                     break
                 fi
-            done            
+            done
         elif [ "$VAR" = "sql" ]; then
             ERROR=yes
             # check if named driver is available
@@ -1747,7 +1747,7 @@
                 ;;
         esac
         ARCH=macosx
-        ;; 
+        ;;
     AIX:*:00????????00)
         if [ "$OPT_VERBOSE" = "yes" ]; then
         echo "    64-bit IBM PowerPC (powerpc)"
@@ -2778,28 +2778,30 @@
 for _SQLDR in $CFG_SQL_AVAILABLE; do
         case $_SQLDR in
         mysql)
-	    if $unixtests/compile.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath config.tests/unix/mysql_r "MySQL (thread-safe)" $L_FLAGS $I_FLAGS; then
-                QMAKE_VARS="$QMAKE_VARS \"CONFIG += use_libmysqlclient_r\""
-                if [ "$CFG_SQL_mysql" = "auto" ]; then
-                    CFG_SQL_mysql=plugin
-                fi
-            elif $unixtests/compile.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath config.tests/unix/mysql "MySQL (thread-unsafe)" $L_FLAGS $I_FLAGS; then
-                if [ "$CFG_SQL_mysql" = "auto" ]; then
-                    CFG_SQL_mysql=plugin
-                fi
-            else
-                if [ "$CFG_SQL_mysql" != "auto" ] && [ "$CFG_CONFIGURE_EXIT_ON_ERROR" = "yes" ]; then
-                    echo "MySQL support cannot be enabled due to functionality tests!"
-                    echo " Turn on verbose messaging (-v) to $0 to see the final report."
-                    echo " If you believe this message is in error you may use the continue"
-                    echo " switch (-continue) to $0 to continue."
-                    exit 101
+            if [ "$CFG_SQL_mysql" != "no" ]; then
+                if $unixtests/compile.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath config.tests/unix/mysql_r "MySQL (thread-safe)" $L_FLAGS $I_FLAGS; then
+                    QMAKE_VARS="$QMAKE_VARS \"CONFIG += use_libmysqlclient_r\""
+                    if [ "$CFG_SQL_mysql" = "auto" ]; then
+                        CFG_SQL_mysql=plugin
+                    fi
+                elif $unixtests/compile.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath config.tests/unix/mysql "MySQL (thread-unsafe)" $L_FLAGS $I_FLAGS; then
+                    if [ "$CFG_SQL_mysql" = "auto" ]; then
+                        CFG_SQL_mysql=plugin
+                    fi
                 else
-                    CFG_SQL_mysql=no
+                    if [ "$CFG_SQL_mysql" != "auto" ] && [ "$CFG_CONFIGURE_EXIT_ON_ERROR" = "yes" ]; then
+                        echo "MySQL support cannot be enabled due to functionality tests!"
+                        echo " Turn on verbose messaging (-v) to $0 to see the final report."
+                        echo " If you believe this message is in error you may use the continue"
+                        echo " switch (-continue) to $0 to continue."
+                        exit 101
+                    else
+                        CFG_SQL_mysql=no
+                    fi
                 fi
-            fi            	
+            fi
         ;;
-        psql)                        
+        psql)
             if [ "$CFG_SQL_psql" != "no" ]; then
                 if $unixtests/compile.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath config.tests/unix/psql "PostgreSQL" $L_FLAGS $I_FLAGS; then
                     if [ "$CFG_SQL_psql" = "auto" ]; then
@@ -2815,8 +2817,8 @@
                     else
                         CFG_SQL_psql=no
                     fi
-                fi 
-            fi                        
+                fi
+            fi
         ;;
         odbc)
             if [ "$CFG_SQL_odbc" != "no" ]; then
@@ -2834,8 +2836,8 @@
                     else
                         CFG_SQL_odbc=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         oci)
             if [ "$CFG_SQL_oci" != "no" ]; then
@@ -2853,8 +2855,8 @@
                     else
                         CFG_SQL_oci=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         tds)
             if [ "$CFG_SQL_tds" != "no" ]; then
@@ -2872,8 +2874,8 @@
                     else
                         CFG_SQL_tds=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         db2)
             if [ "$CFG_SQL_db2" != "no" ]; then
@@ -2891,8 +2893,8 @@
                     else
                         CFG_SQL_db2=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         ibase)
             if [ "$CFG_SQL_ibase" != "no" ]; then
@@ -2910,8 +2912,8 @@
                     else
                         CFG_SQL_ibase=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         sqlite2)
             if [ "$CFG_SQL_sqlite2" != "no" ]; then
@@ -2929,14 +2931,14 @@
                     else
                         CFG_SQL_sqlite2=no
                     fi
-                fi 
-            fi            
+                fi
+            fi
             ;;
         sqlite)
             if [ -f $relpath/src/3rdparty/sqlite/sqlite3.h ]; then
                 if [ "$CFG_SQL_sqlite" = "auto" ]; then
                         CFG_SQL_sqlite=plugin
-                fi    
+                fi
             else
                 if [ "$CFG_SQL_sqlite" != "auto" ] && [ "$CFG_CONFIGURE_EXIT_ON_ERROR" = "yes" ]; then
                     echo "SQLite support cannot be enabled due to functionality tests!"
@@ -2947,7 +2949,7 @@
                 else
                     CFG_SQL_sqlite=no
                 fi
-            fi                        
+            fi
             ;;
         *)
             if [ "$OPT_VERBOSE" = "yes" ]; then
@@ -2999,7 +3001,7 @@
     # work around broken X11 headers when using GCC 2.95 or later
     NOTYPE=no
     $x11tests/notype.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath && NOTYPE=yes
-    if [ $NOTYPE = "yes" ]; then 
+    if [ $NOTYPE = "yes" ]; then
         QMAKE_VARS="$QMAKE_VARS \"QMAKE_CXXFLAGS+=-fpermissive\""
         X11TESTS_FLAGS="$X11TESTS_FLAGS -fpermissive"
     fi
@@ -3171,7 +3173,7 @@
 
 if [ "$CFG_ENDIAN" = "auto" ]; then
     if [ "$PLATFORM_MAC" = "yes" ]; then
-	true #leave as auto 
+	true #leave as auto
     else
         $unixtests/endian.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath
 	F="$?"
@@ -3257,7 +3259,7 @@
             echo " If you believe this message is in error you may use the continue"
             echo " switch (-continue) to $0 to continue."
             exit 101
-	else	
+	else
 	    CFG_GETADDRINFO=no
 	fi
     fi
@@ -3525,8 +3527,8 @@
 [ '!' -z "$L_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBDIR_FLAGS+=$L_FLAGS\""
 [ '!' -z "$l_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"LIBS+=$l_FLAGS\""
 
-if [ "$PLATFORM_MAC" = "yes" ]; then  
-    if [ "$CFG_RPATH" = "yes" ]; then  
+if [ "$PLATFORM_MAC" = "yes" ]; then
+    if [ "$CFG_RPATH" = "yes" ]; then
        QMAKE_CONFIG="$QMAKE_CONFIG absolute_library_soname"
     fi
 elif [ -z "`grep QMAKE_RPATH $XQMAKESPEC/qmake.conf | awk '{print $3;}'`" ]; then
@@ -3541,8 +3543,8 @@
         CFG_RPATH=no
     fi
 else
-    if [ "$CFG_RPATH" = "yes" ]; then  
-        # set the default rpath to the library installation directory 
+    if [ "$CFG_RPATH" = "yes" ]; then
+        # set the default rpath to the library installation directory
         RPATH_FLAGS="$QT_INSTALL_LIBS $RPATH_FLAGS"
     fi
     if [ -n "$RPATH_FLAGS" ]; then
@@ -3766,10 +3768,10 @@
 #endif
 EOF
 else
-    echo "#define Q_BYTE_ORDER $CFG_ENDIAN" >>$outpath/src/corelib/global/qconfig.h.new 
+    echo "#define Q_BYTE_ORDER $CFG_ENDIAN" >>$outpath/src/corelib/global/qconfig.h.new
 fi
 
-echo '/* Compile time features */' >>$outpath/src/corelib/global/qconfig.h.new 
+echo '/* Compile time features */' >>$outpath/src/corelib/global/qconfig.h.new
 [ '!' -z "$LicenseKeyExt" ] && echo "#define QT_PRODUCT_LICENSEKEY \"$LicenseKeyExt\"" >>$outpath/src/corelib/global/qconfig.h.new
 
 if [ "$CFG_LARGEFILE" = "yes" ]; then
@@ -3856,14 +3858,14 @@
         QCONFIG_FLAGS="$QCONFIG_FLAGS QT_SQL_$ONDRIVER"
         SQL_DRIVERS="$SQL_DRIVERS $DRIVER"
     ;;
-    plugin)    
+    plugin)
         SQL_PLUGINS="$SQL_PLUGINS $DRIVER"
-    ;; 
-    esac               
+    ;;
+    esac
 done
 
-QMAKE_VARS="$QMAKE_VARS \"sql-drivers = $SQL_DRIVERS\"" 
-QMAKE_VARS="$QMAKE_VARS \"sql-plugins = $SQL_PLUGINS\"" 
+QMAKE_VARS="$QMAKE_VARS \"sql-drivers = $SQL_DRIVERS\""
+QMAKE_VARS="$QMAKE_VARS \"sql-plugins = $SQL_PLUGINS\""
 
 # Add other configuration options to the qconfig.h file
 [ "$CFG_GIF" = "yes" ]       && QCONFIG_FLAGS="$QCONFIG_FLAGS QT_BUILTIN_GIF_READER=1"
@@ -4226,7 +4228,7 @@
     echo
     echo "NOTE: Mac OS X frameworks implicitely build debug and release Qt libraries."
     echo
-fi 
+fi
 echo
 
 sepath=`echo $relpath | sed -e 's/\\./\\\\./g'`
@@ -4424,7 +4426,7 @@
                 echo " (fast)\c"
             fi
             echo
-	
+
             cat >${OUTDIR}/Makefile <<EOF
 # ${OUTDIR}/Makefile: generated by configure
 #
@@ -4432,7 +4434,7 @@
 # All changes made to this file will be lost.
 EOF
             [ "$CFG_BUILD_ALL" = "no" ] && echo "first_target: first" >>${OUTDIR}/Makefile
-        
+
             cat >>${OUTDIR}/Makefile <<EOF
 all clean install qmake first Makefile: FORCE
 	$QMAKE_EXEC
@@ -4493,7 +4495,7 @@
 fi
 
 if [ -n "$RPATH_MESSAGE" ]; then
-    echo 
+    echo
     echo "$RPATH_MESSAGE"
 fi
 
@@ -4501,7 +4503,7 @@
 echo
 echo Qt is now configured for building. Just run \'$MAKE\'.
 if [ "$relpath" = "$QT_INSTALL_PREFIX" ]; then
-    echo Once everything is built, Qt is installed. 
+    echo Once everything is built, Qt is installed.
     echo You should not run \'$MAKE install\'.
 else
     echo Once everything is built, you must run \'$MAKE install\'.
