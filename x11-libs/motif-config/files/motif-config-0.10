#!/bin/bash
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# based on gcc-config by Martin Schlemmer <azarah@gentoo.org
# Author:  Heinrich Wendel <lanius@gentoo.org>

umask 022

PROFILE_PATH=/usr/@@LIBDIR@@/motif
CONFIG_FILE=${PROFILE_PATH}/current

usage() {
cat << "USAGE_END"
Usage: motif-config [option] [profile]
Change the current motif profile, or give info about profiles.

Options:

  -c, --get-current-profile  Print current used motif profile.
  
  -l, --list-profiles        Print a list of available profiles.

  -s, --set-profile          Set the current profile.

  -L, --get-lib-path         Print path where libraries of the given/current
                             profile are located.

  -I, --get-inc-path         Print path where includes of the given/current
                             profile are located.

      --libs                 Print link flags for the given/current
                             profile.

      --cflags               Print compilation flags for the given/current
                             profile.

USAGE_END
    exit $1
}
[[ $# -lt 1 ]] && usage 1
[[ $# -gt 2 ]] && usage 1

# redefine eerror/einfo to remove baselayout dep
# to make ppc-macos people happy
eerror() {
	echo -e " \e[31;01m*\e[0m $*";
	exit 1
}
einfo() {
	echo -e " \e[32;01m*\e[0m $*";
}

_check_root() {
	if [[ "$(id -u)" -ne 0 ]] ; then
		eerror "$0: Must be root."
		exit 1
	fi
}

_activate_profile() {
	_check_root
	local retval=0

	if [ -z "${1}" ]; then
		return 0
	fi

	# set new profile as default
	new=${1}
	files=""
	# libs
	for file in `ls /usr/@@LIBDIR@@/${new}/ | grep lib`; do
		files="${files} /usr/@@LIBDIR@@/${file}"
		rm -rf /usr/@@LIBDIR@@/${file}
		retval=$((retval | $? ))
		ln -s /usr/@@LIBDIR@@/${new}/${file} /usr/@@LIBDIR@@/${file}
		retval=$((retval | $? ))
	done
	# includes
	for file in `ls /usr/include/${new}/`; do
		files="${files} /usr/include/${file}"
		rm -rf /usr/include/${file}
		retval=$((retval | $? ))
		ln -s /usr/include/${new}/${file} /usr/include/${file}
		retval=$((retval | $? ))
	done
	# executables
	for file in mwm uil xmbind; do
		rm -f /usr/bin/${file}
		ln -s /usr/@@LIBDIR@@/${new}/${file} /usr/bin/${file}
	done
	# man pages
	for file in `find /usr/share/man -regex ".*-${new}\..x?.gz"`; do
		files="${files} ${file/-${new}/}"
		rm -rf ${file/-${new}/}
		retval=$((retval | $? ))
		ln -s ${file} ${file/-${new}/}
		retval=$((retval | $? ))
	done

	cat ${PROFILE_PATH}/${new} > ${CONFIG_FILE}
	retval=$((retval | $? ))
	echo "FILES='${files}'" >> ${CONFIG_FILE}
	retval=$((retval | $? ))

	test $retval -eq 0
	return $?
}

_deactivate_profile() {
	_check_root

	source ${CONFIG_FILE} 2>/dev/null
	current=${PROFILE}

	if [ -z "$current" ]; then
		return 0
	fi

	for file in ${FILES}; do
		rm -rf ${file}
		retval=$((retval | $? ))
	done

	rm -rf ${CONFIG_FILE}
	retval=$((retval | $? ))

	test $retval -eq 0
	return $?
}

switch_profile() {
	_check_root
	local retval=0

	if [ -n "$1" ]; then
		if [ ! -e ${PROFILE_PATH}/${1} ]; then
			eerror "$0: no such profile ${1}"
			retval=1
		else
			_deactivate_profile
			retval=$((retval | $? ))
			_activate_profile $1
			retval=$((retval | $? ))
		fi
	else
		source ${CONFIG_FILE} 2> /dev/null
		_deactivate_profile
		retval=$((retval | $? ))
		if [ -z "${PROFILE}" -o ! -f ${PROFILE_PATH}/${PROFILE} ]; then
			for y in `ls ${PROFILE_PATH} | grep -v removed | grep -v current | sort -r`; do
				_activate_profile ${y}
				retval=$((retval | $? ))
				break
			done
			if [ -z "${y}" ]; then
				eerror "$0: no profile to activate"
				retval=1
			fi
		else
			_activate_profile ${PROFILE}
			retval=$((retval | $? ))
		fi
	fi

	source ${CONFIG_FILE} 2>/dev/null
	einfo "$0: New default Profile is: ${PROFILE}"

	test $retval -eq 0
	return $?
}

get_current_profile() {
	source ${CONFIG_FILE} 2> /dev/null
	echo ${PROFILE}
}

list_profiles() {
	i=1
	source ${CONFIG_FILE} 2> /dev/null
	current=${PROFILE}
	for y in `ls ${PROFILE_PATH} | grep -v current | grep -v removed`; do
		source ${PROFILE_PATH}/${y}
		output="[${i}] ${PROFILE}";
		if [ "${y}" = "${current}" ]; then
			output="${output} *"
		fi
		echo "$output"
		i=$((i + 1))
	done
	exit $?
}

get_lib_path() {
	if [ "$1" != "" ]; then
		file=${1}
	else
		file="current"
	fi
	source ${PROFILE_PATH}/${file}
	if [ $? -eq 1 ]; then
		eerror "$0: No such profile: $profile"
	else
		echo "/usr/@@LIBDIR@@/${PROFILE}/"
		exit 0
	fi
}

get_inc_path() {
	if [ "$1" != "" ]; then
		file=${1}
	else
		file="current"
	fi
	source ${PROFILE_PATH}/${file}
	if [ $? -eq 1 ]; then
		eerror "$0: No such profile: $profile"
	else
		echo "/usr/include/${PROFILE}/"
		exit 0
	fi
}

get_cflags() {
	if [ "$1" != "" ]; then
		file=${1}
	else
		file="current"
	fi
	source ${PROFILE_PATH}/${file}
	if [ $? -eq 1 ]; then
		eerror "$0: No such profile: $profile"
	else
		echo "-I/usr/include/${PROFILE}/"
		exit 0
	fi
}

get_libs() {
	if [ "$1" != "" ]; then
		file=${1}
	else
		file="current"
	fi
	source ${PROFILE_PATH}/${file}
	if [ $? -eq 1 ]; then
		eerror "$0: No such profile: $profile"
	else
		echo "-L/usr/@@LIBDIR@@/${PROFILE}/"
		exit 0
	fi
}

for x in "$@"; do
	case "${x}" in
		-c|--get-current-profile)
			[[ $# -ne 1 ]] && usage 1
			get_current_profile
		;;

		-l|--list-profiles)
			[[ $# -ne 1 ]] && usage 1
			list_profiles
		;;

		-s|--set-profile)
			[[ $# -gt 2 ]] && usage 1
			switch_profile $2
			exit $?
		;;

		-L|--get-lib-path)
			[[ $# -gt 2 ]] && usage 1
			get_lib_path $2
		;;

		-I|--get-inc-path)
			[[ $# -gt 2 ]] && usage 1
			get_inc_path $2
		;;

		--cflags)
			[[ $# -gt 2 ]] && usage 1
			get_cflags $2
		;;

		--libs)
			[[ $# -gt 2 ]] && usage 1
			get_libs $2
		;;

		-h|--help)
			usage 0
		;;

		-v|--version)
			echo "motif-config-0.9"
			exit 0
		;;

		-*)
			usage 1
		;;

		*)
			usage 1
		;;

	esac
done
