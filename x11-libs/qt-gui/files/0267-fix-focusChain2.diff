Trolltech task ID : 225816
KDE : 179287
applied: no
author: Alexis Menard <alexis.menard@trolltech.com>

Fix a crash in QGraphicsView with focus chain

Included in 4.4.4

Index: src/gui/graphicsview/qgraphicsscene.cpp
--- src/gui/graphicsview/qgraphicsscene.cpp
+++ src/gui/graphicsview/qgraphicsscene.cpp
@@ -580,12 +580,6 @@ void QGraphicsScenePrivate::_q_removeItemLater(QGraphicsItem *item)
         focusItem = 0;
     if (item == lastFocusItem)
         lastFocusItem = 0;
-    if (item == tabFocusFirst) {
-        QGraphicsWidget *widget = static_cast<QGraphicsWidget *>(item);
-        tabFocusFirst = widget->d_func()->focusNext;
-        if (widget == tabFocusFirst)
-            tabFocusFirst = 0;
-    }
     if (item == activeWindow) {
         // ### deactivate...
         activeWindow = 0;
@@ -2463,6 +2457,10 @@ void QGraphicsScene::removeItem(QGraphicsItem *item)
     // destructor.
     d->removeFromIndex(item);
 
+    if (item == d->tabFocusFirst) {
+        QGraphicsWidget *widget = static_cast<QGraphicsWidget *>(item);
+        widget->d_func()->fixFocusChainBeforeReparenting(0, 0);
+    }
     // Set the item's scene ptr to 0.
     item->d_func()->scene = 0;
 
@@ -2488,10 +2486,6 @@ void QGraphicsScene::removeItem(QGraphicsItem *item)
         d->focusItem = 0;
     if (item == d->lastFocusItem)
         d->lastFocusItem = 0;
-    if (item == d->tabFocusFirst) {
-        QGraphicsWidget *widget = static_cast<QGraphicsWidget *>(item);
-        widget->d_func()->fixFocusChainBeforeReparenting(0, 0);
-    }
     if (item == d->activeWindow) {
         // ### deactivate...
         d->activeWindow = 0;
Index: src/gui/graphicsview/qgraphicswidget.cpp
--- src/gui/graphicsview/qgraphicswidget.cpp
+++ src/gui/graphicsview/qgraphicswidget.cpp
@@ -179,6 +179,11 @@ QGraphicsWidget::QGraphicsWidget(QGraphicsWidgetPrivate &dd, QGraphicsItem *pare
 QGraphicsWidget::~QGraphicsWidget()
 {
     Q_D(QGraphicsWidget);
+    if (QGraphicsScene *scn = scene()) {
+        QGraphicsScenePrivate *sceneD = scn->d_func();
+        if (sceneD->tabFocusFirst == this)
+            sceneD->tabFocusFirst = (d->focusNext == this ? 0 : d->focusNext);
+    }
     d->focusPrev->d_func()->focusNext = d->focusNext;
     d->focusNext->d_func()->focusPrev = d->focusPrev;
 
@@ -1897,18 +1902,25 @@ bool QGraphicsWidget::close()
 #endif
 
 #if 0
-void QGraphicsWidget::dumpFocusChain(QGraphicsWidget *widget)
+void QGraphicsWidget::dumpFocusChain()
 {
     qDebug() << "=========== Dumping focus chain ==============";
     int i = 0;
-    QGraphicsWidget *fw = widget;
-    QGraphicsWidget *next = fw;
-    if (fw) {
-        do {
-            qDebug() << i++ << next->className() << next->data(0) << "focusItem:" << (static_cast<QGraphicsItem*>(next) == fw ? "true" : "false") << "next:" << next->d_func()->focusNext->data(0) << "prev:" << next->d_func()->focusPrev->data(0);
-            next = next->d_func()->focusNext; 
-        } while (next != fw);
-    }
+    QGraphicsWidget *next = this;
+    QSet<QGraphicsWidget*> visited;
+    do {
+        if (!next) {
+            qWarning("Found a focus chain that is not circular, (next == 0)");
+            break;
+        }
+        qDebug() << i++ << QString::number(uint(next), 16) << next->className() << next->data(0) << QString::fromAscii("focusItem:%1").arg(next->hasFocus() ? "1" : "0") << QLatin1String("next:") << next->d_func()->focusNext->data(0) << QLatin1String("prev:") << next->d_func()->focusPrev->data(0);
+        if (visited.contains(next)) {
+            qWarning("Already visited this node. However, I expected to dump until I found myself.");
+            break;
+        }
+        visited << next;
+        next = next->d_func()->focusNext;
+    } while (next != this);
 }
 #endif

Index: src/gui/graphicsview/qgraphicswidget.h
--- src/gui/graphicsview/qgraphicswidget.h
+++ src/gui/graphicsview/qgraphicswidget.h
@@ -115,7 +115,7 @@ public:
     QPainterPath shape() const;
 
 #if 0
-    static void dumpFocusChain(QGraphicsWidget *widget);
+    static void dumpFocusChain();
 #endif
 
     // ### Qt 5: Disambiguate
