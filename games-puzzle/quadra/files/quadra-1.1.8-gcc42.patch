--- skelton/common/bitmap.cpp
+++ skelton/common/bitmap.cpp
@@ -145,11 +145,11 @@
 
 	// Special cases: vertical and horizontal lines.
 	if(y1 == y2)	{
-		hline(y1, min(x1, x2), deltax, color);
+		hline(y1, MIN(x1, x2), deltax, color);
 		return;
 	}
 	if(x1 == x2)	{
-		vline(x1, min(y1, y2), deltay, color);
+		vline(x1, MIN(y1, y2), deltay, color);
 		return;
 	}
 
--- skelton/common/clipable.cpp
+++ skelton/common/clipable.cpp
@@ -31,16 +31,16 @@
 int Clipable::clip_w;
 
 bool Clipable::clip(const int x, const int y, const int w, const int h) const {
-	clip_x1=max(0, x);
+	clip_x1=MAX(0, x);
 	if(clip_x1>=width)
 		return true;
-	clip_x2=min(width-1, x+w-1);
+	clip_x2=MIN(width-1, x+w-1);
 	if(clip_x2<0)
 		return true;
-	clip_y1=max(0, y);
+	clip_y1=MAX(0, y);
 	if(clip_y1>=height)
 		return true;
-	clip_y2=min(height-1, y+h-1);
+	clip_y2=MIN(height-1, y+h-1);
 	if(clip_y2<0)
 		return true;
 	clip_w = clip_x2-clip_x1+1;
--- skelton/common/cursor_self.cpp
+++ skelton/common/cursor_self.cpp
@@ -68,7 +68,7 @@
 }
 
 void Cursor_Self::set_speed(const Byte s) {
-  speed = max(1, s);
+  speed = MAX(1, s);
   pool_x = pool_y = 0;
 }
 
--- skelton/common/inter.cpp
+++ skelton/common/inter.cpp
@@ -420,7 +420,7 @@
 void Zone_panel::resize() {
 	if(pan)
 		delete pan;
-	pan = Video_bitmap::New(x+2, y+2, max(w-4, 0), max(h-4, 0));
+	pan = Video_bitmap::New(x+2, y+2, MAX(w-4, 0), MAX(h-4, 0));
 	dirt();
 }
 
@@ -537,10 +537,10 @@
 		int total_x = inter->font->width(st);
 		sx = inter->font->width(st, curpos);
 		if(sx - panx > w-8) {
-			panx = min(panx + (w>>2), total_x - (w-8));
+			panx = MIN(panx + (w>>2), total_x - (w-8));
 		}
 		if(sx - panx < 0) {
-			panx = max(0, panx - (w>>2));
+			panx = MAX(0, panx - (w>>2));
 		}
 		inter->font->draw(st, pan, -panx, 0);
 
--- skelton/common/net.cpp
+++ skelton/common/net.cpp
@@ -1156,7 +1156,7 @@
 			delete packet;
 			packet=NULL;
 			skelton_msgbox("  bad packet\n  ");
-			Word size=min(nb->len(), 128);
+			Word size=MIN(nb->len(), 128);
 			nb->reset();
 			int i;
 			for(i=0; i<size; i++)
--- skelton/common/res_compress.cpp
+++ skelton/common/res_compress.cpp
@@ -91,7 +91,7 @@
 
 void Res_compress::write(const void *b, int nb) {
 	if(write_pos + nb > ressize) { 
-		ressize = ressize + max(nb, 16384);
+		ressize = ressize + MAX(nb, 16384);
 		_buf = (Byte *) realloc(_buf, ressize);
 		if(_buf == NULL)
 			(void) new Error("Unable to reallocate buffer (need %i bytes)\n", ressize);
--- skelton/common/sprite.cpp
+++ skelton/common/sprite.cpp
@@ -101,7 +101,7 @@
 			tmp = new Bitmap(w, h, rw);
 			res.read((*tmp)[0], rw*h);
 			spr[i] = new Sprite(*tmp, 0, 0, 0);
-			pre_width[i] = max(spr[i]->width - shrink, 3);
+			pre_width[i] = MAX(spr[i]->width - shrink, 3);
 			delete tmp;
 		} else {
 			spr[i] = NULL;
--- skelton/include/array.h
+++ skelton/include/array.h
@@ -23,11 +23,11 @@
 #include <vector>
 #include <algorithm>
 
-#ifndef max
-#define max(a,b) (((a) > (b)) ? (a) : (b))
+#ifndef MAX
+#define MAX(a,b) (((a) > (b)) ? (a) : (b))
 #endif
-#ifndef min
-#define min(a,b) (((a) < (b)) ? (a) : (b))
+#ifndef MIN
+#define MIN(a,b) (((a) < (b)) ? (a) : (b))
 #endif
 
 template <class T>
--- skelton/include/types.h
+++ skelton/include/types.h
@@ -21,11 +21,11 @@
 #ifndef _HEADER_TYPES
 #define _HEADER_TYPES
 
-#ifndef max
-#define max(a,b) (((a) > (b)) ? (a) : (b))
+#ifndef MAX
+#define MAX(a,b) (((a) > (b)) ? (a) : (b))
 #endif
-#ifndef min
-#define min(a,b) (((a) < (b)) ? (a) : (b))
+#ifndef MIN
+#define MIN(a,b) (((a) < (b)) ? (a) : (b))
 #endif
 
 #ifndef NULL
--- source/canvas.cpp
+++ source/canvas.cpp
@@ -387,7 +387,7 @@
 						bflash[y][x]=32;
 						dirted[y][x]=2;
 					}
-					tmp=min(255, tmp+time);
+					tmp=MIN(255, tmp+time);
 					blinded[y][x] = tmp;
 				}
 			}
@@ -434,7 +434,7 @@
 		if(nb+bonus > 20)
 			nb = 20-bonus;
 		nc--;
-		int normal = max(nb - nc, 0);
+		int normal = MAX(nb - nc, 0);
 		int fucked = nb - normal;
 		if(game->net_version()>=23) {
 			for(x=0; x<nb; x++) {
@@ -540,7 +540,7 @@
 			alive_count-=4;
 		else
 			alive_count=0;
-		i = max(0, depth-1-alive_count);
+		i = MAX(0, depth-1-alive_count);
 		// this is a bug, it should have been done like net_version >= 24 (below)
 		//   but it must remain as is for network compatibility
 		enough=i? true:false;
@@ -864,10 +864,10 @@
   h1 = (y1+h1+17)/18;
   x1 = x1/18;
   y1 = y1/18;
-  x1 = max(0,x1);
-  y1 = max(0,y1);
-  w1 = min(10,w1);
-  h1 = min(20,h1);
+  x1 = MAX(0,x1);
+  y1 = MAX(0,y1);
+  w1 = MIN(10,w1);
+  h1 = MIN(20,h1);
   for(j=y1; j<h1; j++)
     for(i=x1; i<w1; i++)
       dirted[j+12][i+4]=2;
--- source/quadra.cpp
+++ source/quadra.cpp
@@ -970,8 +970,8 @@
 		p.y=canvas->bloc->by;
 		p.player=canvas->num_player;
 		if(game->net_version()<23) {
-			i = max(overmind.framecount - canvas->frame_start - 50, 0);
-			p.score=max(0, 100 - i) >> 1;
+			i = MAX(overmind.framecount - canvas->frame_start - 50, 0);
+			p.score=MAX(0, 100 - i) >> 1;
 		}
 		else
 			p.score=0;
@@ -1621,7 +1621,7 @@
 	}
 
 	// adjust handicap_crowd considering crowdedness of the game (i.e. number of players alive)
-	int max_handicap_crowd = max(0, int(game->net_list.count_alive())-4);
+	int max_handicap_crowd = MAX(0, int(game->net_list.count_alive())-4);
 	max_handicap_crowd *= Canvas::stamp_per_handicap;
 	if(canvas->handicap_crowd < max_handicap_crowd)
 		++canvas->handicap_crowd;
@@ -2049,7 +2049,7 @@
 	if(!strcmp(temp, "blind") || !strcmp(temp, "fullblind")) {
 		if(param) {
 			int p=atoi(param);
-			p=min(max(1, p), 255);
+			p=MIN(MAX(1, p), 255);
 			ret.param=p;
 		}
 	}
@@ -2077,7 +2077,7 @@
 			res="help_fr.txt"; break;
 	}
 	Res_doze cmdline(res);
-	Dword size = min(sizeof(st)-1, cmdline.size());
+	Dword size = MIN(sizeof(st)-1, cmdline.size());
 	strncpy(st, (char *)cmdline.buf(), size);
 	st[size] = 0;
 	if(video)
@@ -2090,7 +2090,7 @@
 	Res_dos script(fn);
 	if(script.exist) {
 		//-2 because Stringtable is strange
-		Dword size = min(sizeof(st)-2, script.size());
+		Dword size = MIN(sizeof(st)-2, script.size());
 		strncpy(st, (char *)script.buf(), size);
 		st[size] = 0;
 		Stringtable str((Byte *)st, size);
@@ -2258,7 +2258,7 @@
 				p.set_preset(PRESET_BLIND);
 				char *temp = command_get_param("blind <n>", "30");
 				Dword time=atoi(temp);
-				time=min(max(time, 0), 255);
+				time=MIN(MAX(time, 0), 255);
 				p.normal_attack.param=time;
 				p.clean_attack.param=time;
 			}
@@ -2266,7 +2266,7 @@
 				p.set_preset(PRESET_FULLBLIND);
 				char *temp = command_get_param("fullblind <n>", "12");
 				Dword time=atoi(temp);
-				time=min(max(time, 0), 255);
+				time=MIN(MAX(time, 0), 255);
 				p.normal_attack.param=time;
 				p.clean_attack.param=time;
 			}
@@ -2293,7 +2293,7 @@
 			if(command.token("level")) {
 				char *temp = command_get_param("level <level number>");
 				p.level_start = atoi(temp);
-				p.level_start = min(max(p.level_start, 1), 40);
+				p.level_start = MIN(MAX(p.level_start, 1), 40);
 			}
 			if(command.token("name")) {
 				char *temp = command_get_param("name <game name>");
@@ -2315,7 +2315,7 @@
 			if(p.game_end != END_NEVER) {
 				char *temp = command_get_param("endfrag/endtime/endpoints <number>");
 				p.game_end_value = atoi(temp);
-				p.game_end_value = min(max(p.game_end_value, 1), p.game_end<=END_TIME? 9999:99999);
+				p.game_end_value = MIN(MAX(p.game_end_value, 1), p.game_end<=END_TIME? 9999:99999);
 			}
 			if(command.token("public"))
 				p.game_public = true;
