Index: src/object_mixins.hh
===================================================================
--- src/object_mixins.hh
+++ src/object_mixins.hh	2004-07-02 16:46:30.787586969 +0200
@@ -80,14 +80,14 @@
     template <class T>
     class OnOffBase : public T {
     protected:
-        OnOffBase(const char *kind) : T(kind) { set_attrib("on", 0.0); }
+        OnOffBase(const char *kind) : T(kind) { this->set_attrib("on", 0.0); }
 
-        bool is_on() const { return int_attrib("on") == 1; }
+        bool is_on() const { return this->int_attrib("on") == 1; }
 
         void set_on(bool newon) {
             if (newon != is_on()) {
-                set_attrib("on", Value(newon));
-                init_model();
+                this->set_attrib("on", Value(newon));
+                this->init_model();
                 notify_onoff(newon);
             }
         }
Index: src/px/alist.hh
===================================================================
--- src/px/alist.hh
+++ src/px/alist.hh	2004-07-02 16:43:07.785292225 +0200
@@ -43,7 +43,7 @@
         // Lookup of keys
         //
         iterator find (const key_type &key) {
-            iterator i=begin(), e=end();
+            iterator i=this->begin(), e=this->end();
             for (; i!=e; ++i) 
                 if (i->first == key)
                     break;
@@ -51,7 +51,7 @@
         }
 
         const_iterator find (const key_type &key) const {
-            const_iterator i=begin(), e=end();
+            const_iterator i=this->begin(), e=this->end();
             for (; i!=e; ++i) 
                 if (i->first == key)
                     break;
@@ -60,8 +60,8 @@
 
 	VAL &operator[] (const key_type &key) { 
             iterator i=find(key);
-            if (i==end())
-                i=insert(end(), make_pair(key, VAL()));
+            if (i==this->end())
+                i=insert(this->end(), make_pair(key, VAL()));
             return i->second;
         }
     };
Index: src/px/array2.hh
===================================================================
--- src/px/array2.hh
+++ src/px/array2.hh	2004-07-02 16:42:05.426430416 +0200
@@ -70,14 +70,14 @@
         // Destructor
         ~Array2() { destroy_elements(); }
 
-        iterator begin() { return first; }
-        iterator end() { return last; }
-        const_iterator begin() const { return first; }
-        const_iterator end() const { return last; }
-        iterator row_begin(size_type y) { return first + y*w; }
-        iterator row_end(size_type y) { return first + y*w + w; }
-        const_iterator row_begin(size_type y) const { return first + y*w; }
-        const_iterator row_end(size_type y) const { return first + y*w + w; }
+        iterator begin() { return this->first; }
+        iterator end() { return this->last; }
+        const_iterator begin() const { return this->first; }
+        const_iterator end() const { return this->last; }
+        iterator row_begin(size_type y) { return this->first + y*w; }
+        iterator row_end(size_type y) { return this->first + y*w + w; }
+        const_iterator row_begin(size_type y) const { return this->first + y*w; }
+        const_iterator row_end(size_type y) const { return this->first + y*w + w; }
 
 
         void swap(Array2<T,A> &a2);
@@ -86,13 +86,13 @@
         size_type height()const { return h; }
 
 
-        T&	 get(size_type x, size_type y) { return first[y*w+x]; }
-        const T& get(size_type x, size_type y) const { return first[y*w+x]; }
+        T&	 get(size_type x, size_type y) { return this->first[y*w+x]; }
+        const T& get(size_type x, size_type y) const { return this->first[y*w+x]; }
         T& 	 operator()(size_type x, size_type y) { return get(x,y); }
         const T& operator()(size_type x, size_type y) const { return get(x,y); }
 
         void 	 set(size_type x, size_type y, const T& val) {
-            first[y*w+x] = val;
+            this->first[y*w+x] = val;
         }
 
         /*! Fill the array with some value or the default value. */
@@ -112,19 +112,19 @@
     Array2<T,A>::Array2(int ww, int hh, const T& val, const A& a)
     : Array2Base<T,A>(a, ww*hh), w(ww), h(hh)
     {
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
     }
 
     template <class T, class A>
     Array2<T,A>::Array2(const Array2<T,A> &a)
     : Array2Base<T,A>(a.alloc, a.last-a.first)
     {
-        std::uninitialized_copy(a.begin(), a.end(), first);
+        std::uninitialized_copy(a.begin(), a.end(), this->first);
     }
 
     template <class T, class A>
     void Array2<T,A>::destroy_elements() {
-        for (T* p=first; p!=last; ++p)
+        for (T* p=this->first; p!=this->last; ++p)
             p->~T();
     }
 
@@ -132,7 +132,7 @@
     void Array2<T,A>::fill (const T& val)
     {
         destroy_elements();
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
     }
 
     /*! Resize the array in place, but discard any old array
@@ -142,7 +142,7 @@
     {
         destroy_elements();
         Array2Base<T,A>::resize(w_*h_);
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
         w = w_;
         h = h_;
     }
@@ -150,8 +150,8 @@
     template <class T, class A>
     void Array2<T,A>::swap(Array2<T,A> &a2)
     {
-        std::swap(first, a2.first);
-        std::swap(last, a2.last);
+        std::swap(this->first, a2.first);
+        std::swap(this->last, a2.last);
         std::swap(w, a2.w);
         std::swap(h, a2.h);
     }
Index: src/px/dict.hh
===================================================================
--- src/px/dict.hh
+++ src/px/dict.hh	2004-07-02 16:32:18.620140973 +0200
@@ -101,8 +101,8 @@
     public:
 	typedef Iter<value_type>                iterator;
   	typedef Iter<const value_type>          const_iterator;
-        friend class iterator;
-        friend class const_iterator;        
+        //friend class iterator;
+        //friend class const_iterator;        
 
 	Dict(size_type table_size = 257);
         ~Dict();
@@ -126,7 +126,7 @@
 	
 	const T& lookup(const std::string &key) const {
 	    Entry *e = find_entry(key);
-	    if (!e) throw XInvalidKey();
+	    if (!e) throw this->XInvalidKey();
 	    return e->pair.second;
 	}
 
Index: src/px/video.cc
===================================================================
--- src/px/video.cc
+++ src/px/video.cc	2004-07-02 16:38:16.957600495 +0200
@@ -207,16 +207,16 @@
         void set_pixels(int n, const int* xlist, const int* ylist, Uint32 color)
         {
             const int *xp = xlist, *yp = ylist;
-            if (NOCLIP(gs)) {
+            if (NOCLIP(this->gs)) {
                 for (int i=n; i > 0; --i) {
                     int x = *xp++, y = *yp++;
-                    *pixel_pointer(x,y) = gs.pcolor;
+                    *pixel_pointer(x,y) = this->gs.pcolor;
                 }
             } else {
                 for (int i=n; i > 0; --i) {
                     int x = *xp++, y = *yp++;
-                    if (clip_pixel (gs, x, y))
-                        *pixel_pointer(x,y) = gs.pcolor;
+                    if (clip_pixel (this->gs, x, y))
+                        *pixel_pointer(x,y) = this->gs.pcolor;
                 }
             }
         }
