diff --exclude='*~' -Naur ghostscript-8.53.orig/src/gxccache.c ghostscript-8.53/src/gxccache.c
--- ghostscript-8.53.orig/src/gxccache.c	2006-02-03 17:38:36.000000000 -0200
+++ ghostscript-8.53/src/gxccache.c	2006-02-03 17:40:12.000000000 -0200
@@ -85,9 +85,8 @@
     float mxx, mxy, myx, myy;
     gs_font *font = pfont;
     register gs_font_dir *dir = font->dir;
-    register cached_fm_pair *pair =
-    dir->fmcache.mdata + dir->fmcache.mnext;
-    int count = dir->fmcache.mmax;
+    register cached_fm_pair *pair = dir->fmcache.mdata + dir->fmcache.used;
+    int count = dir->fmcache.msize;
     gs_uid uid;
 
     gx_compute_ccache_key(pfont, char_tm, log2_scale, design_grid,
@@ -99,10 +98,7 @@
 	if (uid_is_valid(&uid))
 	    font = 0;
     }
-    while (count--) {
-	if (pair == dir->fmcache.mdata)
-	    pair += dir->fmcache.mmax;
-	pair--;
+    for (;count--; pair = dir->fmcache.mdata + pair->next) {
 	/* We have either a non-zero font and an invalid UID, */
 	/* or a zero font and a valid UID. */
 	/* We have to break up the test */
@@ -127,6 +123,7 @@
 		if_debug2('k', "[k]found pair 0x%lx: font=0x%lx\n",
 			  (ulong) pair, (ulong) pair->font);
 	    }
+	    gx_touch_fm_pair(dir, pair);
 	    *ppair = pair;
 	    return 0;
 	}
diff --exclude='*~' -Naur ghostscript-8.53.orig/src/gxccman.c ghostscript-8.53/src/gxccman.c
--- ghostscript-8.53.orig/src/gxccman.c	2006-02-03 17:38:35.000000000 -0200
+++ ghostscript-8.53/src/gxccman.c	2006-02-03 17:53:25.000000000 -0200
@@ -119,7 +119,9 @@
 			     "initial_chunk");
 
     dir->fmcache.msize = 0;
-    dir->fmcache.mnext = 0;
+    dir->fmcache.used = dir->fmcache.mmax;
+    dir->fmcache.free = dir->fmcache.mmax;
+    dir->fmcache.unused = 0;
     gx_bits_cache_chunk_init(cck, NULL, 0);
     gx_bits_cache_init((gx_bits_cache *) & dir->ccache, cck);
     dir->ccache.bspace = 0;
@@ -158,6 +160,48 @@
     }
 }
 
+/* ====== font-matrix pair lists ====== */
+
+private void
+fm_pair_remove_from_list(gs_font_dir * dir, cached_fm_pair *pair, uint *head)
+{
+    assert(dir->fmcache.mdata + pair->index == pair);
+    if (pair->next == pair->index) {
+	/* The list consists of single element. */
+	assert(pair->prev == pair->index);
+	*head = dir->fmcache.mmax;
+    } else {
+	cached_fm_pair *next = dir->fmcache.mdata + pair->next;
+	cached_fm_pair *prev = dir->fmcache.mdata + pair->prev;
+
+	assert(next->prev == pair->index);
+	assert(prev->next == pair->index);
+	if (*head == pair->index)
+	    *head = next->index;
+	next->prev = prev->index;
+	prev->next = next->index;
+    }
+}
+
+private void
+fm_pair_insert_into_list(gs_font_dir * dir, cached_fm_pair *pair, uint *head)
+{
+    assert(dir->fmcache.mdata + pair->index == pair);
+    if (*head >= dir->fmcache.mmax) {
+	*head = pair->next = pair->prev = pair->index;
+    } else {
+	cached_fm_pair *first = dir->fmcache.mdata + *head;
+	cached_fm_pair *last = dir->fmcache.mdata + first->prev;
+
+	assert(first->prev == last->index);
+	assert(last->next == first->index);
+	pair->next = first->index;
+	pair->prev = last->index;
+	first->prev = last->next = pair->index;
+	*head = pair->index;	
+    }
+}
+
 /* ====== Font-level routines ====== */
 
 /* Add a font/matrix pair to the cache. */
@@ -168,29 +212,43 @@
 	       bool design_grid, cached_fm_pair **ppair)
 {
     float mxx, mxy, myx, myy;
-    register cached_fm_pair *pair = dir->fmcache.mdata + dir->fmcache.mnext;
+    register cached_fm_pair *pair;
     cached_fm_pair *mend = dir->fmcache.mdata + dir->fmcache.mmax;
+    int code;
 
     gx_compute_ccache_key(font, char_tm, log2_scale, design_grid,
 			    &mxx, &mxy, &myx, &myy);
-    if (dir->fmcache.msize == dir->fmcache.mmax) {	/* cache is full *//* Prefer an entry with num_chars == 0, if any. */
-	int count;
-
-	for (count = dir->fmcache.mmax;
-	     --count >= 0 && pair->num_chars != 0;
-	    )
-	    if (++pair == mend)
-		pair = dir->fmcache.mdata;
+    if (dir->fmcache.msize == dir->fmcache.mmax) {	
+	/* cache is full, drop the older entry. */
+	/* gx_touch_fm_pair must be called whenever
+	   a pair is used to move it to the top of the list.
+	   Since we drop a pair from the list bottom,
+	   and since the list is long enough,
+	   with a high probability it won't drop a pair, 
+	   which currently is pointed by an active text enumerator.
+	   
+	   Note that with Type 3 fonts multiple text enumerators
+	   may be active (exist on estack) in same time,
+	   therefore the list length sets a constraint for
+	   the number of font-matrix pairs used within a charproc.
+	   If it uses too many ones, the outer text enumerator
+	   will fail with 'invalidfont' in gx_add_cached_char.
+	*/
+	pair = dir->fmcache.mdata + dir->fmcache.used;
+	pair = dir->fmcache.mdata + pair->prev; /* last touched. */
 	gs_purge_fm_pair(dir, pair, 0);
-    } else {			/* Look for an empty entry.  (We know there is one.) */
-	while (!fm_pair_is_free(pair))
-	    if (++pair == mend)
-		pair = dir->fmcache.mdata;
+    }
+    if (dir->fmcache.free < dir->fmcache.mmax) {
+	/* use a free entry. */
+	pair = dir->fmcache.mdata + dir->fmcache.free;
+	fm_pair_remove_from_list(dir, pair, &dir->fmcache.free);
+    } else {
+	/* reserve a new entry. */
+	pair = dir->fmcache.mdata + dir->fmcache.unused;
+	dir->fmcache.unused++;
     }
     dir->fmcache.msize++;
-    dir->fmcache.mnext = pair + 1 - dir->fmcache.mdata;
-    if (dir->fmcache.mnext == dir->fmcache.mmax)
-	dir->fmcache.mnext = 0;
+    fm_pair_insert_into_list(dir, pair, &dir->fmcache.used);
     pair->font = font;
     pair->UID = *puid;
     pair->FontType = font->FontType;
@@ -207,7 +265,6 @@
     pair->design_grid = false;
     if (font->FontType == ft_TrueType || font->FontType == ft_CID_TrueType) 
 	if (((gs_font_type42 *)font)->FAPI==NULL) {
-	    int code; 
 	    float cxx, cxy, cyx, cyy;
 	    gs_matrix m;
 	    gx_compute_char_matrix(char_tm, log2_scale, &cxx, &cxy, &cyx, &cyy);
@@ -241,6 +298,16 @@
     return 0;
 }
 
+/* Update the pointer to the last used font/matrix pair. */
+void
+gx_touch_fm_pair(gs_font_dir *dir, cached_fm_pair *pair)
+{
+    if (pair->index != dir->fmcache.used) {
+	fm_pair_remove_from_list(dir, pair, &dir->fmcache.used);
+	fm_pair_insert_into_list(dir, pair, &dir->fmcache.used);
+    }
+}
+
 /* Look up the xfont for a font/matrix pair. */
 /* (This is only exported for gxccache.c.) */
 void
@@ -343,6 +410,8 @@
 	ttfFont__destroy(pair->ttf, dir);
     pair->ttf = 0;
     if (!xfont_only) {
+	int code; 
+
 #ifdef DEBUG
 	if (pair->num_chars != 0) {
 	    lprintf1("Error in gs_purge_fm_pair: num_chars =%d\n",
@@ -350,6 +419,8 @@
 	}
 #endif
 	fm_pair_set_free(pair);
+	fm_pair_remove_from_list(dir, pair, &dir->fmcache.used);
+	fm_pair_insert_into_list(dir, pair, &dir->fmcache.free);
 	dir->fmcache.msize--;
     }
 }
@@ -563,8 +634,16 @@
 	       discovered an insufficient FontBBox and enlarged it. 
 	       Glyph raster params could change then. */
 	    cc->pair = pair;
-	} else
-	    assert(cc->pair == pair);
+	} else if (cc->pair != pair) {
+	    /* gx_add_fm_pair could drop the active font-matrix pair
+	       due to cache overflow during a charproc interpretation. 
+	       Likely a single charproc renders too many characters
+	       for generating the character image.
+	       We have no mechanizm for locking font-matrix pairs in cache
+	       to avoud their dissipation. Therefore we consider this failure 
+	       as an implementation limitation. */
+	    return_error(gs_error_invalidfont);
+	}
 	cc->linked = true;
 	cc_set_pair(cc, pair);
 	pair->num_chars++;
diff --exclude='*~' -Naur ghostscript-8.53.orig/src/gxfcache.h ghostscript-8.53/src/gxfcache.h
--- ghostscript-8.53.orig/src/gxfcache.h	2006-02-03 17:38:35.000000000 -0200
+++ ghostscript-8.53/src/gxfcache.h	2006-02-03 17:54:32.000000000 -0200
@@ -91,6 +91,7 @@
     ttfFont *ttf;		/* True Type interpreter data. */
     gx_ttfReader *ttr;		/* True Type interpreter data. */
     bool design_grid;           /* A charpath font face.  */
+    uint prev, next;            /* list of pairs. */
 };
 
 #define private_st_cached_fm_pair() /* in gxccman.c */\
@@ -113,7 +114,9 @@
 typedef struct fm_pair_cache_s {
     uint msize, mmax;		/* # of cached font/matrix pairs */
     cached_fm_pair *mdata;
-    uint mnext;			/* rover for allocating font/matrix pairs */
+    uint used;			/* list of used pairs in the touch order. */
+    uint free;			/* list of free pairs. */
+    uint unused;		/* index of the first unused pair. */
 } fm_pair_cache;
 
 /* ------ Character cache entry ------- */
@@ -319,6 +322,7 @@
 int gx_add_fm_pair(register gs_font_dir * dir, gs_font * font, const gs_uid * puid,
 	       const gs_matrix * char_tm, const gs_log2_scale_point *log2_scale,
 	       bool design_grid, cached_fm_pair **ppair);
+void gx_touch_fm_pair(gs_font_dir *dir, cached_fm_pair *pair);
 void gx_lookup_xfont(const gs_state *, cached_fm_pair *, int);
 void gs_purge_fm_pair(gs_font_dir *, cached_fm_pair *, int);
 void gs_purge_font_from_char_caches(gs_font_dir *, const gs_font *);
