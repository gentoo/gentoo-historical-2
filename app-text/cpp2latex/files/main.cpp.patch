--- cpp2latex/main.cpp	2002-12-23 11:17:05.000000000 -0600
+++ main.cpp	2002-12-31 11:23:20.000000000 -0600
@@ -28,15 +28,16 @@
 #include <getopt.h>
 
 struct replace{
-	string voraus;
-	string ersetzt;
+	std::string voraus;
+	std::string ersetzt;
 };
 
-vector <replace> rules;
-string syntax( ifstream *src, char *c );
+std::vector <replace> rules;
+std::string syntax( std::ifstream *src, char *c );
 void initReplace();
 bool satzzeichen( char c );
-bool satzzeichen( ifstream *src );
+bool satzzeichen( std::ifstream *src );
+void addLine( std::string &add, std::string &to, bool wrapsafe = false );
 
 int main(int argc, char *argv[])
 {
@@ -55,6 +56,7 @@
      zeichen=false, // ob das vorherige Zeichen ein Satzzeichen war.
      highlight=false,
      linenumbering=false,
+     wrapsafe=false,
      inc=false // if we are inside an include-statement.
      ;
 int  skip=17,
@@ -62,7 +64,7 @@
      line=1,
      optcount=1,
      optch=0;
-string tab="";
+std::string tab="";
 
 	for(int i=0; i<argc; i++)
 		if( !strcmp(argv[i],"--help") ) { help=true; }
@@ -71,7 +73,7 @@
 
 if(!help) // If Help isn't wanted:
 {
-	while( ( optch=getopt( argc,argv, "s:cCft:gphHn" ) ) > 0 )
+	while( ( optch=getopt( argc,argv, "s:cCft:gphHnw" ) ) > 0 )
 	switch( optch )
 	{
 		case 's': skip=atoi( optarg ); optcount+=2; break; // Skip n lines at the beginning of the file.
@@ -83,37 +85,41 @@
 		case 'p': ps=true; optcount++; break; // Use Postscriptfonts.
 		case 'h': highlight=true; optcount++; break; // Turn on syntax higlighting.
 		case 'n': linenumbering=true; optcount++; break; // Print the linenumbers.
+		case 'w': wrapsafe=true; optcount++; break; // Protect against linewrapping
 	}
 
-	cerr<<endl<<"Processing file "<<argv[optcount]<<endl;
-ifstream file;
+	std::cerr<<"This program has been modified for Gentoo Linux"<<std::endl;
+	std::cerr<<std::endl<<"Processing file "<<argv[optcount]<<std::endl;
+std::ifstream file;
 	file.open( argv[optcount] );
 
 	// Skip lines
-	cerr<<"  Skipping "<<skip<<" lines."<<endl;
+	std::cerr<<"  Skipping "<<skip<<" lines."<<std::endl;
 	for(int i=0; i<skip; i++)
 	{
-	char* tmp;
-		file.gets( &tmp );
+	std::string temp;
+		getline(file, temp);
 	}
 
 	// Set tabspace
-	cerr<<"  Tabspace set to "<<tabspace<<" spaces."<<endl;
+	std::cerr<<"  Tabspace set to "<<tabspace<<" spaces."<<std::endl;
 	for(int i=0; i<tabspace; i++)
 		tab+="\\ ";
 
 	// Enable-Messages
-	if( highlight ) cerr<<"  Syntax-highlighting enabled."<<endl;
-	if( highlight && !ps ) cerr<<"  * You should use Postscriptfonts since the normal TeX  *"<<endl
-                                   <<"  * Computer Modern has no bold face for the fixedwidth. *"<<endl;
-	if(full) cerr<<"  Full-LaTeX-output enabled."<<endl;
-	if(ps) cerr<<"  PostScriptFonts enabled."<<endl;
-	if(geometry) cerr<<"  Geometry-package enabled."<<endl;
-	if(strcom) cerr<<"  String-constants in comments are typesetted in Roman too."<<endl;
-	if(linenumbering) cerr<<"  Linenumbering is enabled."<<endl;
+	if( highlight ) std::cerr<<"  Syntax-highlighting enabled."<<std::endl;
+	if( highlight && !ps ) std::cerr<<"  * You should use Postscriptfonts since the normal TeX  *"<<std::endl
+                                   <<"  * Computer Modern has no bold face for the fixedwidth. *"<<std::endl;
+	if(full) std::cerr<<"  Full-LaTeX-output enabled."<<std::endl;
+	if(ps) std::cerr<<"  PostScriptFonts enabled."<<std::endl;
+	if(geometry) std::cerr<<"  Geometry-package enabled."<<std::endl;
+	if(strcom) std::cerr<<"  String-constants in comments are typesetted in Roman too."<<std::endl;
+	if(linenumbering) std::cerr<<"  Linenumbering is enabled."<<std::endl;
+	if(wrapsafe) std::cerr<<"  Linewrap protection enabled."<<std::endl;
 
 	// Ausgabestring initialisieren
-string out="{\\ttfamily \\raggedright \\small\n";
+std::string output="{\\ttfamily \\raggedright \\small\n";
+std::string out;
 	if(linenumbering) out+="001 ";
 
 	// Here we go:
@@ -188,7 +194,8 @@
 			case '\n':
 				if(blankline) out+="\\ ";
 				if(comment1) { out+="}"; comment1=false; }
-				out+="\\\\"; out+=c; blankline=true;
+				addLine( out, output, wrapsafe );
+				output+="\\\\"; output+=c; blankline=true;
 				char str[10];
 				sprintf(str,"%03d ",line);
 				if(linenumbering) out+=str;
@@ -220,13 +227,14 @@
 		}
 		zeichen = satzzeichen( c );
 	}
-
-	out+=" }\n\\normalfont\\normalsize\n\n";
+	// if the file doesn't end with a newline we need to add the last line
+	addLine( out, output, wrapsafe );
+	output+=" }\n\\normalfont\\normalsize\n\n";
 
 	// * * * Full LaTeX-Files:
 	if(full)
 	{
-	string tmp="";
+	std::string tmp="";
 		tmp+="\\documentclass[a4paper,10pt]{article}\n";
 		tmp+="\\usepackage[T1]{fontenc}\n";
 		tmp+="\\usepackage{isolatin1,german}\n";
@@ -237,52 +245,53 @@
 		tmp+="\\parindent0cm\n";
 		tmp+="\\parskip1.5ex\n";
 		tmp+="\\begin{document}\n";
-		tmp+=out;
+		tmp+=output;
 		tmp+="\\end{document}\n";
-		out=tmp;
+		output=tmp;
 	}
 
 	// * * * Output * * *
-	cout<<out;
+	std::cout<<output;
 	file.close();
-	cerr<<"Everything went well."<<endl<<endl;
+	std::cerr<<"Everything went well."<<std::endl<<std::endl;
 }
 else // * * * Helptext * * *
 {
-	cerr<<endl<<"Usage: "<<argv[0]<<" [options] <filename>"<<endl<<endl
-			<<"<filename> is the name of the file you want to convert."<<endl
-			<<"The resulting LaTeX-code comes to stdout which you can redirect to a file or pipe to LaTeX."<<endl<<endl
-			<<"Possible Options are:"<<endl
-			<<"    -c          : Controls wether String constants in Comments are typesetted in roman or not."<<endl
-			<<"                  Default is not."<<endl
-			<<"    -C          : Prints string constants in roman."<<endl
-			<<"    -f          : The output is not only a text to insert into an existing LaTeX-document,"<<endl
-			<<"                  but a full document with header and so on."<<endl
-			<<"                  Default is not."<<endl
-			<<"       -g       : If a full LaTeX-file is created: Adds geometry-package with 2cm margin on all sides"<<endl
-			<<"                  Default is off."<<endl
-			<<"       -p       : If a full LaTeX-file is created: Adds PostScript fonts {times,helvet,courier}."<<endl
-			<<"                  Default is off. courier is used for the code, times for the string constants."<<endl
-			<<"    -h          : Enables Syntax Highlighting."<<endl
-			<<"                  Now implemented for C++."<<endl
-			<<"    -s <number> : Controls how many lines are to be skipped at the beginning of the file."<<endl
-			<<"                  Default are 17 lines which is the normal KDevelop-header."<<endl
-			<<"    -t <number> : Controls how many spaces should be inserted for a tabulator."<<endl
-			<<"                  Default is 2"<<endl
-			<<"    -n          : Turn on Line numbering. (Thanks to Eduard Bröcker)"<<endl
-			<<"    --help      : Shows this helpmessage."<<endl<<endl;
+	std::cerr<<std::endl<<"Usage: "<<argv[0]<<" [options] <filename>"<<std::endl<<std::endl
+			<<"<filename> is the name of the file you want to convert."<<std::endl
+			<<"The resulting LaTeX-code comes to stdout which you can redirect to a file or pipe to LaTeX."<<std::endl<<std::endl
+			<<"Possible Options are:"<<std::endl
+			<<"    -c          : Controls wether String constants in Comments are typesetted in roman or not."<<std::endl
+			<<"                  Default is not."<<std::endl
+			<<"    -C          : Prints string constants in roman."<<std::endl
+			<<"    -f          : The output is not only a text to insert into an existing LaTeX-document,"<<std::endl
+			<<"                  but a full document with header and so on."<<std::endl
+			<<"                  Default is not."<<std::endl
+			<<"       -g       : If a full LaTeX-file is created: Adds geometry-package with 2cm margin on all sides"<<std::endl
+			<<"                  Default is off."<<std::endl
+			<<"       -p       : If a full LaTeX-file is created: Adds PostScript fonts {times,helvet,courier}."<<std::endl
+			<<"                  Default is off. courier is used for the code, times for the string constants."<<std::endl
+			<<"    -h          : Enables Syntax Highlighting."<<std::endl
+			<<"                  Now implemented for C++."<<std::endl
+			<<"    -s <number> : Controls how many lines are to be skipped at the beginning of the file."<<std::endl
+			<<"                  Default are 17 lines which is the normal KDevelop-header."<<std::endl
+			<<"    -t <number> : Controls how many spaces should be inserted for a tabulator."<<std::endl
+			<<"                  Default is 2"<<std::endl
+			<<"    -n          : Turn on Line numbering. (Thanks to Eduard Bröcker)"<<std::endl
+			<<"    -w          : Make sure long lines don't wrap."<<std::endl
+			<<"    --help      : Shows this helpmessage."<<std::endl<<std::endl;
 }
 
-  cerr<<"(c)2001 by Arnold Krille <arnold@arnoldarts.de>"<<endl
-			<<"> http://www.arnoldarts.de/ <"<<endl<<endl;
+  std::cerr<<"(c)2001 by Arnold Krille <arnold@arnoldarts.de>"<<std::endl
+			<<"> http://www.arnoldarts.de/ <"<<std::endl<<std::endl;
 
   return EXIT_SUCCESS;
 }
 
 /** Syntaxhighlighting Funktion */
-string syntax( ifstream *src, char *c )
+std::string syntax( std::ifstream *src, char *c )
 {
-string out="";
+std::string out="";
 bool stimmt=false;
 	for(int i=0; i<int(rules.size()); i++)
 	{
@@ -406,9 +415,21 @@
 }
 
 /** Gibt true zurück, wenn es sich beim nächsten Zeichen um ein Satzzeichen handelt. */
-bool satzzeichen( ifstream *src ){
+bool satzzeichen( std::ifstream *src ){
 char c;
 	src->get( c );
 	src->unget();
 	return satzzeichen( c );
 }
+
+/** add add to to, if wrapsafe is true use mbox on long lines, clear add */
+void addLine( std::string &add, std::string &to, bool wrapsafe )
+{
+	if ( add.length() > 65 && wrapsafe ) {
+		to += "\\mbox{";
+		to += add;
+		to += "}";
+	} else
+		to += add;
+	add = "";
+}
