Index: scribus/scpainter.cpp
===================================================================
RCS file: /cvs/Scribus/scribus/scpainter.cpp,v
retrieving revision 1.19.2.22
retrieving revision 1.19.2.23
diff -U3 -r1.19.2.22 -r1.19.2.23
--- scribus-1.3.2/scribus/scpainter.cpp	22 Jan 2006 22:42:01 -0000	1.19.2.22
+++ scribus-1.3.2/scribus/scpainter.cpp	23 Jan 2006 15:12:58 -0000	1.19.2.23
@@ -190,6 +190,7 @@
 #endif
 #if defined(Q_WS_X11) && defined(SC_USE_PIXBUF)
 #ifdef HAVE_CAIRO
+	cairo_surface_destroy(cairo_get_target(m_cr));
 	cairo_destroy( m_cr );
 #else
 	if (imageMode)
Index: scribus/scribusview.cpp
===================================================================
RCS file: /cvs/Scribus/scribus/scribusview.cpp,v
retrieving revision 1.76.2.452
retrieving revision 1.76.2.454
diff -U3 -r1.76.2.452 -r1.76.2.454
--- scribus-1.3.2/scribus/scribusview.cpp	22 Jan 2006 22:42:02 -0000	1.76.2.452
+++ scribus-1.3.2/scribus/scribusview.cpp	24 Jan 2006 00:07:35 -0000	1.76.2.454
@@ -2984,20 +2984,23 @@
 	if ((Doc->appMode == modeDrawBezierLine) && (m->button() == RightButton))
 	{
 		currItem = Doc->selection->itemAt(0);
-		currItem->PoLine.resize(currItem->PoLine.size()-2);
-		if (currItem->PoLine.size() < 4)
+		if (currItem!=0)
 		{
-//			emit DelObj(Doc->currentPage->pageNr(), currItem->ItemNr);
-			Doc->Items->remove(currItem->ItemNr);
-			Doc->selection->removeFirst();
-			emit HaveSel(-1);
-		}
-		else
-		{
-			SizeItem(currItem->PoLine.WidthHeight().x(), currItem->PoLine.WidthHeight().y(), currItem->ItemNr, false, false);
-			currItem->SetPolyClip(qRound(QMAX(currItem->Pwidth / 2, 1)));
-			AdjustItemSize(currItem);
-			currItem->ContourLine = currItem->PoLine.copy();
+			currItem->PoLine.resize(currItem->PoLine.size()-2);
+			if (currItem->PoLine.size() < 4)
+			{
+	//			emit DelObj(Doc->currentPage->pageNr(), currItem->ItemNr);
+				Doc->Items->remove(currItem->ItemNr);
+				Doc->selection->removeFirst();
+				emit HaveSel(-1);
+			}
+			else
+			{
+				SizeItem(currItem->PoLine.WidthHeight().x(), currItem->PoLine.WidthHeight().y(), currItem->ItemNr, false, false);
+				currItem->SetPolyClip(qRound(QMAX(currItem->Pwidth / 2, 1)));
+				AdjustItemSize(currItem);
+				currItem->ContourLine = currItem->PoLine.copy();
+			}
 		}
 		Doc->appMode = modeNormal;
 		qApp->setOverrideCursor(QCursor(ArrowCursor), true);
@@ -6944,37 +6947,41 @@
 			else 
 				currItem->CPos = 0;
 			p.end();
-			if (currItem->itemText.count() != 0)
+			
+			if (currItem->itemText.count() > 0)
 			{
-				Doc->CurrFont = currItem->itemText.at(currItem->CPos-1)->cfont->scName();
-				Doc->CurrFontSize = currItem->itemText.at(currItem->CPos-1)->csize;
-				Doc->CurrTextFill = currItem->itemText.at(currItem->CPos-1)->ccolor;
-				Doc->CurrTextFillSh = currItem->itemText.at(currItem->CPos-1)->cshade;
-				Doc->CurrTextStroke = currItem->itemText.at(currItem->CPos-1)->cstroke;
-				Doc->CurrTextStrokeSh = currItem->itemText.at(currItem->CPos-1)->cshade2;
-				Doc->CurrTextScale = currItem->itemText.at(currItem->CPos-1)->cscale;
-				Doc->CurrTextScaleV = currItem->itemText.at(currItem->CPos-1)->cscalev;
-				Doc->CurrTextBase = currItem->itemText.at(currItem->CPos-1)->cbase;
-				Doc->CurrTextShadowX = currItem->itemText.at(currItem->CPos-1)->cshadowx;
-				Doc->CurrTextShadowY = currItem->itemText.at(currItem->CPos-1)->cshadowy;
-				Doc->CurrTextOutline = currItem->itemText.at(currItem->CPos-1)->coutline;
-				Doc->CurrTextUnderPos = currItem->itemText.at(currItem->CPos-1)->cunderpos;
-				Doc->CurrTextUnderWidth = currItem->itemText.at(currItem->CPos-1)->cunderwidth;
-				Doc->CurrTextStrikePos = currItem->itemText.at(currItem->CPos-1)->cstrikepos;
-				Doc->CurrTextStrikeWidth = currItem->itemText.at(currItem->CPos-1)->cstrikewidth;
-				emit ItemTextStrike(currItem->itemText.at(currItem->CPos-1)->cstrikepos, currItem->itemText.at(currItem->CPos-1)->cstrikewidth);
-				emit ItemTextUnderline(currItem->itemText.at(currItem->CPos-1)->cunderpos, currItem->itemText.at(currItem->CPos-1)->cunderwidth);
-				emit ItemTextOutline(currItem->itemText.at(currItem->CPos-1)->coutline);
-				emit ItemTextShadow(currItem->itemText.at(currItem->CPos-1)->cshadowx, currItem->itemText.at(currItem->CPos-1)->cshadowy);
-				emit ItemTextSca(currItem->itemText.at(currItem->CPos-1)->cscale);
-				emit ItemTextScaV(currItem->itemText.at(currItem->CPos-1)->cscalev);
-				emit ItemTextFarben(currItem->itemText.at(currItem->CPos-1)->cstroke, currItem->itemText.at(currItem->CPos-1)->ccolor, currItem->itemText.at(currItem->CPos-1)->cshade2, currItem->itemText.at(currItem->CPos-1)->cshade);
-				emit ItemTextFont(currItem->itemText.at(currItem->CPos-1)->cfont->scName());
-				emit ItemTextSize(currItem->itemText.at(currItem->CPos-1)->csize);
-				emit ItemTextUSval(currItem->itemText.at(currItem->CPos-1)->cextra);
-				emit ItemTextStil(currItem->itemText.at(currItem->CPos-1)->cstyle);
-				emit ItemTextAbs(currItem->itemText.at(currItem->CPos-1)->cab);
-				emit ItemTextBase(currItem->itemText.at(currItem->CPos-1)->cbase);
+				int b=currItem->CPos-1;
+				if (b<0)
+					b=0;
+				Doc->CurrFont = currItem->itemText.at(b)->cfont->scName();
+				Doc->CurrFontSize = currItem->itemText.at(b)->csize;
+				Doc->CurrTextFill = currItem->itemText.at(b)->ccolor;
+				Doc->CurrTextFillSh = currItem->itemText.at(b)->cshade;
+				Doc->CurrTextStroke = currItem->itemText.at(b)->cstroke;
+				Doc->CurrTextStrokeSh = currItem->itemText.at(b)->cshade2;
+				Doc->CurrTextScale = currItem->itemText.at(b)->cscale;
+				Doc->CurrTextScaleV = currItem->itemText.at(b)->cscalev;
+				Doc->CurrTextBase = currItem->itemText.at(b)->cbase;
+				Doc->CurrTextShadowX = currItem->itemText.at(b)->cshadowx;
+				Doc->CurrTextShadowY = currItem->itemText.at(b)->cshadowy;
+				Doc->CurrTextOutline = currItem->itemText.at(b)->coutline;
+				Doc->CurrTextUnderPos = currItem->itemText.at(b)->cunderpos;
+				Doc->CurrTextUnderWidth = currItem->itemText.at(b)->cunderwidth;
+				Doc->CurrTextStrikePos = currItem->itemText.at(b)->cstrikepos;
+				Doc->CurrTextStrikeWidth = currItem->itemText.at(b)->cstrikewidth;
+				emit ItemTextStrike(currItem->itemText.at(b)->cstrikepos, currItem->itemText.at(b)->cstrikewidth);
+				emit ItemTextUnderline(currItem->itemText.at(b)->cunderpos, currItem->itemText.at(b)->cunderwidth);
+				emit ItemTextOutline(currItem->itemText.at(b)->coutline);
+				emit ItemTextShadow(currItem->itemText.at(b)->cshadowx, currItem->itemText.at(b)->cshadowy);
+				emit ItemTextSca(currItem->itemText.at(b)->cscale);
+				emit ItemTextScaV(currItem->itemText.at(b)->cscalev);
+				emit ItemTextFarben(currItem->itemText.at(b)->cstroke, currItem->itemText.at(b)->ccolor, currItem->itemText.at(b)->cshade2, currItem->itemText.at(b)->cshade);
+				emit ItemTextFont(currItem->itemText.at(b)->cfont->scName());
+				emit ItemTextSize(currItem->itemText.at(b)->csize);
+				emit ItemTextUSval(currItem->itemText.at(b)->cextra);
+				emit ItemTextStil(currItem->itemText.at(b)->cstyle);
+				emit ItemTextAbs(currItem->itemText.at(b)->cab);
+				emit ItemTextBase(currItem->itemText.at(b)->cbase);
 				return true;
 			}
 			else
