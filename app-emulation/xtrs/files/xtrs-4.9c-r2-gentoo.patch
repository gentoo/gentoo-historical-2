diff -Nurp xtrs-4.9c-orig/ChangeLog xtrs-4.9c/ChangeLog
--- xtrs-4.9c-orig/ChangeLog	2006-05-14 18:55:28.000000000 -0600
+++ xtrs-4.9c/ChangeLog	2008-06-26 16:57:23.000000000 -0600
@@ -1,3 +1,13 @@
+4.9c-Gentoo -- Thu Jun 26 16:57:16 MDT 2008 -- Joe Peterson <joe@skyrush.com>
+
+* Patched for Gentoo ebuild
+  - Added assignment to volatile variable in the z80 delay loop
+    (allows near-actual speed emulation with optimization)
+  - Fixed keyboard wait issue that caused CPU spinning (i.e. max
+    CPU usage) after using F10 (reset), F7, F8, or F9.
+  - Disable SIGIO
+  - Added NEWDOS/80 system date/time auto-initialization
+
 4.9c -- Sun May 14 17:54:25 PDT 2006 -- Tim Mann
 
 * Fixed the new -e flag on import/cmd and export/cmd to actually
diff -Nurp xtrs-4.9c-orig/Makefile xtrs-4.9c/Makefile
--- xtrs-4.9c-orig/Makefile	2006-05-13 15:10:25.000000000 -0600
+++ xtrs-4.9c/Makefile	2008-06-26 16:48:15.000000000 -0600
@@ -143,7 +143,7 @@ z80code: $(Z80CODE)
 include Makefile.local
 
 CFLAGS = $(DEBUG) $(ENDIAN) $(DEFAULT_ROM) $(READLINE) $(DISKDIR) $(IFLAGS) \
-       $(APPDEFAULTS) -DKBWAIT -DHAVE_SIGIO
+       $(APPDEFAULTS) -DKBWAIT
 LIBS = $(XLIB) $(READLINELIBS) $(EXTRALIBS)
 
 ZMACFLAGS = -h
diff -Nurp xtrs-4.9c-orig/trs_keyboard.c xtrs-4.9c/trs_keyboard.c
--- xtrs-4.9c-orig/trs_keyboard.c	2006-05-13 14:50:17.000000000 -0600
+++ xtrs-4.9c/trs_keyboard.c	2008-06-26 16:46:03.000000000 -0600
@@ -998,12 +998,12 @@ int trs_next_key(int wait)
       if ((z80_state.nmi && !z80_state.nmi_seen) ||
 	  (z80_state.irq && z80_state.iff1) ||
 	  trs_event_scheduled() || key_immediate) {
+	key_immediate = 0;
 	rval = -1;
 	break;
       }
       trs_paused = 1;
-      pause();			/* Wait for SIGALRM or SIGIO */
-      key_immediate = 0;
+      pause();			/* Wait for SIGALRM */
       trs_get_event(0);
     }
     return rval;
diff -Nurp xtrs-4.9c-orig/z80.c xtrs-4.9c/z80.c
--- xtrs-4.9c-orig/z80.c	2005-05-22 00:57:01.000000000 -0600
+++ xtrs-4.9c/z80.c	2008-06-26 16:44:32.000000000 -0600
@@ -3027,7 +3027,8 @@ int z80_run(int continuous)
 #endif
         /* Speed control */
         if ((i = z80_state.delay)) {
-	    while (--i) /*nothing*/;
+	    volatile int dummy;
+	    while (--i) dummy = i;
 	}
 
 	instruction = mem_read(REG_PC++);
