--- ./vmnet-only/bridge.c	2008-05-16 07:59:28.000000000 +0200
+++ ./vmnet-only/bridge.c	2008-08-07 22:12:50.000000000 +0200
@@ -275,8 +275,12 @@
                         struct net_device *net)  // IN: Network device
 {
 #ifdef VMW_NETDEV_HAS_NET
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
    if (net->nd_net != bridge->internalDev->nd_net) {
-      return 0;
+# else
+   if (dev_net(net) != dev_net(bridge->internalDev)) {
+# endif 
+     return 0;
    }
 #endif
    return strcmp(net->name, bridge->name) == 0;
--- ./vmnet-only/procfs.c	2008-05-16 07:59:28.000000000 +0200
+++ ./vmnet-only/procfs.c	2008-08-07 22:15:58.000000000 +0200
@@ -63,7 +63,11 @@
 {
    int retval;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
    retval = VNetProc_MakeEntry(&proc_root, "vmnet", S_IFDIR, &base);
+#else
+   retval = VNetProc_MakeEntry(NULL, "vmnet", S_IFDIR, &base);
+#endif
    if (retval) {
       return retval;
    }
@@ -95,7 +99,11 @@
 void
 VNetProc_Cleanup(void)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
    VNetProc_RemoveEntry(base, &proc_root);
+#else
+   VNetProc_RemoveEntry(base, NULL);
+#endif
    base = NULL;
 }
 
--- ./vmnet-only/vmnetInt.h	2008-05-16 07:59:28.000000000 +0200
+++ ./vmnet-only/vmnetInt.h	2008-08-07 22:20:13.000000000 +0200
@@ -63,7 +63,11 @@
 #   define dev_lock_list()    read_lock(&dev_base_lock)
 #   define dev_unlock_list()  read_unlock(&dev_base_lock)
 #   ifdef VMW_NETDEV_HAS_NET
+#     if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
 #      define DEV_GET(x)      __dev_get_by_name((x)->internalDev->nd_net, (x)->name)
+#     else
+#      define DEV_GET(x)      __dev_get_by_name(dev_net((x)->internalDev), (x)->name)
+#     endif
 #   else
 #      define DEV_GET(x)      __dev_get_by_name((x)->name)
 #   endif
@@ -89,8 +93,13 @@
 
 #ifdef VMW_NETDEV_HAS_NET
 extern struct proto vmnet_proto;
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
 #   define compat_sk_alloc(_bri, _pri) sk_alloc((_bri)->internalDev->nd_net, \
                                                 PF_NETLINK, _pri, &vmnet_proto)
+# else
+#  define compat_sk_alloc(_bri, _pri) sk_alloc(dev_net((_bri)->internalDev), \
+                                                 PF_NETLINK, _pri, &vmnet_proto)
+# endif
 #elif defined(VMW_HAVE_SK_ALLOC_WITH_PROTO)
 extern struct proto vmnet_proto;
 #   define compat_sk_alloc(_bri, _pri) sk_alloc(PF_NETLINK, _pri, &vmnet_proto, 1)
