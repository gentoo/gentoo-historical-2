--- gprolog-1.2.19.orig/src/Makefile.in	2005-06-14 03:13:45.000000000 +1200
+++ gprolog-1.2.19/src/Makefile.in	2006-01-23 11:52:07.000000000 +1300
@@ -145,7 +145,8 @@
 # --- CHECKS --- #
 
 check:
-	@echo "No checks implemented (yet)."
+	(cd EnginePl; $(MAKE) test_oc) || exit 1
+	. ./SETVARS; (cd Ma2Asm; $(MAKE) check) || exit 1
 
 
 # --- CLEAN --- #
--- gprolog-1.2.19.orig/src/EnginePl/Makefile.in	2005-06-14 03:13:43.000000000 +1200
+++ gprolog-1.2.19/src/EnginePl/Makefile.in	2006-01-23 15:37:43.000000000 +1300
@@ -134,6 +134,7 @@
 	$(CC) @CC_EXE_NAME_OPT@test_oc@EXE_SUFFIX@ obj_begin1@OBJ_SUFFIX@ \
               $(TEST_OC_OBJS) obj_chain1@OBJ_SUFFIX@ test_oc@OBJ_SUFFIX@ \
               obj_end1@OBJ_SUFFIX@
+	./test_oc || exit 1
 
 clean-test_oc: 
 	rm -f obj_begin1@OBJ_SUFFIX@ obj_chain1@OBJ_SUFFIX@ obj_end1@OBJ_SUFFIX@ \
--- gprolog-1.2.19.orig/src/Ma2Asm/Makefile.in	2005-06-14 03:13:45.000000000 +1200
+++ gprolog-1.2.19/src/Ma2Asm/Makefile.in	2006-01-23 13:21:58.000000000 +1300
@@ -46,19 +46,17 @@
 FC=-DFAST
 
 check@OBJ_SUFFIX@: check.c
-	if [ "$$FC" = "Y" ]; then FCFLAGS='-DFAST'; fi; \
-	$(GPLC) -C "$(CFLAGS) $$FCFLAGS" -c check.c
+	$(GPLC) -C "$(CFLAGS)" -c check.c
 
 check_ma@ASM_SUFFIX@: check_ma.ma ma2asm@EXE_SUFFIX@
-	if [ "$$FC" = "Y" ]; then cp check_ma.ma tmp.ma; \
-	else sed -e 's/ fast / /' check_ma.ma >tmp.ma; fi; \
-	$(GPLC) -S --comment tmp.ma -o check_ma@ASM_SUFFIX@
+	$(GPLC) -S --comment check_ma.ma -o check_ma@ASM_SUFFIX@
 
 check_ma@OBJ_SUFFIX@: check_ma@ASM_SUFFIX@
 	$(GPLC) -c check_ma@ASM_SUFFIX@
 
 check@EXE_SUFFIX@: $(CHECK_OBJS)
 	$(CC) $(CFLAGS) @CC_EXE_NAME_OPT@check@EXE_SUFFIX@ $(CHECK_OBJS)
+	./check || exit 1
 
 clean-check:
 	rm -f check@OBJ_SUFFIX@ check_ma@ASM_SUFFIX@ check_ma@OBJ_SUFFIX@ check@EXE_SUFFIX@
--- gprolog-1.2.19.orig/src/Ma2Asm/check.c	2005-06-14 03:40:15.000000000 +1200
+++ gprolog-1.2.19/src/Ma2Asm/check.c	2006-01-23 21:20:11.000000000 +1300
@@ -30,24 +30,11 @@
 #define IF_NO_FD_FILE
 #include "engine_pl.h"
 
-#ifndef FAST  /* see Makefile */
-
-#ifdef FC_USED_TO_COMPILE_CORE
-#warning NO FC
+#ifndef FC_USED_TO_COMPILE_CORE
 #undef FC
 #define FC
 #endif
 
-#elif !defined(FC_USED_TO_COMPILE_CORE)
-
-#error FAST defined but cannot compile for FC
-
-#else
-
-#warning WITH FC
-
-#endif
-
 /*---------------------------------*
  * Constants                       *
  *---------------------------------*/
@@ -272,7 +259,7 @@
 
 
 
-void
+void FC
 Allocate(int x)			/* only to update the register for E */
 {
 }
@@ -398,7 +385,7 @@
 
 void FC test_call_c1(void);
 
-void
+void FC
 test_call_c1(void)
 {
   x++;
@@ -456,7 +443,7 @@
 
 void FC test_arg_int1(int a, int b, int c, int d);
 
-void
+void FC
 test_arg_int1(int a, int b, int c, int d)
 {
   if (a != 12 || b != -1 || c != 4095 || d != 123456789)
@@ -480,7 +467,7 @@
 
 void FC test_arg_double1(double a, double b, double c);
 
-void
+void FC
 test_arg_double1(double a, double b, double c)
 {
   if (a != 12.456 || b != -1.3e-102 || c != -3.141593)
@@ -504,7 +491,7 @@
 
 void FC test_arg_string1(char *a, char *b);
 
-void
+void FC
 test_arg_string1(char *a, char *b)
 {
 #ifdef DEBUG
@@ -533,7 +520,7 @@
 
 void FC test_arg_mem_l1(long a, long b, long *c, long d, long e, long *f);
 
-void
+void FC
 test_arg_mem_l1(long a, long b, long *c, long d, long e, long *f)
 {
   if (a != 128 || b != 12345 || c != (long *) test_arg_mem_l
@@ -560,7 +547,7 @@
 
 void FC test_arg_x1(WamWord a, WamWord *b, WamWord c, WamWord *d);
 
-void
+void FC
 test_arg_x1(WamWord a, WamWord *b, WamWord c, WamWord *d)
 {
   if (a != 123987 || b != &X(0) || c != 987654321 || d != &X(128))
@@ -586,7 +573,7 @@
 
 void FC test_arg_y1(WamWord a, WamWord *b, WamWord c, WamWord *d);
 
-void
+void FC
 test_arg_y1(WamWord a, WamWord *b, WamWord c, WamWord *d)
 {
   if (a != 1928374 || b != &Y(E, 0) || c != 456789 || d != &Y(E, 6))
@@ -613,7 +600,7 @@
 
 void FC test_arg_fl_array1(long a, long b, long *c, long *d);
 
-void
+void FC
 test_arg_fl_array1(long a, long b, long *c, long *d)
 {
 #ifdef DEBUG
@@ -645,7 +632,7 @@
 
 void FC test_arg_fd_array1(double a, double b, double *c, double *d);
 
-void
+void FC
 test_arg_fd_array1(double a, double b, double *c, double *d)
 {
   if (a != 1.2e30 || b != -1.234567 || c != foreign_double
@@ -684,7 +671,7 @@
 			      WamWord k, WamWord *l, WamWord m, WamWord *n,
 			      double o);
 
-void
+void FC
 test_call_c_lot_args1(WamWord n0, WamWord n1, WamWord n2, WamWord n3,
 		      WamWord n4, WamWord n5,
 		      void (*a) (), long b, int c, int d, double e, char *f,
@@ -716,7 +703,7 @@
 
 long FC test_jump_ret1(long addr);
 
-long
+long FC
 test_jump_ret1(long addr)
 {
 #ifdef DEBUG
@@ -733,7 +720,7 @@
 
 void FC test_jump_ret2(void);
 
-void
+void FC
 test_jump_ret2(void)
 {
 #ifdef DEBUG
@@ -762,7 +749,7 @@
 
 int FC test_fail_ret1(void);
 
-int
+int FC
 test_fail_ret1(void)
 {
   x++;
@@ -816,7 +803,7 @@
 
 long FC test_move_ret_x1(void);
 
-long
+long FC
 test_move_ret_x1(void)
 {
   x++;
@@ -843,7 +830,7 @@
 
 long FC test_move_ret_y1(void);
 
-long
+long FC
 test_move_ret_y1(void)
 {
   x++;
@@ -870,7 +857,7 @@
 
 long FC test_move_ret_fl1(void);
 
-long
+long FC
 test_move_ret_fl1(void)
 {
   x++;
@@ -897,7 +884,7 @@
 
 double FC test_move_ret_fd1(void);
 
-double
+double FC
 test_move_ret_fd1(void)
 {
   x++;
@@ -922,7 +909,7 @@
 
 long FC test_switch_ret1(void);
 
-long
+long FC
 test_switch_ret1(void)
 {
   return swt[i];
@@ -931,7 +918,7 @@
 
 void FC test_switch_ret2(int k);
 
-void
+void FC
 test_switch_ret2(int k)
 {
   if (k != i)
@@ -968,13 +955,13 @@
 Fd_Init_Engine(void)
 {
 }
-int
+int FC
 Create_Atom(char *name)
 {
   return 1;
 }
 
-PredInf *
+PredInf * FC
 Lookup_Pred(int func, int arity)
 {
   return NULL;
@@ -985,7 +972,7 @@
 {
 }
 AtomInf atom_tbl[1];
-void
+void FC
 Create_Choice_Point(CodePtr codep_alt, int arity)
 {
 }
