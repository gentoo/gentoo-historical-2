diff -ur src.orig/alice/tuprologx/ide/AWTFrameLauncher.java src/alice/tuprologx/ide/AWTFrameLauncher.java
--- src.orig/alice/tuprologx/ide/AWTFrameLauncher.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/tuprologx/ide/AWTFrameLauncher.java	2007-06-08 19:43:27.000000000 +1200
@@ -88,7 +88,7 @@
                 height = Math.min(height, screenSize.height);
                 setBounds((screenSize.width - width) / 2, (screenSize.height - height) / 2, width, height);
             }
-            show();
+            setVisible(true);
         }
 
         public void update(Graphics g) {
@@ -117,4 +117,4 @@
 
     } // end AWTFrame class
 
-} // end AWTFrameLauncher class
\ No newline at end of file
+} // end AWTFrameLauncher class
diff -ur src.orig/alice/tuprologx/ide/Applet.java src/alice/tuprologx/ide/Applet.java
--- src.orig/alice/tuprologx/ide/Applet.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/tuprologx/ide/Applet.java	2007-06-08 19:47:00.000000000 +1200
@@ -41,7 +41,7 @@
 			ide.removeWindowListener(listeners[i]);
 
     	ide.pack();
-        ide.show();
+        ide.setVisible(true);
     }
 
-} // end Applet class
\ No newline at end of file
+} // end Applet class
diff -ur src.orig/alice/tuprologx/ide/DotNetIOManager.java src/alice/tuprologx/ide/DotNetIOManager.java
--- src.orig/alice/tuprologx/ide/DotNetIOManager.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/tuprologx/ide/DotNetIOManager.java	2007-06-08 19:46:43.000000000 +1200
@@ -46,7 +46,7 @@
         FileDialog dialog = new FileDialog(parent, "Load Theory", FileDialog.LOAD);
         dialog.setDirectory(currentLoadDirectory);
         dialog.setFile("*.pro");
-        dialog.show();
+        dialog.setVisible(true);
         String directory = dialog.getDirectory();
         currentLoadDirectory = directory;
         String fileName = dialog.getFile();
@@ -61,7 +61,7 @@
     public String saveTheoryAs(String theory) throws Exception {
         FileDialog dialog = new FileDialog(parent, "Save Theory As...", FileDialog.SAVE);
         dialog.setDirectory(currentSaveDirectory);
-        dialog.show();
+        dialog.setVisible(true);
         String directory = dialog.getDirectory();
         currentSaveDirectory = directory;
         String fileName = dialog.getFile();
@@ -72,4 +72,4 @@
             return "";
     }
 
-} // end DotNetIOManager class
\ No newline at end of file
+} // end DotNetIOManager class
diff -ur src.orig/alice/tuprologx/ide/GUILauncher.java src/alice/tuprologx/ide/GUILauncher.java
--- src.orig/alice/tuprologx/ide/GUILauncher.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/tuprologx/ide/GUILauncher.java	2007-06-08 19:48:08.000000000 +1200
@@ -74,7 +74,7 @@
     private void launchDotNetGUI() {
         DotNetIDE ide = new DotNetIDE();
         ide.pack();
-        ide.show();
+        ide.setVisible(true);
     }
 
     /**
@@ -99,4 +99,4 @@
             launcher.launchJavaGUI();
     }
 
-} // end GUILauncher class
\ No newline at end of file
+} // end GUILauncher class
diff -ur src.orig/alice/util/jedit/JEditTextArea.java src/alice/util/jedit/JEditTextArea.java
--- src.orig/alice/util/jedit/JEditTextArea.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/util/jedit/JEditTextArea.java	2007-06-08 19:41:59.000000000 +1200
@@ -115,10 +115,10 @@
 	 * Returns if this component can be traversed by pressing
 	 * the Tab key. This returns false.
 	 */
-	public final boolean isManagingFocus()
+	/*public final boolean isManagingFocus()
 	{
 		return true;
-	}
+	}*/
 
 	/**
 	 * Returns the object responsible for painting this text area.
@@ -507,7 +507,7 @@
 				if(id == Token.NULL)
 					fm = painter.getFontMetrics();
 				else
-					fm = styles[id].getFontMetrics(defaultFont);
+					fm = styles[id].getFontMetrics(painter, defaultFont);
 
 				int length = tokens.length;
 
@@ -604,7 +604,7 @@
 				if(id == Token.NULL)
 					fm = painter.getFontMetrics();
 				else
-					fm = styles[id].getFontMetrics(defaultFont);
+					fm = styles[id].getFontMetrics(painter, defaultFont);
 
 				int length = tokens.length;
 
diff -ur src.orig/alice/util/jedit/SyntaxStyle.java src/alice/util/jedit/SyntaxStyle.java
--- src.orig/alice/util/jedit/SyntaxStyle.java	2007-04-23 10:10:40.000000000 +1200
+++ src/alice/util/jedit/SyntaxStyle.java	2007-06-08 19:32:46.000000000 +1200
@@ -9,6 +9,7 @@
 package alice.util.jedit;
 
 import java.awt.*;
+import javax.swing.*;
 import java.util.StringTokenizer;
 
 /**
@@ -86,7 +87,7 @@
 	/**
 	 * Returns the font metrics for the styled font.
 	 */
-	public FontMetrics getFontMetrics(Font font)
+	public FontMetrics getFontMetrics(JComponent component, Font font)
 	{
 		if(font == null)
 			throw new NullPointerException("font param must not"
@@ -98,7 +99,7 @@
 			(bold ? Font.BOLD : 0)
 			| (italic ? Font.ITALIC : 0),
 			font.getSize());
-		fontMetrics = Toolkit.getDefaultToolkit().getFontMetrics(
+		fontMetrics = component.getFontMetrics(
 			lastStyledFont);
 		return fontMetrics;
 	}
diff -ur src.orig/alice/util/jedit/TextAreaPainter.java src/alice/util/jedit/TextAreaPainter.java
--- src.orig/alice/util/jedit/TextAreaPainter.java	2007-04-23 10:10:38.000000000 +1200
+++ src/alice/util/jedit/TextAreaPainter.java	2007-06-08 19:38:19.000000000 +1200
@@ -67,10 +67,10 @@
 	 * Returns if this component can be traversed by pressing the
 	 * Tab key. This returns false.
 	 */
-	public final boolean isManagingFocus()
+	/*public final boolean isManagingFocus()
 	{
 		return false;
-	}
+	}*/
 
 	/**
 	 * Returns the syntax styles used to paint colorized text. Entry <i>n</i>
@@ -350,7 +350,7 @@
 	public void setFont(Font font)
 	{
 		super.setFont(font);
-		fm = Toolkit.getDefaultToolkit().getFontMetrics(font);
+		fm = getFontMetrics(font);
 		textArea.recalculateVisibleLines();
 	}
 
diff -ur src.orig/alice/util/thinlet/Thinlet.java src/alice/util/thinlet/Thinlet.java
--- src.orig/alice/util/thinlet/Thinlet.java	2007-04-23 10:10:40.000000000 +1200
+++ src/alice/util/thinlet/Thinlet.java	2007-06-08 19:49:17.000000000 +1200
@@ -2157,7 +2157,7 @@
 	 *
 	 * @return true as focus-transverable component, overwrites the default false value
 	 */
-	public boolean isFocusTraversable() {
+	public boolean isFocusable() {
 		return true;
 	}
 
