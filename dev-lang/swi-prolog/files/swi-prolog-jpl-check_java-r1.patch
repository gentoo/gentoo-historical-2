--- pl-5.6.28.orig/packages/jpl/src/java/jpl/test/TestJUnit.java	2007-01-30 22:48:09.000000000 +1300
+++ pl-5.6.28/packages/jpl/src/java/jpl/test/TestJUnit.java	2007-02-25 13:15:51.000000000 +1300
@@ -32,7 +32,7 @@
 	protected void setUp() {
 		// initialization code
 		// Prolog.set_default_init_args(new String[] { "libpl.dll", "-f", "none", "-g", "set_prolog_flag(debug_on_error,false)", "-q" });
-		Prolog.set_default_init_args(new String[] { "libpl.dll", "-f", "none", "-g", "true", "-q" });
+		Prolog.set_default_init_args(new String[] { "libpl.dll", "-x", "../../src/pl.prc", "-f", "none", "-g", "true", "-q" });
 		assertTrue((new Query("consult(test_jpl)")).hasSolution());
 	}
 	protected void tearDown() {
@@ -50,7 +50,7 @@
 	}
 	public void testSameLibVersions2() {
 		String java_lib_version = JPL.version_string();
-		String pl_lib_version = ((Term) (new Query(new Compound("jpl_pl_lib_version", new Term[] { new Variable("V") })).oneSolution().get("V"))).name();
+		String pl_lib_version = ((Term) Query.oneSolution("jpl:jpl_pl_lib_version(V)").get("V")).name();
 		assertTrue("java_lib_version(" + java_lib_version + ") is same as pl_lib_version(" + pl_lib_version + ")", java_lib_version.equals(pl_lib_version));
 	}
 	public void testAtomName1() {
@@ -512,11 +512,9 @@
 		assertTrue(array[2].isAtom() && array[2].name().equals("c"));
 	}
 	public void testJRef1() {
-		System.out.println("java.library.path=" + System.getProperties().get("java.library.path"));
-		System.out.println("jpl.c version = " + jpl.fli.Prolog.get_c_lib_version());
 		int i = 76543;
 		Integer I = new Integer(i);
-		Query q = new Query("jpl_call(?,intValue,[],I2)", new Term[] {new JRef(I)});
+		Query q = new Query("use_module(library(jpl)),jpl_call(?,intValue,[],I2)", new Term[] {new JRef(I)});
 		Term I2 = (Term) q.oneSolution().get("I2");
 		assertTrue(I2.isInteger() && I2.intValue() == i);
 	}
