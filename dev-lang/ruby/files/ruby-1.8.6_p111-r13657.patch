Index: branches/ruby_1_8/ext/openssl/lib/net/telnets.rb
===================================================================
--- branches/ruby_1_8/ext/openssl/lib/net/telnets.rb	(revision 13656)
+++ branches/ruby_1_8/ext/openssl/lib/net/telnets.rb	(revision 13657)
@@ -134,6 +134,9 @@
             @sock.verify_callback = @options['VerifyCallback']
             @sock.verify_depth    = @options['VerifyDepth']
             @sock.connect
+            if @options['VerifyMode'] != OpenSSL::SSL::VERIFY_NONE
+              @sock.post_connection_check(@options['Host'])
+            end
             @ssl = true
           end
           ''
Index: branches/ruby_1_8/ext/openssl/lib/net/ftptls.rb
===================================================================
--- branches/ruby_1_8/ext/openssl/lib/net/ftptls.rb	(revision 13656)
+++ branches/ruby_1_8/ext/openssl/lib/net/ftptls.rb	(revision 13657)
@@ -29,13 +29,23 @@
 
 module Net
   class FTPTLS < FTP
+    def connect(host, port=FTP_PORT)
+      @hostname = host
+      super
+    end
+
     def login(user = "anonymous", passwd = nil, acct = nil)
+       store = OpenSSL::X509::Store.new
+       store.set_default_paths
        ctx = OpenSSL::SSL::SSLContext.new('SSLv23')
+       ctx.cert_store = store
+       ctx.verify_mode = OpenSSL::SSL::VERIFY_PEER
        ctx.key = nil
        ctx.cert = nil
        voidcmd("AUTH TLS")
        @sock = OpenSSL::SSL::SSLSocket.new(@sock, ctx)
        @sock.connect
+       @sock.post_connection_check(@hostname)
        super(user, passwd, acct)
        voidcmd("PBSZ 0")
     end
--- branches/ruby_1_8/lib/net/imap.rb	(revision 13656)
+++ branches/ruby_1_8/lib/net/imap.rb	(revision 13657)
@@ -900,6 +900,7 @@
         end
         @sock = SSLSocket.new(@sock, context)
         @sock.connect   # start ssl session.
+        @sock.post_connection_check(@host) if verify
       else
         @usessl = false
       end

