*** pgconnection.h	Sat Jul 19 14:45:30 2003
--- pgconnection.h.orig	Sat Jul 19 14:44:18 2003
***************
*** 45,51 ****
  // This class contains all the information about the connection
  // to the backend process.	All the database classes should be
  // derived from this class to obtain the connection interface.
! class DLLIMPORT PgConnection
  {
  protected:
  	PGconn* pgConn;			// Connection Structure
--- 45,51 ----
  // This class contains all the information about the connection
  // to the backend process.	All the database classes should be
  // derived from this class to obtain the connection interface.
! class PgConnection
  {
  protected:
  	PGconn* pgConn;			// Connection Structure
*** pgcursordb.h	Sat Jul 19 14:45:38 2003
--- pgcursordb.h.orig	Sat Jul 19 14:44:32 2003
***************
*** 41,47 ****
  // manipulates data through it.  The interface will introduce some
  // ease of use through the methods that will allow cursor specific
  // operations, like fetch, forward, etc.
! class DLLIMPORT PgCursor : public PgTransaction
  {
  public:
  	PgCursor(const char* conninfo, const char* cursor); // use reasonable & environment defaults
--- 41,47 ----
  // manipulates data through it.  The interface will introduce some
  // ease of use through the methods that will allow cursor specific
  // operations, like fetch, forward, etc.
! class PgCursor : public PgTransaction
  {
  public:
  	PgCursor(const char* conninfo, const char* cursor); // use reasonable & environment defaults
*** pglobject.h	Sat Jul 19 14:45:57 2003
--- pglobject.h.orig	Sat Jul 19 14:44:57 2003
***************
*** 35,41 ****
  // PgLargeObject - a class for accessing Large Object in a database
  //
  // ****************************************************************
! class DLLIMPORT PgLargeObject : public PgConnection
  {
  private:
  	int pgFd;
--- 35,41 ----
  // PgLargeObject - a class for accessing Large Object in a database
  //
  // ****************************************************************
! class PgLargeObject : public PgConnection
  {
  private:
  	int pgFd;
*** pgtransdb.h	Sat Jul 19 14:46:07 2003
--- pgtransdb.h.orig	Sat Jul 19 14:45:07 2003
***************
*** 35,41 ****
  // transaction block during its lifetime.  The block is ABORTed when
  // the object is destroyed, unless you call EndTransaction() method
  // before destruction of the object.
! class DLLIMPORT PgTransaction : public PgDatabase
  {
  public:
  	explicit PgTransaction(const char* conninfo);	// use reasonable & environment defaults
--- 35,41 ----
  // transaction block during its lifetime.  The block is ABORTed when
  // the object is destroyed, unless you call EndTransaction() method
  // before destruction of the object.
! class PgTransaction : public PgDatabase
  {
  public:
  	explicit PgTransaction(const char* conninfo);	// use reasonable & environment defaults
*** pgdatabase.h	Sat Jul 19 14:57:39 2003
--- pgdatabase.h.orig	Sat Jul 19 14:57:18 2003
***************
*** 34,40 ****
  // This is the basic database access class.  Its interface should
  // be used only after a query has been sent to the backend and
  // results are being received.
! class DLLIMPORT PgDatabase : public PgConnection
  {
  public:
  	// connect to the database with conninfo
--- 34,40 ----
  // This is the basic database access class.  Its interface should
  // be used only after a query has been sent to the backend and
  // results are being received.
! class PgDatabase : public PgConnection
  {
  public:
  	// connect to the database with conninfo
