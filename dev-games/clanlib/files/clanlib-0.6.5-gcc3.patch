--- Sources/GL/GLX/displaycard_glx.cpp
+++ Sources/GL/GLX/displaycard_glx.cpp
@@ -14,6 +14,8 @@
 
 #ifdef USE_OPENGL
 
+#define GLX_GLXEXT_PROTOTYPES
+
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/cursorfont.h>
--- Sources/Display/Display/DirectFB/target_directfb.cpp
+++ Sources/Display/Display/DirectFB/target_directfb.cpp
@@ -104,7 +104,7 @@
 
 unsigned int CL_Target_DirectFB::get_width() const
 {
-  unsigned int width = 0;
+  int width = 0;
 
   surface->GetSize (surface, &width, NULL);
 
@@ -113,7 +113,7 @@
 
 unsigned int CL_Target_DirectFB::get_height() const
 {
-  unsigned int height = 0;
+  int height = 0;
 
   surface->GetSize (surface, NULL, &height);
 
@@ -263,7 +263,7 @@
 
 void CL_Target_DirectFB::Clear (float r, float g, float b, float a)
 {
-  unsigned int width, height;
+  int width, height;
 
   surface->GetSize (surface, &width, &height);
 
--- Sources/Core/IOData/Unix/directory_scanner_unix.cpp
+++ Sources/Core/IOData/Unix/directory_scanner_unix.cpp
@@ -21,6 +21,7 @@
 #include <fnmatch.h>
 #include <unistd.h>
 #include "directory_scanner_unix.h"
+#include <assert.h>
 
 CL_DirectoryScanner_Unix::CL_DirectoryScanner_Unix ()
 	: dir_temp (NULL), entry (NULL)
--- Sources/Core/System/Unix/appconf.h
+++ Sources/Core/System/Unix/appconf.h
@@ -527,7 +527,9 @@
 
 //protected: --- if FileConfig::ConfigEntry is not public, functions in
 //               ConfigGroup such as Find/AddEntry can't return ConfigEntry*!
+  protected:
   class ConfigGroup;
+  public:
   class ConfigEntry
   {
   private:
--- Sources/Display/Display/Generic/blit_alphamask_rle.h
+++ Sources/Display/Display/Generic/blit_alphamask_rle.h
@@ -107,14 +107,14 @@
 		{
 			T a = alpha_data[x];
 			T destval = dst_data[x];
-			T r = lookup_r[(((destval&rmask)>>rstart)<<8)+a];	//(((destval&rmask)>>rstart)*a)>>8;
-			T g = lookup_g[(((destval&gmask)>>gstart)<<8)+a];	//(((destval&gmask)>>gstart)*a)>>8;
-			T b = lookup_b[(((destval&bmask)>>bstart)<<8)+a];	//(((destval&bmask)>>bstart)*a)>>8;
+			T r = this->lookup_r[(((destval&this->rmask)>>this->rstart)<<8)+a];	//(((destval&rmask)>>rstart)*a)>>8;
+			T g = this->lookup_g[(((destval&this->gmask)>>this->gstart)<<8)+a];	//(((destval&gmask)>>gstart)*a)>>8;
+			T b = this->lookup_b[(((destval&this->bmask)>>this->bstart)<<8)+a];	//(((destval&bmask)>>bstart)*a)>>8;
 
 			T amix = 
-				(r<<rstart) +
-				(g<<gstart) + 
-				(b<<bstart);
+				(r<<this->rstart) +
+				(g<<this->gstart) + 
+				(b<<this->bstart);
 
 			dst_data[x] = amix + *(src_data++);
 		}
@@ -151,13 +151,13 @@
 		{
 			T a = alpha_data[x];
 			T destval = dst_buf[x];
-			T r = lookup_r[(((destval&rmask)>>rstart)<<8)+a];
-			T g = lookup_g[(((destval&gmask)>>gstart)<<8)+a];
-			T b = lookup_b[(((destval&bmask)>>bstart)<<8)+a];
+			T r = this->lookup_r[(((destval&this->rmask)>>this->rstart)<<8)+a];
+			T g = this->lookup_g[(((destval&this->gmask)>>this->gstart)<<8)+a];
+			T b = this->lookup_b[(((destval&this->bmask)>>this->bstart)<<8)+a];
 			T amix = 
-				(r<<rstart) +
-				(g<<gstart) + 
-				(b<<bstart);
+				(r<<this->rstart) +
+				(g<<this->gstart) + 
+				(b<<this->bstart);
 			dst_buf[x] = amix + *(src_data++);
 		}
 		memcpy(dst_data, dst_buf, sizeof(T)*rep);
 
