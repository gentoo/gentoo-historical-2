Files MPlayer-1.0pre5.orig/.tmp.swp and MPlayer-1.0pre5/.tmp.swp differ
diff -ruN MPlayer-1.0pre5.orig/libvo/vo_x11.c MPlayer-1.0pre5/libvo/vo_x11.c
--- MPlayer-1.0pre5.orig/libvo/vo_x11.c	2004-07-15 14:28:07.689498136 +0200
+++ MPlayer-1.0pre5/libvo/vo_x11.c	2004-07-15 21:55:07.937246584 +0200
@@ -38,8 +38,18 @@
 #include "fastmemcpy.h"
 #include "sub.h"
 
+#ifdef HAVE_ALTIVEC_H    /* gnu */
+#include <altivec.h>
+#endif
+
 #include "../postproc/swscale.h"
 #include "../postproc/swscale_internal.h"       //FIXME
+
+#ifdef HAVE_ALTIVEC_H    /* how NOT to code... FIXME ASAP */
+#undef __vector
+#endif
+
+
 #include "../postproc/rgb2rgb.h"
 #include "../libmpcodecs/vf_scale.h"
 
Files MPlayer-1.0pre5.orig/postproc/.swscale_altivec_template.c.swp and MPlayer-1.0pre5/postproc/.swscale_altivec_template.c.swp differ
diff -ruN MPlayer-1.0pre5.orig/postproc/yuv2rgb.c MPlayer-1.0pre5/postproc/yuv2rgb.c
--- MPlayer-1.0pre5.orig/postproc/yuv2rgb.c	2004-07-15 14:27:46.590705640 +0200
+++ MPlayer-1.0pre5/postproc/yuv2rgb.c	2004-07-15 14:50:14.103852504 +0200
@@ -36,6 +36,10 @@
 #include <assert.h>
 
 #include "config.h"
+
+#ifdef HAVE_ALTIVEC_H	/* gnu */
+#include <altivec.h>
+#endif
 //#include "video_out.h"
 #include "rgb2rgb.h"
 #include "swscale.h"
diff -ruN MPlayer-1.0pre5.orig/postproc/yuv2rgb_altivec.c MPlayer-1.0pre5/postproc/yuv2rgb_altivec.c
--- MPlayer-1.0pre5.orig/postproc/yuv2rgb_altivec.c	2004-07-15 14:27:46.577707616 +0200
+++ MPlayer-1.0pre5/postproc/yuv2rgb_altivec.c	2004-07-15 21:50:03.241567368 +0200
@@ -67,6 +67,12 @@
 #include <inttypes.h>
 #include <assert.h>
 #include "config.h"
+#ifdef HAVE_ALTIVEC_H    /* gnu */
+#include <altivec.h>
+#define AVV(x...) {x}
+#else
+#define AVV(x...) (x)
+#endif
 #include "rgb2rgb.h"
 #include "swscale.h"
 #include "swscale_internal.h"
@@ -118,14 +124,18 @@
 */
 static
 const vector unsigned char
-  perm_rgb_0 = (vector unsigned char)(0x00,0x01,0x10,0x02,0x03,0x11,0x04,0x05,
-				      0x12,0x06,0x07,0x13,0x08,0x09,0x14,0x0a),
-  perm_rgb_1 = (vector unsigned char)(0x0b,0x15,0x0c,0x0d,0x16,0x0e,0x0f,0x17,
-				      0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f),
-  perm_rgb_2 = (vector unsigned char)(0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
-				      0x00,0x01,0x18,0x02,0x03,0x19,0x04,0x05),
-  perm_rgb_3 = (vector unsigned char)(0x1a,0x06,0x07,0x1b,0x08,0x09,0x1c,0x0a,
-				      0x0b,0x1d,0x0c,0x0d,0x1e,0x0e,0x0f,0x1f);
+  perm_rgb_0 = (const vector unsigned char)
+  				AVV(0x00,0x01,0x10,0x02,0x03,0x11,0x04,0x05,
+				    0x12,0x06,0x07,0x13,0x08,0x09,0x14,0x0a),
+  perm_rgb_1 = (const vector unsigned char)
+  				AVV(0x0b,0x15,0x0c,0x0d,0x16,0x0e,0x0f,0x17,
+				    0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f),
+  perm_rgb_2 = (const vector unsigned char)
+  				AVV(0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
+				    0x00,0x01,0x18,0x02,0x03,0x19,0x04,0x05),
+  perm_rgb_3 = (const vector unsigned char)
+  				AVV(0x1a,0x06,0x07,0x1b,0x08,0x09,0x1c,0x0a,
+				    0x0b,0x1d,0x0c,0x0d,0x1e,0x0e,0x0f,0x1f);
 
 #define vec_merge3(x2,x1,x0,y0,y1,y2)    \
 do {					 \
@@ -197,25 +207,23 @@
 
 #define vec_unh(x) \
   (vector signed short) \
-    vec_perm(x,(typeof(x))(0),\
-             (vector unsigned char)(0x10,0x00,0x10,0x01,0x10,0x02,0x10,0x03,\
+    vec_perm(x,(typeof(x))vec_splat_u32(0),\
+             (vector unsigned char)AVV(0x10,0x00,0x10,0x01,0x10,0x02,0x10,0x03,\
                                     0x10,0x04,0x10,0x05,0x10,0x06,0x10,0x07))
 #define vec_unl(x) \
   (vector signed short) \
-    vec_perm(x,(typeof(x))(0),\
-             (vector unsigned char)(0x10,0x08,0x10,0x09,0x10,0x0A,0x10,0x0B,\
+    vec_perm(x,(typeof(x))vec_splat_u32(0),\
+             (vector unsigned char)AVV(0x10,0x08,0x10,0x09,0x10,0x0A,0x10,0x0B,\
                                     0x10,0x0C,0x10,0x0D,0x10,0x0E,0x10,0x0F))
 
-#define vec_clip(x) \
-  vec_max (vec_min (x, (typeof(x))(255)), (typeof(x))(0))
-
-#define vec_packclp_a(x,y) \
-  (vector unsigned char)vec_pack (vec_clip (x), vec_clip (y))
+#define vec_clip_s16(x) \
+  vec_max (vec_min (x, (vector signed short)vec_splat_s16(255)),\
+  			(vector signed short)vec_splat_s16(0))
 
 #define vec_packclp(x,y) \
   (vector unsigned char)vec_packs \
-      ((vector unsigned short)vec_max (x,(vector signed short) (0)), \
-       (vector unsigned short)vec_max (y,(vector signed short) (0)))
+  	((vector unsigned short)vec_max (x,(vector signed short)vec_splat_u32(0)), \
+       (vector unsigned short)vec_max (y,(vector signed short)vec_splat_u32(0)))
 
 //#define out_pixels(a,b,c,ptr) vec_mstrgb32(typeof(a),((typeof (a))(0)),a,a,a,ptr)
 
@@ -228,8 +236,10 @@
 
   Y = vec_mradds (Y, c->CY, c->OY);
 
-  U = vec_sub (U,(vector signed short)(128));
-  V = vec_sub (V,(vector signed short)(128));
+  U = vec_sub (U,(vector signed short)AVV(128,128,128,128,
+  					  128,128,128,128));
+  V = vec_sub (V,(vector signed short)AVV(128,128,128,128,
+  					  128,128,128,128));
 
   //   ux  = (CBU*(u<<c->CSHIFT)+0x4000)>>15;
   ux = vec_sl (U, c->CSHIFT);
@@ -323,8 +333,16 @@
       align_perm = vec_lvsl (0, vi);					   \
       v = (vector signed char)vec_perm (vivP[0], vivP[1], align_perm);	   \
 									   \
-      u  = (vector signed char)vec_sub (u, (vector signed char)(128));	   \
-      v  = (vector signed char)vec_sub (v, (vector signed char)(128));	   \
+      u  = (vector signed char)vec_sub (u, 				   \
+      			(vector signed char)AVV(128,128,128,128,	   \
+						128,128,128,128,	   \
+						128,128,128,128,	   \
+						128,128,128,128));	   \
+      v  = (vector signed char)vec_sub (v,				   \
+      			(vector signed char)AVV(128,128,128,128,	   \
+						128,128,128,128,	   \
+						128,128,128,128,	   \
+						128,128,128,128));	   \
       U  = vec_unpackh (u);						   \
       V  = vec_unpackh (v);						   \
 									   \
@@ -341,18 +359,18 @@
 									   \
 	/*   ux  = (CBU*(u<<CSHIFT)+0x4000)>>15 */			   \
 	ux = vec_sl (U, lCSHIFT);					   \
-	ux = vec_mradds (ux, lCBU, (vector signed short)(0));		   \
+	ux = vec_mradds (ux, lCBU, (vector signed short)vec_splat_s16(0)); \
 	ux0  = vec_mergeh (ux,ux);					   \
 	ux1  = vec_mergel (ux,ux);					   \
 									   \
 	/* vx  = (CRV*(v<<CSHIFT)+0x4000)>>15;	*/			   \
 	vx = vec_sl (V, lCSHIFT);					   \
-	vx = vec_mradds (vx, lCRV, (vector signed short)(0));		   \
+	vx = vec_mradds (vx, lCRV, (vector signed short)vec_splat_s16(0)); \
 	vx0  = vec_mergeh (vx,vx);					   \
 	vx1  = vec_mergel (vx,vx);					   \
 									   \
 	/* uvx = ((CGU*u) + (CGV*v))>>15 */				   \
-	uvx = vec_mradds (U, lCGU, (vector signed short)(0));		   \
+	uvx = vec_mradds (U, lCGU, (vector signed short)vec_splat_s16(0)); \
 	uvx = vec_mradds (V, lCGV, uvx);				   \
 	uvx0 = vec_mergeh (uvx,uvx);					   \
 	uvx1 = vec_mergel (uvx,uvx);					   \
@@ -402,10 +420,14 @@
 }
 
 
-#define out_abgr(a,b,c,ptr)  vec_mstrgb32(typeof(a),((typeof (a))(0)),c,b,a,ptr)
-#define out_bgra(a,b,c,ptr)  vec_mstrgb32(typeof(a),c,b,a,((typeof (a))(0)),ptr)
-#define out_rgba(a,b,c,ptr)  vec_mstrgb32(typeof(a),a,b,c,((typeof (a))(0)),ptr)
-#define out_argb(a,b,c,ptr)  vec_mstrgb32(typeof(a),((typeof (a))(0)),a,b,c,ptr)
+#define out_abgr(a,b,c,ptr)  vec_mstrgb32(typeof(a),\
+				((typeof (a))vec_splat_u32(0)),c,b,a,ptr)
+#define out_bgra(a,b,c,ptr)  vec_mstrgb32(typeof(a),\
+				c,b,a,((typeof (a))vec_splat_u32(0)),ptr)
+#define out_rgba(a,b,c,ptr)  vec_mstrgb32(typeof(a),\
+				a,b,c,((typeof (a))vec_splat_u32(0)),ptr)
+#define out_argb(a,b,c,ptr)  vec_mstrgb32(typeof(a),\
+				((typeof (a))vec_splat_u32(0)),a,b,c,ptr)
 #define out_rgb24(a,b,c,ptr) vec_mstrgb24(a,b,c,ptr)
 #define out_bgr24(a,b,c,ptr) vec_mstrgb24(c,b,a,ptr)
 
@@ -421,18 +443,18 @@
 // 0123 4567 89ab cdef
 static
 const vector unsigned char
-  demux_u = (vector unsigned char)(0x10,0x00,0x10,0x00,
-				   0x10,0x04,0x10,0x04,
-				   0x10,0x08,0x10,0x08,
-				   0x10,0x0c,0x10,0x0c),
-  demux_v = (vector unsigned char)(0x10,0x02,0x10,0x02,
-				   0x10,0x06,0x10,0x06,
-				   0x10,0x0A,0x10,0x0A,
-				   0x10,0x0E,0x10,0x0E),
-  demux_y = (vector unsigned char)(0x10,0x01,0x10,0x03,
-				   0x10,0x05,0x10,0x07,
-				   0x10,0x09,0x10,0x0B,
-				   0x10,0x0D,0x10,0x0F);
+  demux_u = (const vector unsigned char)AVV(0x10,0x00,0x10,0x00,
+  					    0x10,0x04,0x10,0x04,
+					    0x10,0x08,0x10,0x08,
+					    0x10,0x0c,0x10,0x0c),
+  demux_v = (const vector unsigned char)AVV(0x10,0x02,0x10,0x02,
+  					    0x10,0x06,0x10,0x06,
+					    0x10,0x0A,0x10,0x0A,
+					    0x10,0x0E,0x10,0x0E),
+  demux_y = (const vector unsigned char)AVV(0x10,0x01,0x10,0x03,
+					    0x10,0x05,0x10,0x07,
+					    0x10,0x09,0x10,0x0B,
+					    0x10,0x0D,0x10,0x0F);
 
 /*
   this is so I can play live CCIR raw video
@@ -460,25 +482,25 @@
     for (j=0;j<w/16;j++) {
       uyvy = vec_ld (0, img);
       U = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_u);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_u);
 
       V = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_v);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_v);
 
       Y = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_y);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_y);
 
       cvtyuvtoRGB (c, Y,U,V,&R0,&G0,&B0);
 
       uyvy = vec_ld (16, img);
       U = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_u);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_u);
 
       V = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_v);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_v);
 
       Y = (vector signed short)
-	vec_perm (uyvy, (vector unsigned char)(0), demux_y);
+	vec_perm (uyvy, (vector unsigned char)vec_splat_u32(0), demux_y);
 
       cvtyuvtoRGB (c, Y,U,V,&R1,&G1,&B1);
 
@@ -504,7 +526,7 @@
 */
 SwsFunc yuv2rgb_init_altivec (SwsContext *c)
 {
-  if (!(c->flags & SWS_CPU_CAPS_ALTIVEC))    
+  if (!(c->flags & SWS_CPU_CAPS_ALTIVEC))
     return NULL;
 
   /*
@@ -569,15 +591,16 @@
 int yuv2rgb_altivec_init_tables (SwsContext *c, const int inv_table[4])
 {
 
-  vector signed short
+  vector signed short CY,CRV,CBU,CGU,CGV,OY;
+/* stray code?  
     CY  = (vector signed short)(0x7fff),
     CRV = (vector signed short)(22972),
     CBU = (vector signed short)(29029),
     CGU = (vector signed short)(-11276),
     CGV = (vector signed short)(-23400),
     OY;
-
-  vector unsigned short CSHIFT = (vector unsigned short)(1);
+*/
+  vector unsigned short CSHIFT = (vector unsigned short)vec_splat_u16(1);
 
   vector signed short Y0;
   int brightness = c->brightness,  contrast = c->contrast,  saturation = c->saturation;
@@ -589,7 +612,7 @@
 
   int64_t cy  = (1<<16)-1;
   int64_t oy  = 0;
-
+/* really needed? FIXME*/
   if ((c->flags & SWS_CPU_CAPS_ALTIVEC) == 0)
     return;
 
@@ -621,6 +644,7 @@
   //printf("%llx %llx %llx %llx %llx\n", cy, crv, cbu, cgu, cgv);
 
   //  vector signed short CBU,CRV,CGU,CGY,CY;
+  /*why not use vec_splat_${type} ??*/
   tmp = cy;
   CY = vec_lde (0, &tmp);
   CY  = vec_splat (CY, 0);
@@ -643,7 +667,7 @@
   CGV = vec_lde (0, &tmp);
   CGV  = vec_splat (CGV, 0);
 
-  CSHIFT = (vector unsigned short)(2);
+  CSHIFT = (vector unsigned short)vec_splat_u16(2);
 #if 1
   c->CSHIFT = CSHIFT;
   c->CY = CY;
@@ -679,8 +703,8 @@
 
   vector unsigned char R,G,B,pels[3];
   vector unsigned char *out,*nout;
-  vector signed short   RND = (vector signed short)(1<<3);
-  vector unsigned short SCL = (vector unsigned short)(4);
+  vector signed short   RND = (vector signed short)vec_splat_s16(1<<3);
+  vector unsigned short SCL = (vector unsigned short)vec_splat_u16(4);
   unsigned long scratch[16] __attribute__ ((aligned (16)));
 
   vector signed short *vYCoeffsBank, *vCCoeffsBank;
@@ -736,10 +760,10 @@
     U  = vec_sra (U,  SCL);
     V  = vec_sra (V,  SCL);
 
-    Y0 = vec_clip (Y0);
-    Y1 = vec_clip (Y1);
-    U  = vec_clip (U);
-    V  = vec_clip (V);
+    Y0 = vec_clip_s16 (Y0);
+    Y1 = vec_clip_s16 (Y1);
+    U  = vec_clip_s16 (U);
+    V  = vec_clip_s16 (V);
 
     /* now we have
       Y0= y0 y1 y2 y3 y4 y5 y6 y7     Y1= y8 y9 y10 y11 y12 y13 y14 y15
@@ -795,10 +819,10 @@
     U  = vec_sra (U,  SCL);
     V  = vec_sra (V,  SCL);
 
-    Y0 = vec_clip (Y0);
-    Y1 = vec_clip (Y1);
-    U  = vec_clip (U);
-    V  = vec_clip (V);
+    Y0 = vec_clip_s16 (Y0);
+    Y1 = vec_clip_s16 (Y1);
+    U  = vec_clip_s16 (U);
+    V  = vec_clip_s16 (V);
 
     /* now we have
        Y0= y0 y1 y2 y3 y4 y5 y6 y7     Y1= y8 y9 y10 y11 y12 y13 y14 y15
