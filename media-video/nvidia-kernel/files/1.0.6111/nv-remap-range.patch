--- Makefile.kbuild.orig	2004-10-04 19:57:29.364110664 +1000
+++ Makefile.kbuild	2004-10-04 20:01:23.803470464 +1000
@@ -133,7 +133,7 @@
 endif
 
 #
-# NVIDIA specific CFLAGS and #define's. The remap_page_range check has become
+# NVIDIA specific CFLAGS and #define's. The remap_range check has become
 # necessary with the introduction of the five argument version to Linux 2.4
 # distribution kernels; this conflicting change cannot be detected at compile
 # time.
@@ -160,13 +160,15 @@
 endif
 
-ifeq ($(PATCHLEVEL), 4)
-  REMAP_PAGE_RANGE := $(shell $(CONFTEST) remap_page_range)
+  REMAP_RANGE := $(shell $(CONFTEST) remap_range)
 
-  ifeq ($(REMAP_PAGE_RANGE), 5)
+  ifeq ($(REMAP_RANGE), PFN)
+    EXTRA_CFLAGS += -DREMAP_PFN_RANGE
+  endif
+  
+  ifeq ($(REMAP_RANGE), 5)
     EXTRA_CFLAGS += -DREMAP_PAGE_RANGE_5
   endif
 
-  ifeq ($(REMAP_PAGE_RANGE), 4)
+  ifeq ($(REMAP_RANGE), 4)
     EXTRA_CFLAGS += -DREMAP_PAGE_RANGE_4
   endif
-endif
--- Makefile.nvidia.orig	2004-10-04 19:57:36.572014896 +1000
+++ Makefile.nvidia	2004-10-04 20:01:13.459043056 +1000
@@ -60,12 +60,15 @@
 INSTALL=$(shell which install)
 INCLUDES += -I$(KERNEL_HEADERS)
 
-REMAP_PAGE_RANGE := $(shell $(CONFTEST) remap_page_range)
+REMAP_RANGE := $(shell $(CONFTEST) remap_range)
 
-ifeq ($(REMAP_PAGE_RANGE), 5)
+ifeq ($(REMAP_RANGE), PFN)
+  DEFINES += -DREMAP_PFN_RANGE
+endif
+ifeq ($(REMAP_RANGE), 5)
   DEFINES += -DREMAP_PAGE_RANGE_5
 endif
-ifeq ($(REMAP_PAGE_RANGE), 4)
+ifeq ($(REMAP_RANGE), 4)
   DEFINES += -DREMAP_PAGE_RANGE_4
 endif
 
--- conftest.sh.orig	2004-10-04 19:38:34.819587648 +1000
+++ conftest.sh	2004-10-04 19:56:28.547356216 +1000
@@ -47,11 +47,27 @@
         fi
     ;;
 
-    remap_page_range)
+    remap_range)
         #
         # Determine the number of arguments expected by remap_page_range.
+        # Extended to determine if should use remap_pfn_range() aswell
         #
 
+	echo "#include <linux/mm.h>
+        int do_test_remap_page_range(void) {
+          pgprot_t pgprot;
+          remap_pfn_range(NULL, 0L, 0L, 0L, pgprot);
+        }" > conftest$$.c
+
+        $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+        rm -f conftest$$.c
+
+        if [ -f conftest$$.o ]; then
+          echo "PFN"
+          rm -f conftest$$.o;
+          exit 0
+        fi
+
         echo "#include <linux/mm.h>
         int do_test_remap_page_range(void) {
            pgprot_t pgprot;
--- nv-linux.h.orig	2004-10-04 19:25:54.819125280 +1000
+++ nv-linux.h	2004-10-04 19:38:26.043921752 +1000
@@ -567,13 +567,15 @@
  * relevant releases to date use it. This version was backported to 2.4 
  * without means to identify the change, hence this hack.
  */
-#if defined(KERNEL_2_6) || defined(REMAP_PAGE_RANGE_5)
-#define NV_REMAP_PAGE_RANGE(x...)    remap_page_range(vma, x)
+#if defined(REMAP_PFN_RANGE)
+#define NV_REMAP_RANGE(from, offset, x...)    remap_pfn_range(vma, from, ((offset)) >> PAGE_SHIFT, x)
+#elif defined(KERNEL_2_6) || defined(REMAP_PAGE_RANGE_5)
+#define NV_REMAP_RANGE(x...)                  remap_page_range(vma, x)
 #elif defined(REMAP_PAGE_RANGE_4)
-#define NV_REMAP_PAGE_RANGE(x...)    remap_page_range(x)
+#define NV_REMAP_RANGE(x...)                  remap_page_range(x)
 #else
 #warning "conftest.sh failed, assuming old Linux 2.4 remap_page_range(4)!"
-#define NV_REMAP_PAGE_RANGE(x...)    remap_page_range(x)
+#define NV_REMAP_RANGE(x...)                  remap_page_range(x)
 #endif
 
 #if defined(pmd_offset_map)
--- nv.c.orig	2004-10-04 19:25:49.387950944 +1000
+++ nv.c	2004-10-04 19:31:56.270176368 +1000
@@ -1775,7 +1775,7 @@
             pages = nv->regs->size / PAGE_SIZE;
 
         vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
-        if (NV_REMAP_PAGE_RANGE(vma->vm_start,
+        if (NV_REMAP_RANGE(vma->vm_start,
                              NV_VMA_OFFSET(vma),
                              vma->vm_end - vma->vm_start,
                              vma->vm_page_prot))
@@ -1794,7 +1794,7 @@
             pages = nv->fb->size / PAGE_SIZE;
 
         vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
-        if (NV_REMAP_PAGE_RANGE(vma->vm_start,
+        if (NV_REMAP_RANGE(vma->vm_start,
                              NV_VMA_OFFSET(vma),
                              vma->vm_end - vma->vm_start,
                              vma->vm_page_prot))
@@ -1912,7 +1912,7 @@
         while (pages--)
         {
             page = (unsigned long) at->page_table[i++].phys_addr;
-            if (NV_REMAP_PAGE_RANGE(start, page, PAGE_SIZE, vma->vm_page_prot))
+            if (NV_REMAP_RANGE(start, page, PAGE_SIZE, vma->vm_page_prot))
                 return -EAGAIN;
             start += PAGE_SIZE;
             pos += PAGE_SIZE;
--- os-agp.c.orig	2004-10-04 19:26:06.363370288 +1000
+++ os-agp.c	2004-10-04 19:32:06.228662448 +1000
@@ -331,10 +331,10 @@
     agp_addr = agpinfo.aper_base + (agp_data->offset << PAGE_SHIFT);
 
 #if defined(NVCPU_IA64)
-    err = NV_REMAP_PAGE_RANGE(vma->vm_start, (size_t) agp_addr, 
+    err = NV_REMAP_RANGE(vma->vm_start, (size_t) agp_addr, 
                        agp_data->num_pages << PAGE_SHIFT, vma->vm_page_prot);
 #else
-    err = NV_REMAP_PAGE_RANGE(vma->vm_start, (size_t) agp_addr, 
+    err = NV_REMAP_RANGE(vma->vm_start, (size_t) agp_addr, 
                        agp_data->num_pages << PAGE_SHIFT, PAGE_SHARED);
 #endif
         
--- os-interface.c.orig	2004-10-04 19:26:14.267168728 +1000
+++ os-interface.c	2004-10-04 19:32:12.958639336 +1000
@@ -1087,7 +1087,7 @@
 
     vma = (struct vm_area_struct *) *priv;
 
-    if (NV_REMAP_PAGE_RANGE(vma->vm_start,
+    if (NV_REMAP_RANGE(vma->vm_start,
                 start & PAGE_MASK, size_bytes, PAGE_SHARED))
         return NULL;
 
