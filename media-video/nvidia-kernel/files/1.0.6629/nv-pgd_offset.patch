diff -urpN nv.orig/Makefile.kbuild nv/Makefile.kbuild
--- nv.orig/Makefile.kbuild	2004-11-09 20:27:54.012160376 +0200
+++ nv/Makefile.kbuild	2004-11-09 20:52:59.256328480 +0200
@@ -168,6 +168,10 @@ ifeq ($(shell echo $(NV_BUILD_NV_PAT_SUP
 CFLAGS += -DNV_BUILD_NV_PAT_SUPPORT
 endif
 
+ifeq ($(shell $(CONFTEST) pgd_offset), pml4)
+  EXTRA_CFLAGS += -DPML4_PGD_OFFSET
+endif
+
 ifeq ($(shell $(CONFTEST) remap_pfn_range), 1)
   EXTRA_CFLAGS += -DNV_REMAP_PFN_RANGE_PRESENT
 else
diff -urpN nv.orig/conftest.sh nv/conftest.sh
--- nv.orig/conftest.sh	2004-11-09 20:27:54.012160376 +0200
+++ nv/conftest.sh	2004-11-09 20:58:16.565090216 +0200
@@ -23,6 +23,35 @@ else
 fi
 
 case "$4" in
+    pgd_offset)
+        #
+        # Determine if we have pgd_offset, or pml4_pgd_offset.
+        #
+
+        # Not a very good test, but seems to do the trick
+        echo "#include <linux/mm.h>
+        #include <asm/pgtable.h>
+        int do_test_pgd_offset(void) {
+          unsigned long addr = (unsigned long)0;
+          pml4_t *pml4 = pml4_offset_k(addr);
+          pgd_t *pgd;
+
+          pgd = pml4_pgd_offset(pml4, addr);
+        }" > conftest$$.c
+
+        $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+        rm -f conftest$$.c
+
+        if [ -f conftest$$.o ]; then
+          echo "pml4"
+          rm -f conftest$$.o
+          exit 0
+        else
+          echo "pgd"
+          exit 0
+        fi
+    ;;
+
     remap_page_range)
         #
         # Determine the number of arguments expected by remap_page_range.
diff -urpN nv.orig/nv-linux.h nv/nv-linux.h
--- nv.orig/nv-linux.h	2004-11-09 20:27:54.011160528 +0200
+++ nv/nv-linux.h	2004-11-09 20:51:44.240732584 +0200
@@ -615,6 +615,28 @@ typedef struct agp_memory agp_memory;
 #define NV_UNREGISTER_CHRDEV(x...)  unregister_chrdev(x)
 #endif
 
+#if defined(PML4_PGD_OFFSET)
+#define NV_PGD_OFFSET(mm, x...) \
+	({ \
+            pgd_t *pgd = NULL; \
+            pml4_t *pml4 = pml4_offset(mm, x); \
+            if (!pml4_none(*pml4)) \
+                pgd = pml4_pgd_offset(pml4, address); \
+            pgd; \
+	})
+#define NV_PGD_OFFSET_K(x...) \
+        ({ \
+            pgd_t *pgd = NULL; \
+            pml4_t *pml4 = pml4_offset_k(x); \
+            if (!pml4_none(*pml4)) \
+                pgd = pml4_pgd_offset_k(pml4, address); \
+            pgd; \
+        })
+#else
+#define NV_PGD_OFFSET(mm, x...)     pgd_offset(mm, x)
+#define NV_PGD_OFFSET_K(x...)       pgd_offset_k(x)
+#endif
+
 #if defined(NV_REMAP_PFN_RANGE_PRESENT)
 #define NV_REMAP_PAGE_RANGE(from, offset, x...) \
      remap_pfn_range(vma, from, ((offset) >> PAGE_SHIFT), x)
diff -urpN nv.orig/nv.c nv/nv.c
--- nv.orig/nv.c	2004-11-09 20:27:54.010160680 +0200
+++ nv/nv.c	2004-11-09 20:28:37.045618296 +0200
@@ -2500,8 +2500,8 @@ _get_phys_address(
     mm = (kern) ? &init_mm : current->mm;
     spin_lock(&mm->page_table_lock);
 
-    if (kern) pg_dir = pgd_offset_k(address);
-    else pg_dir = pgd_offset(mm, address);
+    if (kern) pg_dir = NV_PGD_OFFSET_K(address);
+    else pg_dir = NV_PGD_OFFSET(mm, address);
 
     if (!pg_dir || pgd_none(*pg_dir))
         goto failed;
