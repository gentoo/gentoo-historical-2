diff -Nudr NVIDIA_kernel-1.0-3123/Makefile NVIDIA_kernel-1.0-3123-fixed/Makefile
--- NVIDIA_kernel-1.0-3123/Makefile	2002-12-07 14:49:12.000000000 +0000
+++ NVIDIA_kernel-1.0-3123-fixed/Makefile	2002-12-07 14:48:04.000000000 +0000
@@ -2,7 +2,7 @@
 #   Generated on 'builder3' on Tue Aug 27 15:56:49 PDT 2002
 
 LINUX_MODULE=Module-linux
-DEFINES=-D__KERNEL__ -DMODULE -D_LOOSE_KERNEL_NAMES -DNTRM -D_GNU_SOURCE -DRM_HEAPMGR -D_LOOSE_KERNEL_NAMES -D__KERNEL__ -DMODULE  -DNV_MAJOR_VERSION=1 -DNV_MINOR_VERSION=0 -DNV_PATCHLEVEL=3123  -DNV_UNIX   -DNV_LINUX   -DNVCPU_X86     
+DEFINES=-D__KERNEL__ -DMODULE -D_LOOSE_KERNEL_NAMES -DKBUILD_MODNAME="NVdriver" -DNTRM -D_GNU_SOURCE -DRM_HEAPMGR -D_LOOSE_KERNEL_NAMES -D__KERNEL__ -DMODULE  -DNV_MAJOR_VERSION=1 -DNV_MINOR_VERSION=0 -DNV_PATCHLEVEL=3123  -DNV_UNIX   -DNV_LINUX   -DNVCPU_X86     
 INCLUDES=-I.
 
 OBJECTS=nv.o os-interface.o os-registry.o 
@@ -73,6 +73,9 @@
 
 VERSION_HDR=nv_compiler.h
 
+# required for rusty's depmod utility
+O=.o
+
 all: install
 
 install: package-install
diff -Nudr NVIDIA_kernel-1.0-3123/nv.c NVIDIA_kernel-1.0-3123-fixed/nv.c
--- NVIDIA_kernel-1.0-3123/nv.c	2002-12-07 14:49:14.000000000 +0000
+++ NVIDIA_kernel-1.0-3123-fixed/nv.c	2002-12-07 14:48:38.000000000 +0000
@@ -116,10 +116,6 @@
  *** EXPORTS to Linux Kernel
  ***/
 
-/* linux module interface functions (called by linux kernel) */
-int           init_module(void);
-void          cleanup_module(void);
-
 /* nv_kern_ functions, interfaces used by linux kernel */
 void          nv_kern_vma_open(struct vm_area_struct *vma);
 void          nv_kern_vma_release(struct vm_area_struct *vma);
@@ -152,6 +148,7 @@
 /* character driver entry points */
 
 static struct file_operations nv_fops = {
+    owner:          THIS_MODULE,
     poll:           nv_kern_poll,
     ioctl:          nv_kern_ioctl,
     mmap:           nv_kern_mmap,
@@ -906,7 +903,7 @@
  *** EXPORTS to Linux Kernel
  ***/
 
-int init_module(void)
+static int __init nv_init_module(void)
 {
     int rc;
     int num_devices, i;
@@ -928,7 +925,7 @@
 #endif
 
     if (rc < 0) {
-        NV_EMSG((nv_state_t *) 0, "init_module: register failed");
+        NV_EMSG((nv_state_t *) 0, "nv_init_module: register failed");
         return rc;
     }
 
@@ -952,7 +949,7 @@
     } while(0);
 #endif
 
-    NV_DMSG((nv_state_t *) 0, "init_module: major number %d", nv_major);
+    NV_DMSG((nv_state_t *) 0, "nv_init_module: major number %d", nv_major);
 
     for (i = 0; i < NV_MAX_DEVICES; i++) {
         /*
@@ -1004,7 +1001,7 @@
     return rc;
 }
 
-void cleanup_module(void)
+static void __exit nv_exit_module(void)
 {
     int rc;
     nv_linux_state_t *nvl;
@@ -1013,7 +1010,7 @@
     /* remove /proc/driver/nvidia */
     nvos_proc_remove();
 
-    NV_DMSG((nv_state_t *) 0, "cleanup_module");
+    NV_DMSG((nv_state_t *) 0, "nv_exit_module");
 
 #ifdef CONFIG_PM
     /* XXX PM egads, is this the right place to do this? */
@@ -1050,7 +1047,7 @@
 #endif
 
     if (rc < 0) {
-        NV_EMSG((nv_state_t *) 0, "cleanup_module: unregister nv failed");
+        NV_EMSG((nv_state_t *) 0, "nv_exit_module: unregister nv failed");
     }
 
 #ifdef CONFIG_DEVFS_FS
@@ -1064,6 +1061,8 @@
 #endif
 }
 
+module_init(nv_init_module);
+module_exit(nv_exit_module);
 
 /* this is only called when the vmas are duplicated.
  * this appears to only happen when the process is cloned to create
@@ -1081,11 +1080,8 @@
         nv_alloc_t *at = (nv_alloc_t *) VMA_PRIVATE(vma);
         at->usage_count++;
     }
-
-    MOD_INC_USE_COUNT;
 }
 
-
 void
 nv_kern_vma_release(struct vm_area_struct *vma)
 {
@@ -1107,8 +1103,6 @@
             VMA_PRIVATE(vma) = NULL;
         }
     }
-
-    MOD_DEC_USE_COUNT;
 }
 
 #if defined(NVCPU_IA64) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 4, 9))
@@ -1182,8 +1176,6 @@
         goto failed;
     }
 
-    MOD_INC_USE_COUNT;
-
     nvl = &nv_linux_devices[devnum];
     nv = NV_STATE_PTR(nvl);
 
@@ -1241,7 +1233,7 @@
          * Finalize the tasklet initialization started in init_module and
          * enable bottom-half processing.
          */
-        nvl->tl.func = rm_isr_bh;
+        nvl->tl.func = (void *) rm_isr_bh;
         nvl->tl.data = (unsigned long) nv->pdev;
         tasklet_enable(&nvl->tl);
 
@@ -1255,7 +1247,6 @@
     return 0;
 
  failed:
-    MOD_DEC_USE_COUNT;
     if (nv)
         nv_unmap_device(nv);
     nv_unlock_ldata(nv);
@@ -1334,8 +1325,6 @@
         NV_KFREE(file->private_data);
     file->private_data = (void *) 0;
 
-    MOD_DEC_USE_COUNT;
-
     return 0;
 }
 
@@ -1496,9 +1485,6 @@
 
     vma->vm_file = file;
 
-    /* just increment usage count, rather than calling vma_open */
-    MOD_INC_USE_COUNT;
-
     return 0;
 }
 
@@ -1603,12 +1589,13 @@
 
     switch (_IOC_NR(cmd))
     {
+#ifndef KERNEL_2_5
         /* debug tool; zap the module use count so we can unload driver */
         /*             even if it is confused */
         case _IOC_NR(NV_IOCTL_MODULE_RESET):
             atomic_set(&__this_module.uc.usecount, 1);
             break;
-
+#endif
         /* enable/disable interrupts
            used by X driver to make card quiet while Xserver unnecessarily
            diddles around in its PCI config space
@@ -1794,8 +1781,6 @@
     /* save the nv away in file->private_data */
     NV_HIDE_IN_FILEP(file, nv);
 
-    MOD_INC_USE_COUNT;
-
     NV_DMSG(nv, "open");
 
     nv->flags |= NV_FLAG_OPEN + NV_FLAG_CONTROL;
@@ -1840,8 +1825,6 @@
         NV_KFREE(file->private_data);
     file->private_data = (void *) 0;
 
-    MOD_DEC_USE_COUNT;
-
     return 0;
 }
 
