Index: kopete/protocols/jabber/googletalk/libjingle/talk/base/socketaddress.cc
===================================================================
--- kopete/protocols/jabber/googletalk/libjingle/talk/base/socketaddress.cc	(revision 1292761)
+++ kopete/protocols/jabber/googletalk/libjingle/talk/base/socketaddress.cc	(revision 1292762)
@@ -31,6 +31,7 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <netdb.h>
+#include <unistd.h>
 #endif
 
 #include <cstring>
Index: kopete/protocols/jabber/googletalk/libjingle/talk/base/ssladapter.cc
===================================================================
--- kopete/protocols/jabber/googletalk/libjingle/talk/base/ssladapter.cc	(revision 1292761)
+++ kopete/protocols/jabber/googletalk/libjingle/talk/base/ssladapter.cc	(revision 1292762)
@@ -27,6 +27,12 @@
 
 #include "talk/base/ssladapter.h"
 
+#ifdef POSIX
+extern "C" {
+#include <unistd.h>
+}
+#endif
+
 #if !defined(SSL_USE_SCHANNEL) && !defined(SSL_USE_OPENSSL)
 #ifdef WIN32
 #define SSL_USE_SCHANNEL 1
Index: kopete/protocols/jabber/googletalk/libjingle/talk/base/stringutils.h
===================================================================
--- kopete/protocols/jabber/googletalk/libjingle/talk/base/stringutils.h	(revision 1292761)
+++ kopete/protocols/jabber/googletalk/libjingle/talk/base/stringutils.h	(revision 1292762)
@@ -198,15 +198,6 @@
 }
 
 template<class CTYPE>
-size_t sprintfn(CTYPE* buffer, size_t buflen, const CTYPE* format, ...) {
-  va_list args;
-  va_start(args, format);
-  size_t len = vsprintfn(buffer, buflen, format, args);
-  va_end(args);
-  return len;
-}
-
-template<class CTYPE>
 size_t vsprintfn(CTYPE* buffer, size_t buflen, const CTYPE* format,
                  va_list args) {
   int len = vsnprintf(buffer, buflen, format, args);
@@ -217,6 +208,15 @@
   return len;
 }
 
+template<class CTYPE>
+size_t sprintfn(CTYPE* buffer, size_t buflen, const CTYPE* format, ...) {
+  va_list args;
+  va_start(args, format);
+  size_t len = vsprintfn(buffer, buflen, format, args);
+  va_end(args);
+  return len;
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 // Allow safe comparing and copying ascii (not UTF-8) with both wide and
 // non-wide character strings.
