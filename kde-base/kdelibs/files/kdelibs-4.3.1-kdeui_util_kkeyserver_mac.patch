There's some non 64-bit supported code in here. So try to redo it in a 640bit
compatible way.

Author: Heiko Przybyl <zuxez@cs.tu-berlin.de>

--- kdelibs-4.3.1/work/kdelibs-4.3.1/kdeui/util/kkeyserver_mac.cpp.orig	2009-09-24 15:59:10 +0200
+++ kdelibs-4.3.1/work/kdelibs-4.3.1/kdeui/util/kkeyserver_mac.cpp	2009-09-24 16:48:46 +0200
@@ -65,11 +65,11 @@ namespace KKeyServer {
     
     static QMultiMap<int, uint> scancodes;
     static long lastLayoutID = -1;
-    static KeyboardLayoutRef lastLayout = NULL;
+    static TISInputSourceRef lastLayout = NULL;
     
     void updateScancodes() {
-        KeyboardLayoutRef layout;
-        if (KLGetCurrentKeyboardLayout(&layout) != noErr) {
+		TISInputSourceRef layout = TISCopyCurrentKeyboardLayoutInputSource();
+        if (layout == NULL) {
             kWarning() << "Error retrieving current layout";
         }
         if (layout != lastLayout) {
@@ -80,16 +80,27 @@ namespace KKeyServer {
 #endif
             lastLayout = layout;
             scancodes.clear();
-            void *kchr;
-            if (KLGetKeyboardLayoutProperty(layout, kKLKCHRData, const_cast<const void**>(&kchr)) != noErr) {
+            UCKeyboardLayout *uchr = (UCKeyboardLayout *)TISGetInputSourceProperty(layout, kTISPropertyUnicodeKeyLayoutData);
+            if (uchr == NULL) {
                 kWarning() << "Couldn't load active keyboard layout";
             } else {
                 for (int i = 0; i < 128; i++) {
                     UInt32 tmpState = 0;
-                    UInt32 chr = KeyTranslate(kchr, i, &tmpState);
-                    if (chr && chr != kFunctionKeyCharCode) {
-                        scancodes.insert(chr, i);
-                    }
+                    UInt32 deadKeyState = 0;
+					UInt32 flags = 0;
+					UniCharCount maxStringLength = 255;
+					UniCharCount actualStringLength = 0;
+					UniChar unicodeString[maxStringLength];
+
+					UCKeyTranslate(uchr, i, kUCKeyActionDown,
+							flags, LMGetKbdType(),
+							1, &deadKeyState, maxStringLength, &actualStringLength, unicodeString);
+					fprintf(stderr, "Got key: %s\n", unicodeString);
+					fflush(stderr);
+                    //UInt32 chr = KeyTranslate(kchr, i, &tmpState);
+                    //if (chr && chr != kFunctionKeyCharCode) {
+                    //    scancodes.insert(chr, i);
+                    //}
                 }
             }
         }
