--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/asynctcpsocket.cc.orig	2006-12-22 21:43:20.000000000 -0800
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/asynctcpsocket.cc	2006-12-22 21:46:00.000000000 -0800
@@ -52,9 +52,9 @@
 typedef uint16 PacketLength;
 const size_t PKT_LEN_SIZE = sizeof(PacketLength);
 
-const size_t BUF_SIZE = MAX_PACKET_SIZE + PKT_LEN_SIZE;
+const size_t TCP_BUF_SIZE = MAX_PACKET_SIZE + PKT_LEN_SIZE;
 
-AsyncTCPSocket::AsyncTCPSocket(AsyncSocket* socket) : AsyncPacketSocket(socket), insize_(BUF_SIZE), inpos_(0), outsize_(BUF_SIZE), outpos_(0) {
+AsyncTCPSocket::AsyncTCPSocket(AsyncSocket* socket) : AsyncPacketSocket(socket), insize_(TCP_BUF_SIZE), inpos_(0), outsize_(TCP_BUF_SIZE), outpos_(0) {
   inbuf_ = new char[insize_];
   outbuf_ = new char[outsize_];
 
--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/asyncudpsocket.cc.orig	2006-10-01 10:26:45.000000000 -0700
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/asyncudpsocket.cc	2006-12-22 21:44:03.000000000 -0800
@@ -48,10 +48,10 @@
 
 namespace cricket {
 
-const int BUF_SIZE = 64 * 1024;
+const int UDP_BUF_SIZE = 64 * 1024;
 
 AsyncUDPSocket::AsyncUDPSocket(AsyncSocket* socket) : AsyncPacketSocket(socket) {
-  size_ = BUF_SIZE;
+  size_ = UDP_BUF_SIZE;
   buf_ = new char[size_];
 
   assert(socket_);
--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/stl_decl.h.orig	2006-10-01 10:26:45.000000000 -0700
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/base/stl_decl.h	2006-12-22 21:49:33.000000000 -0800
@@ -45,7 +45,7 @@
   template <class T, class Alloc> class vector;
   template <class T, class Alloc> class list;
   template <class T, class Alloc> class slist;
-  template <class T, class Alloc, size_t BufSiz> class deque;
+  template <class T, class Alloc> class deque;
   template <class T, class Sequence> class stack;
   template <class T, class Sequence> class queue;
   template <class T, class Sequence, class Compare> class priority_queue;
--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/port.h.orig	2006-10-01 10:26:44.000000000 -0700
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/port.h	2006-12-22 23:12:59.000000000 -0800
@@ -46,6 +46,9 @@
 class Connection;
 class AsyncPacketSocket;
 
+extern const int RETRY_DELAY;
+extern const uint32 RETRY_TIMEOUT;
+
 enum ProtocolType { PROTO_UDP, PROTO_TCP, PROTO_SSLTCP, PROTO_LAST = PROTO_SSLTCP };
 const char * ProtoToString(ProtocolType proto);
 bool StringToProto(const char * value, ProtocolType& proto);
--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/relayport.cc.orig	2006-10-01 10:26:44.000000000 -0700
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/relayport.cc	2006-12-22 23:14:51.000000000 -0800
@@ -52,9 +52,7 @@
 
 namespace cricket {
 
-const int KEEPALIVE_DELAY = 10 * 60 * 1000;
-const int RETRY_DELAY = 50; // 50ms, from ICE spec
-const uint32 RETRY_TIMEOUT = 50 * 1000; // ICE says 50 secs
+const int RELAY_KEEPALIVE_DELAY = 10 * 60 * 1000;
 
 const uint32 MSG_DISPOSE_SOCKET = 100; // needs to be more than ID used by Port
 typedef TypedMessageData<AsyncPacketSocket *> DisposeSocketData;
@@ -460,7 +458,7 @@
 }
 
 void RelayEntry::ScheduleKeepAlive() {
-  requests_.SendDelayed(new AllocateRequest(this), KEEPALIVE_DELAY);
+  requests_.SendDelayed(new AllocateRequest(this), RELAY_KEEPALIVE_DELAY);
 }
 
 void RelayEntry::HandleConnectFailure() {
--- kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/stunport.cc.orig	2006-10-01 10:26:44.000000000 -0700
+++ kopete-3.5.5/kopete/protocols/jabber/jingle/libjingle/talk/p2p/base/stunport.cc	2006-12-22 23:11:48.000000000 -0800
@@ -48,10 +48,11 @@
 
 namespace cricket {
 
-const int KEEPALIVE_DELAY = 10 * 1000; // 10 seconds - sort timeouts
 const int RETRY_DELAY = 50; // 50ms, from ICE spec
 const uint32 RETRY_TIMEOUT = 50 * 1000; // ICE says 50 secs
 
+const int STUN_KEEPALIVE_DELAY = 10 * 1000; // 10 seconds - sort timeouts
+
 // Handles a binding request sent to the STUN server.
 class StunPortBindingRequest : public StunRequest {
 public:
@@ -81,7 +82,7 @@
 
     // We will do a keep-alive regardless of whether this request suceeds.
     // This should have almost no impact on network usage.
-    port_->requests_.SendDelayed(new StunPortBindingRequest(port_), KEEPALIVE_DELAY);
+    port_->requests_.SendDelayed(new StunPortBindingRequest(port_), STUN_KEEPALIVE_DELAY);
   }
 
   virtual void OnErrorResponse(StunMessage* response) {
@@ -96,7 +97,7 @@
     }
 
     if (GetMillisecondCount() - start_time_ <= RETRY_TIMEOUT)
-      port_->requests_.SendDelayed(new StunPortBindingRequest(port_), KEEPALIVE_DELAY);
+      port_->requests_.SendDelayed(new StunPortBindingRequest(port_), STUN_KEEPALIVE_DELAY);
   }
 
   virtual void OnTimeout() {
