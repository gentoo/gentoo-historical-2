diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/aim/aimcontact.cpp kdenetwork-3.4.0/kopete/protocols/oscar/aim/aimcontact.cpp
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/aim/aimcontact.cpp	2005-02-23 11:30:54.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/aim/aimcontact.cpp	2005-04-04 00:13:50.000000000 +0200
@@ -145,7 +145,7 @@
 
 void AIMContact::userInfoUpdated( const QString& contact, const UserDetails& details )
 {
-	if ( contact.lower() != contactId().lower() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 
 	kdDebug(OSCAR_RAW_DEBUG) << k_funcinfo << contact << endl;
@@ -179,7 +179,7 @@
 
 void AIMContact::userOnline( const QString& userId )
 {
-	if ( userId.lower() == contactId().lower() )
+	if ( Oscar::normalize( userId ) == Oscar::normalize( contactId() ) )
 	{
 		kdDebug(OSCAR_RAW_DEBUG) << k_funcinfo << "Getting more contact info" << endl;
 		setOnlineStatus( mProtocol->statusOnline );
@@ -197,7 +197,7 @@
 
 void AIMContact::updateAwayMessage( const QString& contact, const QString& message )
 {
-	if ( contact.lower() != contactId().lower() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 	else
 	{
@@ -220,7 +220,7 @@
 
 void AIMContact::updateProfile( const QString& contact, const QString& profile )
 {
-	if ( contact.lower() != contactId().lower() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 	
 	setProperty( mProtocol->clientProfile, profile );
diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/aim/aimcontact.cpp.orig kdenetwork-3.4.0/kopete/protocols/oscar/aim/aimcontact.cpp.orig
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/aim/aimcontact.cpp.orig	1970-01-01 01:00:00.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/aim/aimcontact.cpp.orig	2005-02-23 11:30:54.000000000 +0100
@@ -0,0 +1,267 @@
+/*
+  aimcontact.cpp  -  Oscar Protocol Plugin
+
+  Copyright (c) 2003 by Will Stephenson
+  Kopete    (c) 2002-2004 by the Kopete developers  <kopete-devel@kde.org>
+
+  *************************************************************************
+  *                                                                       *
+  * This program is free software; you can redistribute it and/or modify  *
+  * it under the terms of the GNU General Public License as published by  *
+  * the Free Software Foundation; either version 2 of the License, or     *
+  * (at your option) any later version.                                   *
+  *                                                                       *
+  *************************************************************************
+*/
+
+#include <time.h>
+
+#include <qapplication.h>
+#include <qregexp.h>
+
+#include <kactionclasses.h>
+#include <klocale.h>
+#include <kdebug.h>
+#include <kmessagebox.h>
+
+#include "kopeteaway.h"
+#include "kopetemessagemanager.h"
+#include "kopeteuiglobal.h"
+#include "kopetemetacontact.h"
+
+//liboscar
+#include "client.h"
+#include "oscartypes.h"
+#include "oscarutils.h"
+
+#include "aimprotocol.h"
+#include "aimuserinfo.h"
+#include "aimcontact.h"
+#include "aimaccount.h"
+
+AIMContact::AIMContact( Kopete::Account* account, const QString& name, Kopete::MetaContact* parent,
+                        const QString& icon, const Oscar::SSI& ssiItem )
+: OscarContact(account, name, parent, icon, ssiItem )
+{
+	mProtocol=static_cast<AIMProtocol *>(protocol());
+	setOnlineStatus( mProtocol->statusOffline );
+	
+	m_infoDialog = 0L;
+	m_warnUserAction = 0L;
+	mUserProfile="";
+	m_haveAwayMessage = false;
+	
+	QObject::connect( mAccount->engine(), SIGNAL( receivedUserInfo( const QString&, const UserDetails& ) ),
+	                  this, SLOT( userInfoUpdated( const QString&, const UserDetails& ) ) );
+	//QObject::connect( mAccount->engine(), SIGNAL( userIsOnline( const QString& ) ), this, SLOT( userOnline( const QString& ) ) );
+	QObject::connect( mAccount->engine(), SIGNAL( userIsOffline( const QString& ) ), this, SLOT( userOffline( const QString& ) ) );	
+	QObject::connect( mAccount->engine(), SIGNAL( receivedAwayMessage( const QString&, const QString& ) ),
+	                  this, SLOT( updateAwayMessage( const QString&, const QString& ) ) );
+	QObject::connect( mAccount->engine(), SIGNAL( receivedProfile( const QString&, const QString& ) ),
+	                  this, SLOT( updateProfile( const QString&, const QString& ) ) );
+	QObject::connect( mAccount->engine(), SIGNAL( userWarned( const QString&, Q_UINT16, Q_UINT16 ) ),
+	                  this, SLOT( gotWarning( const QString&, Q_UINT16, Q_UINT16 ) ) );
+}
+
+AIMContact::~AIMContact()
+{
+}
+
+bool AIMContact::isReachable()
+{
+	return true;
+}
+
+QPtrList<KAction> *AIMContact::customContextMenuActions()
+{
+	
+	QPtrList<KAction> *actionCollection = new QPtrList<KAction>();
+	if ( !m_warnUserAction )
+	{
+		m_warnUserAction = new KAction( i18n( "&Warn User" ), 0, this, SLOT( warnUser() ), this, "warnAction" );
+	}
+	
+	m_warnUserAction->setEnabled( account()->isConnected() );
+	
+	actionCollection->append( m_warnUserAction );
+	return actionCollection;
+}
+
+const QString AIMContact::awayMessage()
+{
+	return property(mProtocol->awayMessage).value().toString();
+}
+
+void AIMContact::setAwayMessage(const QString &message)
+{
+	kdDebug(14152) << k_funcinfo <<
+		"Called for '" << contactId() << "', away msg='" << message << "'" << endl;
+	QString filteredMessage = message;
+	filteredMessage.replace(
+		QRegExp(QString::fromLatin1("<[hH][tT][mM][lL].*>(.*)</[hH][tT][mM][lL]>")),
+		QString::fromLatin1("\\1"));
+	filteredMessage.replace(
+		QRegExp(QString::fromLatin1("<[bB][oO][dD][yY].*>(.*)</[bB][oO][dD][yY]>")),
+		QString::fromLatin1("\\1") );
+	filteredMessage.replace(
+		QRegExp(QString::fromLatin1("<[fF][oO][nN][tT].*>(.*)</[fF][oO][nN][tT]>")),
+		QString::fromLatin1("\\1") );
+	setProperty(mProtocol->awayMessage, filteredMessage);
+}
+
+int AIMContact::warningLevel() const
+{
+	return m_warningLevel;
+}
+
+void AIMContact::updateSSIItem()
+{
+	if ( m_ssiItem.type() != 0xFFFF && m_ssiItem.waitingAuth() == false &&
+	     onlineStatus() == Kopete::OnlineStatus::Unknown )
+	{
+		//make sure they're offline
+		setOnlineStatus( static_cast<AIMProtocol*>( protocol() )->statusOffline );
+	}
+}
+
+void AIMContact::slotUserInfo()
+{
+	if ( !m_infoDialog)
+	{
+		m_infoDialog = new AIMUserInfoDialog( this, static_cast<AIMAccount*>( account() ), false, Kopete::UI::Global::mainWidget(), 0 );
+		if( !m_infoDialog )
+			return;
+		connect( m_infoDialog, SIGNAL( finished() ), this, SLOT( closeUserInfoDialog() ) );
+		m_infoDialog->show();
+		if ( mAccount->isConnected() )
+		{
+			mAccount->engine()->requestAIMProfile( contactId() );
+			mAccount->engine()->requestAIMAwayMessage( contactId() );
+		}
+	}
+	else
+		m_infoDialog->raise();
+}
+
+void AIMContact::userInfoUpdated( const QString& contact, const UserDetails& details )
+{
+	if ( contact.lower() != contactId().lower() )
+		return;
+
+	kdDebug(OSCAR_RAW_DEBUG) << k_funcinfo << contact << endl;
+	
+	//if they don't have an SSI alias, make sure we use the capitalization from the
+	//server so their contact id looks all pretty.
+	QString nickname = property( Kopete::Global::Properties::self()->nickName() ).value().toString();
+	if ( Oscar::normalize( nickname ) == Oscar::normalize( details.userId() ) )
+		setProperty( Kopete::Global::Properties::self()->nickName(), details.userId() );
+	
+	if ( ( details.userClass() & 32 ) == 0 )
+	{
+		setOnlineStatus( mProtocol->statusOnline ); //we're online
+		removeProperty( mProtocol->awayMessage );
+		m_haveAwayMessage = false;
+	}
+	else
+	{
+		setOnlineStatus( mProtocol->statusAway ); //we're away
+		if ( !m_haveAwayMessage ) //prevent cyclic away message requests
+		{
+			mAccount->engine()->requestAIMAwayMessage( contactId() );
+			m_haveAwayMessage = true;
+		}
+	}
+	
+	OscarContact::userInfoUpdated( contact, details );
+}
+
+
+
+void AIMContact::userOnline( const QString& userId )
+{
+	if ( userId.lower() == contactId().lower() )
+	{
+		kdDebug(OSCAR_RAW_DEBUG) << k_funcinfo << "Getting more contact info" << endl;
+		setOnlineStatus( mProtocol->statusOnline );
+	}
+}
+
+void AIMContact::userOffline( const QString& userId )
+{
+	if ( Oscar::normalize( userId ) == Oscar::normalize( contactId() ) )
+	{
+		setOnlineStatus( mProtocol->statusOffline );
+		removeProperty( mProtocol->awayMessage );
+	}
+}
+
+void AIMContact::updateAwayMessage( const QString& contact, const QString& message )
+{
+	if ( contact.lower() != contactId().lower() )
+		return;
+	else
+	{
+		if ( message.isEmpty() )
+		{
+			removeProperty( mProtocol->awayMessage );
+			setOnlineStatus( mProtocol->statusOnline );
+			m_haveAwayMessage = false;
+		}
+		else
+		{
+			m_haveAwayMessage = true;
+			setAwayMessage( message );
+			setOnlineStatus( mProtocol->statusAway );
+		}
+	}
+	
+	emit updatedProfile();
+}
+
+void AIMContact::updateProfile( const QString& contact, const QString& profile )
+{
+	if ( contact.lower() != contactId().lower() )
+		return;
+	
+	setProperty( mProtocol->clientProfile, profile );
+	emit updatedProfile();
+}
+
+void AIMContact::gotWarning( const QString& contact, Q_UINT16 increase, Q_UINT16 newLevel )
+{
+	//somebody just got bitchslapped! :O
+	Q_UNUSED( increase );
+	if ( Oscar::normalize( contact ) == Oscar::normalize( contactId() ) )
+		m_warningLevel = newLevel;
+	
+	//TODO add a KNotify event after merge to HEAD
+}
+
+void AIMContact::closeUserInfoDialog()
+{
+	m_infoDialog->delayedDestruct();
+	m_infoDialog = 0L;
+}
+
+void AIMContact::warnUser()
+{
+	QString nick = property( Kopete::Global::Properties::self()->nickName() ).value().toString();
+	QString message = i18n( "<qt>Would you like to warn %1 anonymously or with your name?<br>" \
+	                        "(Warning a user on AIM will result in a \"Warning Level\"" \
+	                        " increasing for the user you warn. Once this level has reached a" \
+	                        " certain point, they will not be able to sign on. Please do not abuse" \
+	                        " this function, it is meant for legitimate practices.)</qt>" ).arg( nick );
+	
+	
+	int result = KMessageBox::questionYesNoCancel( Kopete::UI::Global::mainWidget(), message,
+	                                               i18n( "Warn User %1?" ).arg( nick ),
+	                                               i18n( "Warn Anonymously" ), i18n( "Warn" ) );
+	
+	if ( result == KMessageBox::Yes )
+		mAccount->engine()->sendWarning( contactId(), true);
+	else if ( result == KMessageBox::No )
+		mAccount->engine()->sendWarning( contactId(), false);
+}
+
+#include "aimcontact.moc"
+//kate: tab-width 4; indent-mode csands;
diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/icq/icqcontact.cpp kdenetwork-3.4.0/kopete/protocols/oscar/icq/icqcontact.cpp
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/icq/icqcontact.cpp	2005-02-03 23:52:07.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/icq/icqcontact.cpp	2005-04-04 00:13:50.000000000 +0200
@@ -106,7 +106,7 @@
 
 void ICQContact::userOnline( const QString& userId )
 {
-	if ( userId != contactId() )
+	if ( Oscar::normalize( userId ) != Oscar::normalize( contactId() ) )
 		return;
 
 	kdDebug(OSCAR_ICQ_DEBUG) << "Setting " << userId << " online" << endl;
@@ -116,7 +116,7 @@
 
 void ICQContact::userOffline( const QString& userId )
 {
-	if ( userId != contactId() )
+	if ( Oscar::normalize( userId ) != Oscar::normalize( contactId() ) )
 		return;
 
 	kdDebug(OSCAR_ICQ_DEBUG) << "Setting " << userId << " offline" << endl;
@@ -130,7 +130,7 @@
 		setOnlineStatus( mProtocol->statusManager()->waitingForAuth() );
 
 	QString nickname = property( Kopete::Global::Properties::self()->nickName() ).value().toString();
-	if ( nickname.isEmpty() || nickname == contactId() )
+	if ( nickname.isEmpty() || Oscar::normalize( nickname ) == Oscar::normalize( contactId() ) )
 	{
 		int time = ( KApplication::random() % 25 ) * 1000;
 		kdDebug(OSCAR_ICQ_DEBUG) << k_funcinfo << "updating nickname in " << time/1000 << " seconds" << endl;
@@ -164,7 +164,7 @@
 
 void ICQContact::slotGotAuthReply( const QString& contact, const QString& reason, bool granted )
 {
-	if ( contact != contactId() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 	
 	kdDebug(OSCAR_ICQ_DEBUG) << k_funcinfo << endl;
@@ -189,7 +189,7 @@
 
 void ICQContact::slotGotAuthRequest( const QString& contact, const QString& reason )
 {
-	if ( contact != contactId() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 	
 	ICQAuthReplyDialog replyDialog;
@@ -202,7 +202,7 @@
 
 void ICQContact::receivedLongInfo( const QString& contact )
 {
-	if ( contact.lower() != contactId().lower() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 	{
 		if ( m_infoWidget )
 			m_infoWidget->delayedDestruct();
@@ -224,7 +224,7 @@
 
 void ICQContact::receivedShortInfo( const QString& contact )
 {
-	if ( contact != contactId() )
+	if ( Oscar::normalize( contact ) != Oscar::normalize( contactId() ) )
 		return;
 	
 	ICQShortInfo shortInfo = mAccount->engine()->getShortInfo( contact );
diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssiauthtask.cpp kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssiauthtask.cpp
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssiauthtask.cpp	2005-01-30 16:09:38.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssiauthtask.cpp	2005-04-04 00:13:50.000000000 +0200
@@ -21,6 +21,7 @@
 #include "transfer.h"
 #include "buffer.h"
 #include "connection.h"
+#include "oscarutils.h"
 
 #include <kdebug.h>
 
@@ -135,7 +136,7 @@
 {
 	Buffer* buf = transfer()->buffer();
 	
-	QString uin = buf->getBUIN();
+	QString uin = Oscar::normalize( buf->getBUIN() );
 	QString reason = buf->getBSTR();
 	
 	buf->getWord(); // 0x0000 - Unknown
@@ -149,7 +150,7 @@
 {
 	Buffer* buf = transfer()->buffer();
 	
-	QString uin = buf->getBUIN();
+	QString uin = Oscar::normalize( buf->getBUIN() );
 	QString reason = buf->getBSTR();
 	
 	buf->getWord(); // 0x0000 - Unknown
@@ -164,7 +165,7 @@
 {
 	Buffer* buf = transfer()->buffer();
 	
-	QString uin = buf->getBUIN();
+	QString uin = Oscar::normalize( buf->getBUIN() );
 	bool accepted = buf->getByte();
 	QString reason = buf->getBSTR();
 	
@@ -186,7 +187,7 @@
 {
 	Buffer* buf = transfer()->buffer();
 	
-	QString uin = buf->getBUIN();
+	QString uin = Oscar::normalize( buf->getBUIN() );
 	
 	kdDebug( OSCAR_RAW_DEBUG ) << k_funcinfo << "User " << uin << " added you to the contact list" << endl;
 	emit contactAddedYou( uin );
diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssilisttask.cpp kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssilisttask.cpp
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssilisttask.cpp	2005-01-25 16:10:19.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssilisttask.cpp	2005-04-04 00:13:50.000000000 +0200
@@ -110,6 +110,9 @@
 			tlvList.append( t );
 		}
 		
+		if ( itemType == ROSTER_CONTACT )
+			itemName = Oscar::normalize( itemName );
+		
 		Oscar::SSI s( itemName, groupId, itemId, itemType, tlvList );
 		s.setTLVListLength( tlvLength );
 		
diff -Nur kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssimodifytask.cpp kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssimodifytask.cpp
--- kdenetwork-3.4.0.orig/kopete/protocols/oscar/liboscar/ssimodifytask.cpp	2005-02-01 20:41:08.000000000 +0100
+++ kdenetwork-3.4.0/kopete/protocols/oscar/liboscar/ssimodifytask.cpp	2005-04-04 00:13:50.000000000 +0200
@@ -41,7 +41,7 @@
 {
 }
 
-void SSIModifyTask::onGo( )
+void SSIModifyTask::onGo()
 {
 	sendSSIUpdate();
 }
@@ -62,7 +62,10 @@
 {
 	m_opType = Add;
 	m_opSubject = Contact;
-	Oscar::SSI oldItem = m_ssiManager->findContact( contact );
+	
+	QString newContact = Oscar::normalize( contact );
+	
+	Oscar::SSI oldItem = m_ssiManager->findContact( newContact );
 	Oscar::SSI groupItem = m_ssiManager->findGroup( group );
 	
 	if ( !groupItem )
@@ -81,7 +84,7 @@
 	}
 	
 	kdDebug( OSCAR_RAW_DEBUG ) << k_funcinfo << "creating new SSI item for " << contact << " in group " << group << endl;
-	Oscar::SSI newItem( contact, groupItem.gid(), m_ssiManager->nextContactId(), ROSTER_CONTACT, tlvList );
+	Oscar::SSI newItem( newContact, groupItem.gid(), m_ssiManager->nextContactId(), ROSTER_CONTACT, tlvList );
 	m_newItem = newItem;
 	return true;
 }
@@ -90,7 +93,7 @@
 {
 	m_opType = Remove;
 	m_opSubject = Contact;
-	m_oldItem = m_ssiManager->findContact( contact );
+	m_oldItem = m_ssiManager->findContact( Oscar::normalize( contact ) );
 	kdDebug(OSCAR_RAW_DEBUG) << k_funcinfo << "Scheduling" << m_oldItem.name() << " for removal" << endl;
 	return true;
 }
@@ -99,7 +102,7 @@
 {
 	m_opType = Change;
 	m_opSubject = Group;
-	m_oldItem = m_ssiManager->findContact( contact );
+	m_oldItem = m_ssiManager->findContact( Oscar::normalize( contact ) );
 	Oscar::SSI oldGroupItem;
 	if ( m_oldItem.isValid() )
 		oldGroupItem = m_ssiManager->findGroup( newGroup );
@@ -138,7 +141,7 @@
 	return true;
 }
 
-bool SSIModifyTask::removeGroup( const QString & groupName )
+bool SSIModifyTask::removeGroup( const QString& groupName )
 {
 	m_opType = Remove;
 	m_opSubject = Group;
