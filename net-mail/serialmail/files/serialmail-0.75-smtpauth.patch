diff -uN serialmail-0.75/Makefile serialmail-0.75-new/Makefile
--- serialmail-0.75/Makefile	Sun Nov 15 03:28:23 1998
+++ serialmail-0.75-new/Makefile	Fri Mar  7 23:08:05 2003
@@ -44,6 +44,10 @@
 compile auto_qmail.c
 	./compile auto_qmail.c
 
+base64.o: \
+compile base64.c
+	./compile base64.c
+
 byte_chr.o: \
 compile byte_chr.c byte.h
 	./compile byte_chr.c
@@ -399,6 +403,14 @@
 caldate.h stralloc.h
 	./compile mess822_date.c
 
+myMd5.o: \
+compile myMd5.c
+	./compile myMd5.c
+
+myMd5Keyed.o: \
+compile myMd5Keyed.c
+	./compile myMd5Keyed.c
+
 now.0: \
 now.3
 	nroff -man now.3 > now.0
@@ -478,9 +490,11 @@
 
 serialsmtp: \
 load serialsmtp.o timeoutread.o timeoutwrite.o quote.o case.a env.a \
+base64.o myMd5.o myMd5Keyed.o \
 sig.a getln.a stralloc.a strerr.a substdio.a alloc.a error.a str.a \
 wait.a open.a fd.a fs.a
 	./load serialsmtp timeoutread.o timeoutwrite.o quote.o \
+	base64.o myMd5.o myMd5Keyed.o \
 	case.a env.a sig.a getln.a stralloc.a strerr.a substdio.a \
 	alloc.a error.a str.a wait.a open.a fd.a fs.a 
 
diff -uN serialmail-0.75/TARGETS serialmail-0.75-new/TARGETS
--- serialmail-0.75/TARGETS	Sun Nov 15 03:28:23 1998
+++ serialmail-0.75-new/TARGETS	Fri Mar  7 23:08:05 2003
@@ -53,6 +53,9 @@
 str_diff.o
 str_rchr.o
 str_start.o
+base64.o
+myMd5.o
+myMd5Keyed.o
 byte_chr.o
 byte_diff.o
 byte_copy.o
diff -uN serialmail-0.75/base64.c serialmail-0.75-new/base64.c
--- serialmail-0.75/base64.c	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/base64.c	Fri Mar  7 23:08:05 2003
@@ -0,0 +1,106 @@
+#include "stralloc.h"
+
+static char numToChar[66]="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+                          "abcdefghijklmnopqrstuvwxyz"
+                          "0123456789+/=";
+
+/* 
+ *  Return value: 0 -> success
+ *                1 -> stralloc_append failed (no memory)
+ *                2 -> illegal length of src
+ */
+int base64Encode(dst,src,len)
+stralloc *dst;
+unsigned char *src;
+int len;
+{
+  if (len<0) return 2;
+  dst->len=0;
+  while (len>=3) {
+    if ( !stralloc_append(dst,&(numToChar[src[0]>>2])) )
+      return 1;
+    if ( !stralloc_append(dst,&(numToChar[((src[0]<<4)|(src[1]>>4))&0x3f])) )
+      return 1;
+    if ( !stralloc_append(dst,&(numToChar[((src[1]<<2)|(src[2]>>6))&0x3f])) )
+      return 1;
+    if ( !stralloc_append(dst,&(numToChar[(src[2]&0x3f)])) )
+      return 1;
+    src+=3;
+    len-=3;
+  }
+  if (len==0)
+    return 0;
+    
+  if ( !stralloc_append(dst,&(numToChar[src[0]>>2])) )
+    return 1;
+ 
+  if (len==1) {
+    if (!stralloc_append(dst,&(numToChar[(src[0]<<4)&0x3f]))) 
+      return 1;
+    if (!stralloc_append(dst,&(numToChar[64]))) 
+      return 1;
+    if (!stralloc_append(dst,&(numToChar[64]))) 
+      return 1;
+    return 0;
+  }
+  
+  if ( !stralloc_append(dst,&(numToChar[((src[0]<<4)|(src[1]>>4))&0x3f])) )
+    return 1;  
+  if ( !stralloc_append(dst,&(numToChar[(src[1]<<2)&0x3f])) ) 
+    return 1;
+  if ( !stralloc_append(dst,&(numToChar[64])) ) 
+    return 1;
+  return 0;
+}
+
+static unsigned int charToNum(unsigned char src)
+{
+  if (src>='A' && src<='Z') 
+    return (int)(src-'A');
+  
+  if (src>='a' && src<='z')
+    return ((int)(src-'a'))+26;
+    
+  if (src>='0' && src<='9')
+    return ((int)(src-'0'))+52;
+    
+  if (src=='+') return 62;
+  if (src=='/') return 63;
+  return 100;
+}
+
+/*
+ * Return value: 0 -> success
+ *               1 -> stralloc_append failed (no memory)
+ *               2 -> illegal character
+ */
+int base64Decode(dst,src,len)
+stralloc *dst;
+unsigned char *src;
+int len;
+{
+  unsigned int h1,h2;
+  unsigned char ch;
+  dst->len=0;
+  while (len>3)
+  {
+    if ( (h1=charToNum(*(src++))) > 63) return 0;
+    if ( (h2=charToNum(*(src++))) > 63) return 2; 
+    ch=( (h1<<2)|(h2>>4) );
+    if (!stralloc_append(dst,&ch)) return 1;
+
+    if (*src=='=') return 0;
+    h1=h2;
+    if ( (h2=charToNum(*(src++))) > 63) return 2;  
+    ch=( (h1<<4)|(h2>>2) );
+    if (!stralloc_append(dst,&ch)) return 1;
+
+    if (*src=='=') return 0;
+    h1=h2;
+    if ( (h2=charToNum(*(src++))) > 63) return 2;
+    ch=( (h1<<6)|h2 );
+    if (!stralloc_append(dst,&ch)) return 1;
+    len-=4;
+  }
+  return 0;
+}
diff -uN serialmail-0.75/base64.h serialmail-0.75-new/base64.h
--- serialmail-0.75/base64.h	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/base64.h	Fri Mar  7 23:08:05 2003
@@ -0,0 +1,2 @@
+int base64Encode();
+int base64Decode();
diff -uN serialmail-0.75/maildirsmtp.sh serialmail-0.75-new/maildirsmtp.sh
--- serialmail-0.75/maildirsmtp.sh	Sun Nov 15 03:28:23 1998
+++ serialmail-0.75-new/maildirsmtp.sh	Fri Mar  7 23:08:05 2003
@@ -2,4 +2,4 @@
 exec \
 HOME/bin/maildirserial -b -t 1209600 -- "$1" "$2" \
 tcpclient -RHl0 -- "$3" 25 \
-HOME/bin/serialsmtp "$2" "$4"
+HOME/bin/serialsmtp "$2" "$4" "$5" "$6"
diff -uN serialmail-0.75/myMd5.c serialmail-0.75-new/myMd5.c
--- serialmail-0.75/myMd5.c	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/myMd5.c	Fri Mar  7 23:08:05 2003
@@ -0,0 +1,290 @@
+/* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm */
+
+/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
+   rights reserved.
+
+   License to copy and use this software is granted provided that it
+   is identified as the "RSA Data Security, Inc. MD5 Message-Digest
+   Algorithm" in all material mentioning or referencing this software
+   or this function.
+
+   License is also granted to make and use derivative works provided
+   that such works are identified as "derived from the RSA Data
+   Security, Inc. MD5 Message-Digest Algorithm" in all material
+   mentioning or referencing the derived work.  
+                                                                    
+   RSA Data Security, Inc. makes no representations concerning either
+   the merchantability of this software or the suitability of this
+   software for any particular purpose. It is provided "as is"
+   without express or implied warranty of any kind.  
+                                                                    
+   These notices must be retained in any copies of any part of this
+   documentation and/or software.  
+   
+   Modified to fit my needs and style by Ingo Rohloff.
+ */
+
+#include "myMd5.h"
+
+/* Constants for MD5Transform routine. */
+#define S11 7
+#define S12 12
+#define S13 17
+#define S14 22
+#define S21 5
+#define S22 9
+#define S23 14
+#define S24 20
+#define S31 4
+#define S32 11
+#define S33 16
+#define S34 23
+#define S41 6
+#define S42 10
+#define S43 15
+#define S44 21
+
+static void md5Transform(unsigned int out[4],unsigned char[64]);
+static void lsbEncode (unsigned char *out, unsigned int *in,
+                       unsigned int len);
+static void lsbDecode (unsigned int *out,unsigned char *in,
+                       unsigned int len);
+
+static unsigned char PADDING[64] = {
+  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+};
+
+/* F, G, H and I are basic MD5 functions.
+ */
+#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
+#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
+#define H(x, y, z) ((x) ^ (y) ^ (z))
+#define I(x, y, z) ((y) ^ ((x) | (~z)))
+
+/* ROTATE_LEFT rotates x left n bits.
+ */
+#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))
+
+/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
+   Rotation is separate from addition to prevent recomputation.
+ */
+#define FF(a, b, c, d, x, s, ac) { \
+    (a) += F ((b), (c), (d)) + (x) + (unsigned int)(ac); \
+    (a) = ROTATE_LEFT ((a), (s)); \
+    (a) += (b); \
+  }
+#define GG(a, b, c, d, x, s, ac) { \
+    (a) += G ((b), (c), (d)) + (x) + (unsigned int)(ac); \
+    (a) = ROTATE_LEFT ((a), (s)); \
+    (a) += (b); \
+  }
+#define HH(a, b, c, d, x, s, ac) { \
+    (a) += H ((b), (c), (d)) + (x) + (unsigned int)(ac); \
+    (a) = ROTATE_LEFT ((a), (s)); \
+    (a) += (b); \
+  }
+#define II(a, b, c, d, x, s, ac) { \
+    (a) += I ((b), (c), (d)) + (x) + (unsigned int)(ac); \
+    (a) = ROTATE_LEFT ((a), (s)); \
+    (a) += (b); \
+  }
+
+/* MD5 initialization. Begins an MD5 operation, writing a new context.
+ */
+void md5Init(md5ctxP context)
+{
+  context->count[0] = context->count[1] = 0;
+
+  /* Load magic initialization constants.
+   */
+  context->state[0] = 0x67452301;
+  context->state[1] = 0xefcdab89;
+  context->state[2] = 0x98badcfe;
+  context->state[3] = 0x10325476;
+}
+
+/* MD5 block update operation. Continues an MD5 message-digest
+     operation, processing another message block, and updating the
+     context.
+ */
+void md5Update (md5ctxP context, 
+                unsigned char *input, 
+                unsigned int inputLen)
+{
+  unsigned int i, index, partLen;
+
+  /* Compute number of bytes mod 64 */
+  index = (context->count[0]/8) & 0x3F;
+
+  /* Update number of bits */
+  if ( (context->count[0] += inputLen*8) < inputLen*8 )
+    context->count[1]++;
+  context->count[1] += (inputLen >> 29);
+  
+  partLen = 64 - index;
+  
+  /* 
+    Transform as many times as possible.
+  */
+  if (inputLen >= partLen) 
+  {
+    memcpy(&(context->buffer[index]), input, partLen);
+    md5Transform(context->state, context->buffer);
+  
+    for (i = partLen; i + 63 < inputLen; i += 64)
+      md5Transform(context->state, &input[i]);
+    
+    index = 0;
+  }
+  else
+    i = 0;
+  
+  /* Buffer remaining input */
+  memcpy(&(context->buffer[index]), &(input[i]), inputLen-i);
+}
+
+/* MD5 finalization. Ends an MD5 message-digest operation, writing the
+     the message digest and zeroizing the context.
+ */
+void md5Final(unsigned char *digest, md5ctxP context)
+{
+  unsigned char bits[8];
+  unsigned int index, padLen;
+
+  /* Save number of bits */
+  lsbEncode(bits, context->count, 8);
+
+  /* Pad out to 56 mod 64. */
+  index = (context->count[0]/8) & 0x3f;
+  padLen = (index < 56) ? (56 - index) : (120 - index);
+  md5Update (context, PADDING, padLen);
+  
+  /* Append length (before padding) */
+  md5Update (context, bits, 8);
+
+  /* Store state in digest */
+  lsbEncode (digest, context->state, 16);
+}
+
+/* 
+   MD5 basic transformation. Transforms state based on block.
+ */
+static void md5Transform (unsigned int *state, unsigned char *block)
+{
+  unsigned int a = state[0], b = state[1], c = state[2], d = state[3];
+  unsigned int x[16];
+  
+  lsbDecode (x, block, 64);
+
+  /* Round 1 */
+  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
+  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
+  FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
+  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
+  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
+  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
+  FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
+  FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
+  FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
+  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
+  FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
+  FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
+  FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
+  FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
+  FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
+  FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */
+
+  /* Round 2 */
+  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
+  GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
+  GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
+  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
+  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
+  GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
+  GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
+  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
+  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
+  GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
+  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
+  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
+  GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
+  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
+  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
+  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */
+
+  /* Round 3 */
+  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
+  HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
+  HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
+  HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
+  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
+  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
+  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
+  HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
+  HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
+  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
+  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
+  HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
+  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
+  HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
+  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
+  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */
+
+  /* Round 4 */
+  II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
+  II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
+  II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
+  II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
+  II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
+  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
+  II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
+  II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
+  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
+  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
+  II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
+  II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
+  II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
+  II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
+  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
+  II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
+
+  state[0] += a;
+  state[1] += b;
+  state[2] += c;
+  state[3] += d;
+}
+
+/* 
+   encodes an array of ints into an array of chars using
+   least significant byte first order.
+*/
+static void lsbEncode (unsigned char *output, unsigned int *input, 
+                       unsigned int len)
+{
+  unsigned int i, j;
+
+  for (i = 0, j = 0; j < len; i++, j += 4) 
+  {
+    output[j] =   (unsigned char)(input[i] & 0xff);
+    output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
+    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
+    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
+  }
+}
+
+/* 
+   decodes an array of chars into an array of ints using
+   least significant byte first order.
+ */
+static void lsbDecode (unsigned int *output, unsigned char *input, 
+                       unsigned int len)
+{
+  unsigned int i, j;
+
+  for (i = 0, j = 0; j < len; i++, j += 4)
+    output[i] = 
+     ((unsigned int)input[j]) | (((unsigned int)input[j+1]) << 8) |
+     (((unsigned int)input[j+2]) << 16) | (((unsigned int)input[j+3]) << 24);
+}
diff -uN serialmail-0.75/myMd5.h serialmail-0.75-new/myMd5.h
--- serialmail-0.75/myMd5.h	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/myMd5.h	Fri Mar  7 23:08:05 2003
@@ -0,0 +1,42 @@
+/* MD5.H - header file for MD5C.C
+ */
+
+/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
+   rights reserved.
+
+   License to copy and use this software is granted provided that it
+   is identified as the "RSA Data Security, Inc. MD5 Message-Digest
+   Algorithm" in all material mentioning or referencing this software
+   or this function.
+
+   License is also granted to make and use derivative works provided
+   that such works are identified as "derived from the RSA Data
+   Security, Inc. MD5 Message-Digest Algorithm" in all material
+   mentioning or referencing the derived work.  
+                                                                    
+   RSA Data Security, Inc. makes no representations concerning either
+   the merchantability of this software or the suitability of this
+   software for any particular purpose. It is provided "as is"
+   without express or implied warranty of any kind.  
+                                                                    
+   These notices must be retained in any copies of any part of this
+   documentation and/or software.  
+   
+   Modified to fit my needs and style by Ingo Rohloff
+ */
+
+#ifndef _MD5_H_
+#define _MD5_H_ 1
+
+/* MD5 context. */
+typedef struct {
+  unsigned int state[4];      /* state (ABCD) */
+  unsigned int count[2];      /* number of bits, modulo 2^64 (lsb first) */
+  unsigned char buffer[64];   /* input buffer */
+} md5ctxT,*md5ctxP;
+
+void md5Init(md5ctxP context);
+void md5Update (md5ctxP context, unsigned char *input, unsigned int inputLen);
+void md5Final(unsigned char *digest, md5ctxP context);
+
+#endif
diff -uN serialmail-0.75/myMd5Keyed.c serialmail-0.75-new/myMd5Keyed.c
--- serialmail-0.75/myMd5Keyed.c	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/myMd5Keyed.c	Fri Mar  7 23:08:05 2003
@@ -0,0 +1,47 @@
+#include "stralloc.h"
+#include "myMd5.h"
+
+static char numToChar[17]="0123456789abcdef";
+
+/*
+ * Return values : 0 -> success
+ *                 1 -> stralloc_append failed (no memory)
+ */
+int md5Keyed(digest,text,textLen,key,keyLen)
+stralloc *digest;
+unsigned char *text;
+unsigned int textLen;
+unsigned char *key;
+unsigned int keyLen;
+{
+  int i;
+  md5ctxT ctx;
+  unsigned char ipad[64];
+  unsigned char opad[64];
+  unsigned char tmp[16];
+    
+  for (i=0;i<keyLen;i++) {
+    ipad[i]=key[i]^0x36;
+    opad[i]=key[i]^0x5C;
+  }
+  
+  for (;i<64;i++) {
+    ipad[i]=0x36;
+    opad[i]=0x5C;
+  }
+  
+  md5Init(&ctx);
+  md5Update(&ctx,ipad,64);
+  md5Update(&ctx,text,textLen);
+  md5Final(tmp,&ctx);
+  
+  md5Init(&ctx);
+  md5Update(&ctx,opad,64);
+  md5Update(&ctx,tmp,16);
+  md5Final(tmp,&ctx);
+  for (i=0;i<16;i++) {
+    if (!stralloc_append(digest,&(numToChar[tmp[i]>>4]))) return 1;
+    if (!stralloc_append(digest,&(numToChar[tmp[i]&0xF]))) return 1;
+  }
+  return 0;
+}
diff -uN serialmail-0.75/myMd5Keyed.h serialmail-0.75-new/myMd5Keyed.h
--- serialmail-0.75/myMd5Keyed.h	Thu Jan  1 01:00:00 1970
+++ serialmail-0.75-new/myMd5Keyed.h	Fri Mar  7 23:08:05 2003
@@ -0,0 +1 @@
+int md5Keyed();
diff -uN serialmail-0.75/serialsmtp.c serialmail-0.75-new/serialsmtp.c
--- serialmail-0.75/serialsmtp.c	Sun Nov 15 03:28:23 1998
+++ serialmail-0.75-new/serialsmtp.c	Fri Mar  7 23:23:45 2003
@@ -14,6 +14,8 @@
 #include "quote.h"
 #include "scan.h"
 #include "env.h"
+#include "base64.h"
+#include "myMd5Keyed.h"
 
 #define FATAL "serialsmtp: fatal: "
 
@@ -93,6 +95,58 @@
 stralloc smtpline = {0};
 int flagpipelining = 0;
 
+int flagauthcrammd5 = 0;
+int flagauthplain = 0;
+int flagauthlogin = 0;
+char *stateMatchChar="plain login cram-md5 ";
+void scan_auth_flags()  /* Overkill but hey, I was bored */
+{
+  int state,pos;
+  unsigned char c;
+  pos=8;
+  state=300;
+  while (pos<smtpline.len)
+  {
+    c=smtpline.s[pos];
+    if ( c<32 ) break;
+    if ( c>='A' && c<='Z' ) c+=('a'-'A');
+    if (state<21)
+    {
+      if ( c==stateMatchChar[state] )
+      {
+        if (stateMatchChar[state]==' ')
+        {
+          if (state==5) flagauthplain=1;
+          if (state==11) flagauthlogin=1;
+          if (state==20) flagauthcrammd5=1;
+          state=300;
+        }
+        else
+          state++;
+        pos++;
+      }
+      else
+        state=301;
+    }
+    else if (state==300)
+    {
+      if (c=='p') state=0;
+      if (c=='l') state=6;
+      if (c=='c') state=12;
+      if (state==300 && c!=' ') state=301;
+      if (state==300) pos++;
+    }
+    else if (state==301)
+    {
+      if (c==' ') state=300;
+      if (state==301) pos++;
+    }
+  }
+  if (state==5) flagauthplain=1;
+  if (state==11) flagauthlogin=1;
+  if (state==20) flagauthcrammd5=1;
+}
+
 unsigned long smtpcode(flagehlo)
 int flagehlo;
 {
@@ -114,11 +168,14 @@
     num[3] = 0;
     if (scan_ulong(num,&code) != 3) die_proto();
     if (flagehlo)
-      if (code == 250)
+      if (code == 250) {
 	if (!flagfirst)
 	  if (smtpline.len == 14)
 	    if (!case_diffb("PIPELINING",10,smtpline.s + 4))
 	      flagpipelining = 1;
+	if (!case_diffb("AUTH",4,smtpline.s+4))
+	  scan_auth_flags();
+      }
     if (smtpline.len == 3) return code;
     flagfirst = 0;
   }
@@ -269,6 +326,91 @@
   result(smtpcode(0));
 }
 
+stralloc challenge = {0};
+stralloc response = {0};
+
+int smtp_auth_crammd5(user,secret)
+unsigned char *user;
+unsigned char *secret;
+{
+  unsigned long code;
+  
+  substdio_puts(&ss7,"AUTH CRAM-MD5\r\n");
+  substdio_flush(&ss7);
+  code = smtpcode(0);
+  if (code != 334) return 1;
+  if (smtpline.len<8) return 1;
+  
+  switch (base64Decode(&challenge,smtpline.s+4,smtpline.len-4)) {
+    case 1:
+      die_nomem();
+    case 2:
+      return 2;
+  }
+  if (!stralloc_copys(&response,user)) die_nomem();
+  if (!stralloc_catb(&response," ",1)) die_nomem();
+  if (md5Keyed(&response,challenge.s,challenge.len,
+               secret,str_len(secret))) die_nomem();
+  if (base64Encode(&challenge,response.s,response.len)) die_nomem();
+  if (!stralloc_catb(&challenge,"\r\n",2)) die_nomem();
+  substdio_put(&ss7,challenge.s,challenge.len);
+  substdio_flush(&ss7);
+  code=smtpcode(0);
+  if (code!=235) return 3;
+  return 0;
+}
+
+int smtp_auth_plain(user,secret)
+unsigned char *user;
+unsigned char *secret;
+{
+  unsigned long code;
+  char nullChar;
+
+  nullChar=0;
+  if (!stralloc_copys(&challenge,user)) die_nomem();
+  if (!stralloc_append(&challenge,&nullChar)) die_nomem();
+  if (!stralloc_cats(&challenge,user)) die_nomem();
+  if (!stralloc_append(&challenge,&nullChar)) die_nomem();
+  if (!stralloc_cats(&challenge,secret)) die_nomem();
+  if (base64Encode(&response,challenge.s,challenge.len)) die_nomem();
+  if (!stralloc_copyb(&challenge,"AUTH PLAIN ",11)) die_nomem();
+  if (!stralloc_cat(&challenge,&response)) die_nomem();
+  if (!stralloc_catb(&challenge,"\r\n",2)) die_nomem();
+  substdio_put(&ss7,challenge.s,challenge.len);
+  substdio_flush(&ss7);
+  code=smtpcode(0);
+  if (code!=235) return 3;
+  return 0;
+}
+
+int smtp_auth_login(user,secret)
+unsigned char *user;
+unsigned char *secret;
+{
+  unsigned long code;
+
+  substdio_put(&ss7,"AUTH LOGIN\r\n",12);
+  substdio_flush(&ss7);
+  code=smtpcode(0);
+  if (code!=334) return 1;
+  if (!stralloc_copys(&challenge,user)) die_nomem();
+  if (base64Encode(&response,challenge.s,challenge.len)) die_nomem();
+  if (!stralloc_catb(&response,"\r\n",2)) die_nomem();
+  substdio_put(&ss7,response.s,response.len);
+  substdio_flush(&ss7);
+  code=smtpcode(0);
+  if (code!=334) return 1;
+  if (!stralloc_copys(&challenge,secret)) die_nomem();
+  if (base64Encode(&response,challenge.s,challenge.len)) die_nomem();
+  if (!stralloc_catb(&response,"\r\n",2)) die_nomem();
+  substdio_put(&ss7,response.s,response.len);
+  substdio_flush(&ss7);
+  code=smtpcode(0);
+  if (code!=235) return 3;
+  return 0;
+}
+
 void main(argc,argv)
 int argc;
 char **argv;
@@ -309,6 +451,34 @@
     }
   }
 
+  if (argc==5)
+  {
+    if (flagauthcrammd5)
+    {
+      if (smtp_auth_crammd5(argv[1],argv[2]))
+      {
+        quit();
+        strerr_die2x(111,FATAL,"unable to authenticate to server");
+      }
+    }
+    else if (flagauthplain)
+    {
+      if (smtp_auth_plain(argv[1],argv[2]))
+      {
+        quit();
+        strerr_die2x(111,FATAL,"unable to authenticate to server");
+      }
+    }
+    else if (flagauthlogin)
+    {
+      if (smtp_auth_plain(argv[1],argv[2]))
+      {
+        quit();
+        strerr_die2x(111,FATAL,"unable to authenticate to server");
+      }
+    }
+  }
+          
   for (;;) {
     if (getln(subfdinsmall,&fn,&match,'\0') == -1)
       strerr_die2sys(111,FATAL,"unable to read input: ");
