diff -urN openbox-tree/Makefile.am openbox/Makefile.am
--- openbox-tree/Makefile.am	2006-06-03 19:12:50.576300928 -0500
+++ openbox/Makefile.am	2006-06-03 19:19:36.964520528 -0500
@@ -51,6 +51,7 @@
 	$(X_CFLAGS) \
 	$(XFT_CFLAGS) \
 	$(GLIB_CFLAGS) \
+	$(GTK_CFLAGS) \
 	$(XML_CFLAGS) \
 	$(PANGO_CFLAGS) \
 	-DG_LOG_DOMAIN=\"ObRender\" \
@@ -63,6 +64,7 @@
 	$(XFT_LIBS) \
 	$(PANGO_LIBS) \
 	$(GLIB_LIBS) \
+	$(GTK_LIBS) \
 	$(XML_LIBS) \
 	parser/libobparser.la
 render_libobrender_la_SOURCES = \
@@ -111,6 +113,7 @@
 	$(SM_CFLAGS) \
 	$(XFT_CFLAGS) \
 	$(GLIB_CFLAGS) \
+	$(GTK_CFLAGS) \
 	$(LIBSN_CFLAGS) \
 	$(XML_CFLAGS) \
 	-DLOCALEDIR=\"$(localedir)\" \
@@ -125,6 +128,7 @@
 	$(VIDMODE_LIBS) \
 	$(XSHAPE_LIBS) \
 	$(GLIB_LIBS) \
+	$(GTK_LIBS) \
 	$(X_LIBS) \
 	$(LIBSN_LIBS) \
 	$(XML_LIBS) \
diff -urN openbox-tree/configure.ac openbox/configure.ac
--- openbox-tree/configure.ac	2006-06-03 19:12:50.577300776 -0500
+++ openbox/configure.ac	2006-06-03 19:14:01.146572616 -0500
@@ -74,6 +74,29 @@
 AC_SUBST(GLIB_CFLAGS)
 AC_SUBST(GLIB_LIBS)
 
+AC_ARG_ENABLE(gtk,
+  AC_HELP_STRING(
+    [--disable-gtk],
+    [disable the GTK+ library [[default=no]]]
+  ),
+  [enable_gtk=$enableval],
+  [enable_gtk=yes]
+)
+
+if test "$enable_gtk" = yes; then
+PKG_CHECK_MODULES([GTK], [gtk+-2.0],
+  [
+    AC_DEFINE(USE_GTK, [1], [Use GTK])
+    AC_SUBST(GTK_CFLAGS)
+    AC_SUBST(GTK_LIBS)
+    gtk_found=yes
+  ],
+    gtk_found=no
+)
+else
+  gtk_found=no
+fi
+
 AC_ARG_ENABLE(pango,
   AC_HELP_STRING(
     [--disable-pango],
@@ -157,6 +180,7 @@
 AC_MSG_RESULT
 AC_MSG_RESULT([Compiling with these options:
                Pango... $pango_found
+               GTK+... $gtk_found
                Startup Notification... $sn_found
                Session Management... $SM
                ])
diff -urN openbox-tree/openbox/openbox.c openbox/openbox/openbox.c
--- openbox-tree/openbox/openbox.c	2006-06-03 19:12:50.833261864 -0500
+++ openbox/openbox/openbox.c	2006-06-03 19:14:01.147572464 -0500
@@ -68,6 +68,9 @@
 #  include <unistd.h>
 #endif
 #include <errno.h>
+#ifdef USE_GTK
+#   include <gtk/gtk.h>
+#endif
 
 #include <X11/cursorfont.h>
 
@@ -105,6 +108,10 @@
     bind_textdomain_codeset(PACKAGE_NAME, "UTF-8");
     textdomain(PACKAGE_NAME);
 
+#ifdef USE_GTK
+    gtk_init (&argv, &argv);
+#endif
+
     g_set_prgname(argv[0]);
 
     if (chdir(g_get_home_dir()) == -1)
diff -urN openbox-tree/render/color.c openbox/render/color.c
--- openbox-tree/render/color.c	2006-06-03 19:12:50.940245600 -0500
+++ openbox/render/color.c	2006-06-03 19:14:01.148572312 -0500
@@ -23,8 +23,81 @@
 
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
+#ifdef USE_GTK
+#   include <gtk/gtk.h>
+#   include <gdk/gdk.h>
+#endif
 #include <string.h>
 
+#ifdef USE_GTK
+gchar *GtkConstToColorname (gchar *colorname)
+{
+    GtkWidget *widget;
+    GdkColor *col = NULL;
+    gchar *tmp;
+
+    gtk_rc_reparse_all ();
+    widget = gtk_window_new (GTK_WINDOW_TOPLEVEL);
+    gtk_widget_ensure_style (widget);
+
+    /* FIXME: omg, this is awful */
+    /* fg */
+    if (!g_ascii_strcasecmp (colorname, "GTK_FG_NORMAL"))
+	col = &GTK_WIDGET (widget)->style->fg[GTK_STATE_NORMAL];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_FG_ACTIVE"))
+	col = &GTK_WIDGET (widget)->style->fg[GTK_STATE_ACTIVE];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_FG_PRELIGHT"))
+	col = &GTK_WIDGET (widget)->style->fg[GTK_STATE_PRELIGHT];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_FG_SELECTED"))
+	col = &GTK_WIDGET (widget)->style->fg[GTK_STATE_SELECTED];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_FG_INSENSITIVE"))
+	col = &GTK_WIDGET (widget)->style->fg[GTK_STATE_INSENSITIVE];
+    /* bg */
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BG_NORMAL"))
+	col = &GTK_WIDGET (widget)->style->bg[GTK_STATE_NORMAL];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BG_ACTIVE"))
+	col = &GTK_WIDGET (widget)->style->bg[GTK_STATE_ACTIVE];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BG_PRELIGHT"))
+	col = &GTK_WIDGET (widget)->style->bg[GTK_STATE_PRELIGHT];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BG_SELECTED"))
+	col = &GTK_WIDGET (widget)->style->bg[GTK_STATE_SELECTED];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BG_INSENSITIVE"))
+	col = &GTK_WIDGET (widget)->style->bg[GTK_STATE_INSENSITIVE];
+    /* base */
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BASE_NORMAL"))
+	col = &GTK_WIDGET (widget)->style->base[GTK_STATE_NORMAL];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BASE_ACTIVE"))
+	col = &GTK_WIDGET (widget)->style->base[GTK_STATE_ACTIVE];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BASE_PRELIGHT"))
+	col = &GTK_WIDGET (widget)->style->base[GTK_STATE_PRELIGHT];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BASE_SELECTED"))
+	col = &GTK_WIDGET (widget)->style->base[GTK_STATE_SELECTED];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_BASE_INSENSITIVE"))
+	col = &GTK_WIDGET (widget)->style->base[GTK_STATE_INSENSITIVE];
+    /* text */
+    else if (!g_ascii_strcasecmp (colorname, "GTK_TEXT_NORMAL"))
+	col = &GTK_WIDGET (widget)->style->text[GTK_STATE_NORMAL];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_TEXT_ACTIVE"))
+	col = &GTK_WIDGET (widget)->style->text[GTK_STATE_ACTIVE];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_TEXT_PRELIGHT"))
+	col = &GTK_WIDGET (widget)->style->text[GTK_STATE_PRELIGHT];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_TEXT_SELECTED"))
+	col = &GTK_WIDGET (widget)->style->text[GTK_STATE_SELECTED];
+    else if (!g_ascii_strcasecmp (colorname, "GTK_TEXT_INSENSITIVE"))
+	col = &GTK_WIDGET (widget)->style->text[GTK_STATE_INSENSITIVE];
+
+    gtk_widget_destroy (widget);
+
+    if (col)
+	tmp = g_strdup_printf ("#%02x%02x%02x",
+		col->red >> 8, col->green >> 8, col->blue >> 8);
+    else
+	tmp = g_strdup ("#ffffff");
+
+    return (tmp);
+}
+#endif /* USE_GTK */
+
 void RrColorAllocateGC(RrColor *in)
 {
     XGCValues gcv;
@@ -39,19 +112,32 @@
 RrColor *RrColorParse(const RrInstance *inst, gchar *colorname)
 {
     XColor xcol;
+    RrColor *ret;
 
     g_assert(colorname != NULL);
     /* get rgb values from colorname */
 
+    /* beware! voodoo following */
+#ifdef USE_GTK
+    if (!g_ascii_strncasecmp (colorname, "GTK", 3))
+	colorname = GtkConstToColorname (colorname);
+    else
+	colorname = g_strdup (colorname);
+#endif
+
     xcol.red = 0;
     xcol.green = 0;
     xcol.blue = 0;
     xcol.pixel = 0;
-    if (!XParseColor(RrDisplay(inst), RrColormap(inst), colorname, &xcol)) {
+    if (!XParseColor(RrDisplay(inst), RrColormap(inst), colorname, &xcol))
         g_warning("unable to parse color '%s'", colorname);
-        return NULL;
-    }
-    return RrColorNew(inst, xcol.red >> 8, xcol.green >> 8, xcol.blue >> 8);
+    else
+	ret= RrColorNew(inst, xcol.red >> 8, xcol.green >> 8, xcol.blue >> 8);
+
+#ifdef USE_GTK
+    g_free (colorname);
+#endif
+    return ret;
 }
 
 /*#define NO_COLOR_CACHE*/
