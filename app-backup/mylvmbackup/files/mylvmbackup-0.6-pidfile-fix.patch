diff -Nuar --exclude .svn tags/mylvmbackup-0.6/ChangeLog trunk/ChangeLog
--- tags/mylvmbackup-0.6/ChangeLog	2008-03-14 17:28:39.000000000 -0700
+++ trunk/ChangeLog	2008-03-14 17:28:37.000000000 -0700
@@ -1,3 +1,16 @@
+2008-03-03  Lenz Grimmer <lenz@grimmer.com>
+
+ - Bug fix: use the correct mysqld parameter to provide an alternative PID
+   file (--pid-file instead of --pidfile) - thanks to Guillaume Boddaert for
+   reporting this!
+ - Added option "--skip_mycnf" to skip including a copy of the MySQL
+   configuration file in the backup, added a safety check that the file
+   actually exists prior to backing it up.
+
+2007-10-27  Lenz Grimmer <lenz@grimmer.com>
+
+ - Bumped up version number to 0.7
+
 2007-10-27  Lenz Grimmer <lenz@grimmer.com>
 
  - Use mktemp/mkdtemp to generate the random temporary file/directory names
diff -Nuar --exclude .svn tags/mylvmbackup-0.6/man/mylvmbackup.1.txt trunk/man/mylvmbackup.1.txt
--- tags/mylvmbackup-0.6/man/mylvmbackup.1.txt	2008-03-14 17:28:39.000000000 -0700
+++ trunk/man/mylvmbackup.1.txt	2008-03-14 17:28:37.000000000 -0700
@@ -137,9 +137,13 @@
   Only used to perform InnoDB recovery.
 
 --mycnf=string::
-  Specifies the pathname for the MySQL config file to include in the backup.
+  Specifies the name of the MySQL config file to include in the backup.
   The default is '/etc/my.cnf'.
 
+--skip_mycnf::
+  Skip backing up the MySQL configuration file.
+  The default is to include a copy of the configuration file in the backup.
+
 --vgname=string::
   Specifies the volume group of the logical volume where the MySQL
   data directory is located.
diff -Nuar --exclude .svn tags/mylvmbackup-0.6/mylvmbackup.conf trunk/mylvmbackup.conf
--- tags/mylvmbackup-0.6/mylvmbackup.conf	2008-03-14 17:28:39.000000000 -0700
+++ trunk/mylvmbackup.conf	2008-03-14 17:28:37.000000000 -0700
@@ -59,6 +59,7 @@
 pidfile=/var/tmp/mylvmbackup_recoverserver.pid
 skip_flush_tables=0
 extra_flush_tables=0
+skip_mycnf=0
 
 #
 # Logging options. The Sys::Syslog module is required for syslog option
diff -Nuar --exclude .svn tags/mylvmbackup-0.6/mylvmbackup.pl.in trunk/mylvmbackup.pl.in
--- tags/mylvmbackup-0.6/mylvmbackup.pl.in	2008-03-14 17:28:39.000000000 -0700
+++ trunk/mylvmbackup.pl.in	2008-03-14 17:28:37.000000000 -0700
@@ -42,6 +42,7 @@
 my $host;
 my $innodb_recover;
 my $skip_flush_tables;
+my $skip_mycnf;
 my $extra_flush_tables;
 my $lvcreate;
 my $lvname;
@@ -223,8 +224,11 @@
       log_msg ("Recovering innodb...", LOG_INFO);
       do_innodb_recover();
     }
-    log_msg ("Copying $mycnf_basename...", LOG_INFO);
-    create_mycnf_file();
+    if (-f $mycnf && $skip_mycnf == 0)
+    {
+      log_msg ("Copying $mycnf_basename...", LOG_INFO);
+      create_mycnf_file();
+    }
 
     log_msg ("Taking actual backup...", LOG_INFO);
     do_backup_tar() if ($backuptype eq 'tar');
@@ -263,6 +267,7 @@
   $pidfile=$cfg->val ('misc', 'pidfile', $pidfile);
   $skip_flush_tables=$cfg->val ('misc', 'skip_flush_tables', $skip_flush_tables);
   $extra_flush_tables=$cfg->val ('misc', 'extra_flush_tables', $extra_flush_tables);
+  $skip_mycnf=$cfg->val ('misc', 'skip_mycnf', $skip_mycnf);
   $rsyncarg=$cfg->val ('misc', 'rsyncarg', $rsyncarg);
   $tararg=$cfg->val ('misc', 'tararg', $tararg);
   $tarsuffixarg=$cfg->val ('misc', 'tarsuffixarg', $tarsuffixarg);
@@ -318,6 +323,7 @@
     "pidfile=s" => \$pidfile,
     "skip_flush_tables" => \&skip_flush_tables,
     "extra_flush_tables" => \&extra_flush_tables,
+    "skip_mycnf" => \&skip_mycnf,
     "tararg=s" => \$tararg,
     "tarsuffixarg=s" => \$tarsuffixarg,
     "tarfilesuffix=s" => \$tarfilesuffix,
@@ -372,6 +378,7 @@
   $pidfile = '/var/tmp/mylvmbackup_recoverserver.pid';
   $skip_flush_tables=0;
   $extra_flush_tables=0;
+  $skip_mycnf=0;
   $tararg='cvzf';
   $tarsuffixarg='';
   $tarfilesuffix='.tar.gz';
@@ -403,7 +410,7 @@
 {
  my $dbh = shift;
  my $pos_file;
- open $pos_file, ">$pos_filename" or log_msg ("Cannot open $pos_filename for write", LOG_ERR) && die ("Cannot open $pos_filename for write");
+ open $pos_file, ">$pos_filename" or log_msg ("Cannot open $pos_filename for writing: $!", LOG_ERR) && die ("Cannot open $pos_filename for writing: $!");
  &_create_pos_file_single($dbh,'SHOW MASTER STATUS',$pos_file,'Master');
  &_create_pos_file_single($dbh,'SHOW SLAVE STATUS',$pos_file,'Slave');
  close $pos_file;
@@ -412,7 +419,7 @@
 sub create_mycnf_file
 {
   use File::Copy;
-  copy($mycnf, $mycnf_filename);
+  copy($mycnf, $mycnf_filename) or log_msg ("Could not copy $mycnf to $mycnf_filename: $!") && die ("Could not copy $mycnf to $mycnf_filename: $!\n");
 }
 
 sub _create_pos_file_single
@@ -494,7 +501,7 @@
 
 sub do_innodb_recover
 {
-  if ( system("echo 'select 1;' | $mysqld_safe --pidfile=$pidfile --datadir=$mountdir --skip-networking --skip-grant --bootstrap --skip-ndbcluster --skip-slave-start") != 0 )
+  if ( system("echo 'select 1;' | $mysqld_safe --pid-file=$pidfile --datadir=$mountdir --skip-networking --skip-grant --bootstrap --skip-ndbcluster --skip-slave-start") != 0 )
   {
     log_msg ("Failed to perform InnoDB recovery on the snapshot!", LOG_ERR);
   }
@@ -590,10 +597,15 @@
 sub skip_flush_tables {
   $skip_flush_tables = 1;
 }
+
 sub extra_flush_tables {
   $extra_flush_tables = 1;
 }
 
+sub skip_mycnf {
+  $skip_mycnf = 1;
+}
+
 sub need_xfsworkaround {
 	$need_xfsworkaround = 1;
 }
diff -Nuar --exclude .svn tags/mylvmbackup-0.6/TODO trunk/TODO
--- tags/mylvmbackup-0.6/TODO	2008-03-14 17:28:39.000000000 -0700
+++ trunk/TODO	2008-03-14 17:28:37.000000000 -0700
@@ -1,16 +1,32 @@
 mylvmbackup TODO list:
 
- - Document the new logging options in the man page and help output
- - Make backing up of my.cnf optional, verify that the file actually exists
-   before copying it
+ - Improve the InnoDB recovery function: create a separate my.cnf for the
+   server instance that performs the recovery on the snapshot, including the
+   InnoDB-related parameters from the main my.cnf file (particularly table spaces,
+   log files) as well as other options (e.g. sane buffer sizes)
+ - Investigate further about the need of calling xfs_freeze prior to taking
+   the snapshot when using XFS file systems. According to the docs, this is
+   not needed when using LVM2 (and may even lead to deadlocks), but may be
+   needed for LVM1 (without the VFS-lock patch). How could this be detected
+   automatically? How to snapshot file systems that support storing log files
+   on separate block devices?
  - Modularize the backup portion
  - Support other backup methods than tar after modularizing
-     * rsync - http://rsync.samba.org/ (already available as a hack, add
-       support for remote backups)
+     * rsync - http://rsync.samba.org/ (already available as a hack, needs
+       some cleanups/improvements)
      * rsnapshot - http://www.rsnapshot.org/
      * duplicity - http://duplicity.nongnu.org/
      * unison - http://www.cis.upenn.edu/~bcpierce/unison/
      * zip - http://www.info-zip.org/Zip.html
+ - rsync backup: add support for remote backups
+ - rsync backup: allow backing up into the same directory (no time stamps),
+   to increase backup speed (using the differential capabilities of rsync)
+ - rsync backup: support the --link-dest option, to preserve disk space on
+   the backup drive
+ - tar backup: check if the "z" option is used for tar, change the archive
+   name suffix accordingly (.tar.gz vs. .tar)
+ - Support other snapshot options in addition to LVM snapshots (e.g. Sun's ZFS
+   snapshots/clones)
  - Allow splitting of archives. Could this be done by being able to modularize
    the backup part and allowing multiple plugins in a pipe? E.g. a generic
    splitting plugin that can split any archives.
