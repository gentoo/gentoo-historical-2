#!/sbin/runscript
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License, v2
# $Header: /var/cvsroot/gentoo-x86/x11-apps/xinit/files/xdm.initd,v 1.1 2007/01/17 14:56:29 uberlord Exp $

# This is here to serve as a note to myself, and future developers.
#
# Any Display manager (gdm,kdm,xdm) has the following problem:  if
# it is started before any getty, and no vt is specified, it will
# usually run on vt2.  When the getty on vt2 then starts, and the
# DM is already started, the getty will take control of the keyboard,
# leaving us with a "dead" keyboard.
#
# Resolution: add the following line to /etc/inittab
#
#  x:a:once:/etc/X11/startDM.sh
#
# and have /etc/X11/startDM.sh start the DM in daemon mode if
# a lock is present (with the info of what DM should be started),
# else just fall through.
#
# How this basically works, is the "a" runlevel is a additional
# runlevel that you can use to fork processes with init, but the
# runlevel never gets changed to this runlevel.  Along with the "a"
# runlevel, the "once" key word means that startDM.sh will only be
# run when we specify it to run, thus eliminating respawning
# startDM.sh when "xdm" is not added to the default runlevel, as was
# done previously.
#
# This script then just calls "telinit a", and init will run
# /etc/X11/startDM.sh after the current runlevel completes (this
# script should only be added to the actual runlevel the user is
# using).
#
# Martin Schlemmer
# aka Azarah
# 04 March 2002


# Start X Font Server before X
depend() {
	need localmount

	# this should start as early as possible
	# we can't do 'before *' as that breaks it
	# (#139824) Start after ypbind and autofs for network authentication
	# (#145219) Could use lirc mouse as input device
	# (#70689 comment #92) Start after consolefont to avoid display corruption
	after bootmisc readahead-list ypbind autofs openvpn gpm netmount lircd consolefont
	before alsasound

	# Start before X
	use acpid hald xfs
}

setup_dm() {
	source /etc/profile.env
	export PATH="/bin:/sbin:/usr/bin:/usr/sbin:${ROOTPATH}"

	local MY_XDM="$(echo ${DISPLAYMANAGER} | tr '[:upper:]' '[:lower:]')"
	case "${MY_XDM}" in
		kdm|kde|kde2|kde3)
			EXE="$(which kdm)"
			;;
		entrance*)
			EXE="$(which entranced)"
			;;
		gdm|gnome)
			EXE=/usr/bin/gdm
			;;
		wdm)
			EXE=/usr/bin/wdm
			;;
		*)
			EXE=
			# Fix #65586, where MY_XDM is empty so EXE=somedir
			[ -x "/usr/bin/${MY_XDM}" -a -f "/usr/bin/${MY_XDM}" ] \
				&& EXE="/usr/bin/${MY_XDM}"
			[ -z "${EXE}" ] && EXE="/usr/bin/xdm"
			;;
	esac

	test ! -x "${EXE}" && EXE=/usr/bin/xdm
}

cmdline_opt() {
	if [[ "$#" -ne 1 || ! -e /proc/cmdline ]]; then
		return 1
	fi

	for opt in $(</proc/cmdline); do
		case ${opt} in
			${1}) eval ${1}="true" ;;
		esac
	done
}

nox() {
	# Don't start X if we were passed 'nox' at boot (#83680)
	cmdline_opt nox

	if [[ "$?" -ne 0 ]]; then
		return 1
	fi

	if [[ -n "${nox}" ]]; then
		return 0
	else
		return 1
	fi
}

start() {
	setup_dm
	
	if nox; then
		einfo "Skipping ${EXE}, received 'nox'"
	else
		ebegin "Setting up ${EXE##*/}"
		#save the prefered DM
		save_options "service" "${EXE}"

		# Start as soon as possible if XSTATICVT is set
		# or if we don't have telinit (as on BSD)
		if [ "${XSTATICVT}" = "yes" ] || [ ! -x /sbin/telinit ] ; then
			/etc/X11/startDM.sh
		else
			#tell init to run /etc/X11/startDM.sh after current
			#runlevel is finished (should *not* be in the "boot"
			#                      runlevel).
			/sbin/telinit a &>/dev/null
		fi
		eend 0
	fi

}

stop() {
	local retval=0
	local curvt=
	if [ -t 0 ]
	then
		if [ -n $(type -p fgconsole) ]
		then
			curvt="$(fgconsole 2>/dev/null)"
		else
			curvt="$(tty)"
			if [ "${curvt}" == /dev/ttyv[0-9]* ]
			then
				curvt="${curvt#/dev/ttyv*}"
			else
				curvt=
			fi
		fi
	fi
	local myexe="$(get_options "service")"
	local myservice="${myexe##*/}"
	
	ebegin "Stopping ${myservice}"

	if start-stop-daemon --quiet --test --stop --exec "${myexe}" >/dev/null
	then
		start-stop-daemon --quiet --stop --exec "${myexe}" --retry TERM/5/TERM/5
		retval=$?
	fi

	#switch back to original vt
	if [ -n "${curvt}" ]
	then
		if [ -n $(type -p chvt) ]
		then
			chvt "${curvt}" &>/dev/null
		else
			vidcontrol -s "${curvt}"	
		fi
	fi
	eend ${retval} "Error stopping ${myservice}"
	
	return ${retval}
}


# vim:ts=4
