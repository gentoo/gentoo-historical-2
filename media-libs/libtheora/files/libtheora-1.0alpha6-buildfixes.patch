Complete build fixes so that 1.0_alpha6 of libtheora actually _builds_.

Thanks to Ian Leonard for some of the patches here merged.
Index: libtheora-1.0alpha6/configure.ac
===================================================================
--- libtheora-1.0alpha6.orig/configure.ac
+++ libtheora-1.0alpha6/configure.ac
@@ -115,12 +115,14 @@ if test "x${ac_enable_asm}" = xyes; then
 		if test ! "x$target_vendor" = "xapple"; then
 		  cpu_x86_32=yes 
 		  cpu_optimization="32 bit x86"
+  		AC_DEFINE([USE_ASM], [],  [make use of asm optimization])
 		fi
     	;;
 	x86_64)
 		cpu_x86_64=yes
 		cpu_optimization="64 bit x86"
-	;;
+  	AC_DEFINE([USE_ASM], [],  [make use of asm optimization])	
+    ;;
   esac
 else
   cpu_optimization="disabled"
Index: libtheora-1.0alpha6/lib/encoder_disabled.c
===================================================================
--- /dev/null
+++ libtheora-1.0alpha6/lib/encoder_disabled.c
@@ -0,0 +1,51 @@
+/********************************************************************
+ *                                                                  *
+ * THIS FILE IS PART OF THE OggTheora SOFTWARE CODEC SOURCE CODE.   *
+ * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
+ * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
+ * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
+ *                                                                  *
+ * THE Theora SOURCE CODE IS COPYRIGHT (C) 2002-2003                *
+ * by the Xiph.Org Foundation http://www.xiph.org/                  *
+ *                                                                  *
+ ********************************************************************
+
+  function:
+  last mod: $Id: libtheora-1.0alpha6-buildfixes.patch,v 1.1 2006/06/07 12:01:51 flameeyes Exp $
+
+ ********************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "toplevel_lookup.h"
+#include "toplevel.h"
+
+int theora_encode_init(theora_state *th, theora_info *c){
+  return OC_DISABLED;
+}
+
+int theora_encode_YUVin(theora_state *t, yuv_buffer *yuv){
+  return OC_DISABLED;
+}
+
+int theora_encode_packetout( theora_state *t, int last_p, ogg_packet *op){
+  return OC_DISABLED;
+}
+
+int theora_encode_header(theora_state *t, ogg_packet *op){
+  return OC_DISABLED;
+}
+
+int theora_encode_comment(theora_comment *tc, ogg_packet *op){
+  return OC_DISABLED;
+}
+
+int theora_encode_tables(theora_state *t, ogg_packet *op){
+  return OC_DISABLED;
+}
+
+void theora_encoder_clear (CP_INSTANCE * cpi)
+{
+}
Index: libtheora-1.0alpha6/lib/cpu.c
===================================================================
--- libtheora-1.0alpha6.orig/lib/cpu.c
+++ libtheora-1.0alpha6/lib/cpu.c
@@ -26,10 +26,10 @@ cpuid(ogg_int32_t op, ogg_uint32_t *out_
                 "cpuid         \n\t"
                 "movl %%ebx,%1 \n\t"
                 "popq %%rbx"        
-              : "=a" (*eax),         
-                "=r" (*ebx),         
-                "=c" (*ecx),         
-                "=d" (*edx)          
+              : "=a" (*out_eax),         
+                "=r" (*out_ebx),         
+                "=c" (*out_ecx),         
+                "=d" (*out_edx)          
               : "a" (op)            
               : "cc");
 # elif defined(__i386__)
@@ -37,10 +37,10 @@ cpuid(ogg_int32_t op, ogg_uint32_t *out_
                 "cpuid         \n\t"
                 "movl %%ebx,%1 \n\t"
                 "popl %%ebx"        
-              : "=a" (*eax),         
-                "=r" (*ebx),         
-                "=c" (*ecx),         
-                "=d" (*edx)          
+              : "=a" (*out_eax),         
+                "=r" (*out_ebx),         
+                "=c" (*out_ecx),         
+                "=d" (*out_edx)          
               : "a" (op)            
               : "cc");
 # elif defined(WIN32)
