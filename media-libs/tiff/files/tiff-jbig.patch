--- configure.orig	2005-09-12 06:52:41.000000000 -0700
+++ configure	2006-06-06 19:41:22.000000000 -0700
@@ -23648,6 +23648,25 @@
 fi
 
 
+HAVE_JBIG=no
+# Check whether --enable-jbig or --disable-jbig was given.
+if test "${enable_jbig+set}" = set; then
+  enableval="$enable_jbig"
+  HAVE_JBIG=$enableval
+else
+  HAVE_JBIG=no
+fi;
+
+if test "$HAVE_JBIG" = "yes" ; then
+
+cat >>confdefs.h <<\_ACEOF
+#define JBIG_SUPPORT 1
+_ACEOF
+
+  LIBS="-ljbig $LIBS"
+fi
+
+
 # Check whether --enable-cxx or --disable-cxx was given.
 if test "${enable_cxx+set}" = set; then
   enableval="$enable_cxx"
@@ -27680,6 +27699,7 @@
 echo "  Pixar log-format algorithm:         ${HAVE_PIXARLOG}"
 echo "  JPEG support:                       ${HAVE_JPEG}"
 echo "  Old JPEG support:                   ${HAVE_OJPEG}"
+echo "  JBIG support:                       ${HAVE_JBIG}"
 echo ""
 echo "  C++ support:                        ${HAVE_CXX}"
 echo ""
--- configure.ac.orig	2005-09-12 06:52:41.000000000 -0700
+++ configure.ac	2006-06-06 19:35:23.000000000 -0700
@@ -387,6 +387,22 @@
 fi
 
 dnl ---------------------------------------------------------------------------
+dnl Check for JBIG.
+dnl ---------------------------------------------------------------------------
+
+HAVE_JBIG=no
+AC_ARG_ENABLE(jbig,
+	      AS_HELP_STRING([--disable-jbig],
+			     [disable support for JBIG]),
+	      [HAVE_JBIG=$enableval], [HAVE_JBIG=no])
+
+if test "$HAVE_JBIG" = "yes" ; then
+  AC_DEFINE(JBIG_SUPPORT, 1,
+	    [Support JBIG])
+  LIBS="-ljbig $LIBS"
+fi
+
+dnl ---------------------------------------------------------------------------
 dnl Check for C++.
 dnl ---------------------------------------------------------------------------
 
--- libtiff/Makefile.in.orig	2005-09-12 09:33:05.000000000 -0700
+++ libtiff/Makefile.in	2006-06-06 19:35:23.000000000 -0700
@@ -97,7 +97,7 @@
 	tif_compress.lo tif_dir.lo tif_dirinfo.lo tif_dirread.lo \
 	tif_dirwrite.lo tif_dumpmode.lo tif_error.lo tif_extension.lo \
 	tif_fax3.lo tif_fax3sm.lo tif_flush.lo tif_getimage.lo \
-	tif_jpeg.lo tif_luv.lo tif_lzw.lo tif_next.lo tif_ojpeg.lo \
+	tif_jpeg.lo tif_jbig.lo tif_luv.lo tif_lzw.lo tif_next.lo tif_ojpeg.lo \
 	tif_open.lo tif_packbits.lo tif_pixarlog.lo tif_predict.lo \
 	tif_print.lo tif_read.lo tif_strip.lo tif_swab.lo \
 	tif_thunder.lo tif_tile.lo tif_unix.lo tif_version.lo \
@@ -306,6 +306,7 @@
 	tif_flush.c \
 	tif_getimage.c \
 	tif_jpeg.c \
+	tif_jbig.c \
 	tif_luv.c \
 	tif_lzw.c \
 	tif_next.c \
@@ -480,6 +481,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_flush.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_getimage.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_jpeg.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_jbig.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_luv.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_lzw.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tif_next.Plo@am__quote@
--- libtiff/tif_config.h.in.orig	2005-07-12 09:02:04.000000000 -0700
+++ libtiff/tif_config.h.in	2006-06-06 19:35:23.000000000 -0700
@@ -146,6 +146,9 @@
 /* Support JPEG compression (requires IJG JPEG library) */
 #undef JPEG_SUPPORT
 
+/* Support JBIG compression (requires JBIG-KIT library) */
+#undef JBIG_SUPPORT
+
 /* Support LogLuv high dynamic range encoding */
 #undef LOGLUV_SUPPORT
 
--- libtiff/tif_jbig.c.orig	2006-06-06 19:32:40.000000000 -0700
+++ libtiff/tif_jbig.c	2006-06-06 19:35:23.000000000 -0700
@@ -0,0 +1,340 @@
+/*
+ * Copyright (c) 1988-1997 Sam Leffler
+ * Copyright (c) 1991-1997 Silicon Graphics, Inc.
+ *
+ * Permission to use, copy, modify, distribute, and sell this software and 
+ * its documentation for any purpose is hereby granted without fee, provided
+ * that (i) the above copyright notices and this permission notice appear in
+ * all copies of the software and related documentation, and (ii) the names of
+ * Sam Leffler and Silicon Graphics may not be used in any advertising or
+ * publicity relating to the software without the specific, prior written
+ * permission of Sam Leffler and Silicon Graphics.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
+ * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
+ * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
+ * 
+ * IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
+ * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
+ * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
+ * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
+ * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
+ * OF THIS SOFTWARE.
+ */
+
+/*
+ * TIFF Library.
+ *
+ * JBIG Compression Algorithm Support.
+ */
+
+#include "tiffio.h"
+#include "tiffiop.h"
+
+#ifdef JBIG_SUPPORT
+#include "jbig.h"
+
+struct JBIGState
+{
+	uint32	recvparams; 	/* encoded Class 2 session params             */
+	char*	subaddress; 	/* subaddress string                          */
+	uint32	recvtime; 	/* time spend receiving in seconds            */
+	char*	faxdcs;		/* encoded fax parameters (DCS, Table 2/T.30) */
+
+	TIFFVGetMethod vgetparent;
+	TIFFVSetMethod vsetparent;
+};
+
+#define GetJBIGState(tif) ((struct JBIGState*)(tif)->tif_data)
+#define N(a) (sizeof (a) / sizeof (a[0]))
+
+#define FIELD_RECVPARAMS	(FIELD_CODEC+0)
+#define FIELD_SUBADDRESS	(FIELD_CODEC+1)
+#define FIELD_RECVTIME		(FIELD_CODEC+2)
+#define FIELD_FAXDCS		(FIELD_CODEC+3)
+
+static const TIFFFieldInfo jbigFieldInfo[] = 
+{
+	{TIFFTAG_FAXRECVPARAMS,  1,  1, TIFF_LONG,  FIELD_RECVPARAMS, TRUE, FALSE, "FaxRecvParams"},
+	{TIFFTAG_FAXSUBADDRESS, -1, -1, TIFF_ASCII, FIELD_SUBADDRESS, TRUE, FALSE, "FaxSubAddress"},
+	{TIFFTAG_FAXRECVTIME,    1,  1, TIFF_LONG,  FIELD_RECVTIME,   TRUE, FALSE, "FaxRecvTime"},
+	{TIFFTAG_FAXDCS,        -1, -1, TIFF_ASCII, FIELD_FAXDCS,     TRUE, FALSE, "FaxDcs"},
+};
+
+static int JBIGSetupDecode(TIFF* tif)
+{
+	if (TIFFNumberOfStrips(tif) != 1)
+	{
+		TIFFError("JBIG", "Multistrip images not supported in decoder");
+		return 0;
+	}
+
+	return 1;
+}
+
+static int JBIGDecode(TIFF* tif, tidata_t buffer, tsize_t size, tsample_t s)
+{
+	struct jbg_dec_state decoder;
+	int decodeStatus = 0;
+	unsigned char* pImage = NULL;
+
+	if (isFillOrder(tif, tif->tif_dir.td_fillorder))
+	{
+		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);
+	}
+
+	jbg_dec_init(&decoder);
+	jbg_newlen(tif->tif_rawdata, tif->tif_rawdatasize);
+	/*
+	 * I do not check the return status of jbg_newlen because even if this function
+	 * fails it does not necessarily mean that decoding the image will fail.  It is
+	 * generally only needed for received fax images that do not contain the actual
+	 * length of the image in the BIE header.  I do not log when an error occurs 
+	 * because that will cause problems when converting JBIG encoded TIFF's to 
+	 * PostScript.  As long as the actual image length is contained in the BIE header
+	 * jbg_dec_in should succeed.
+	 */
+
+	decodeStatus = jbg_dec_in(&decoder, tif->tif_rawdata, tif->tif_rawdatasize, NULL);
+	if (JBG_EOK != decodeStatus)
+	{
+		TIFFError("JBIG", "Error (%d) decoding: %s", decodeStatus, jbg_strerror(decodeStatus, JBG_EN));
+		return 0;
+	}
+	
+	pImage = jbg_dec_getimage(&decoder, 0);
+	_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));
+	jbg_dec_free(&decoder);
+	return 1;
+}
+
+static int JBIGSetupEncode(TIFF* tif)
+{
+	TIFFDirectory* dir = &tif->tif_dir;
+
+	if (TIFFNumberOfStrips(tif) != 1)
+	{
+		TIFFError("JBIG", "Multistrip images not supported in encoder");
+		return 0;
+	}
+
+	return 1;
+}
+
+static int JBIGCopyEncodedData(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)
+{
+	(void) s;
+	while (cc > 0) 
+	{
+		tsize_t n = cc;
+
+		if (tif->tif_rawcc + n > tif->tif_rawdatasize)
+		{
+			n = tif->tif_rawdatasize - tif->tif_rawcc;
+		}
+
+                assert(n > 0);
+		_TIFFmemcpy(tif->tif_rawcp, pp, n);
+		tif->tif_rawcp += n;
+		tif->tif_rawcc += n;
+		pp += n;
+		cc -= n;
+		if (tif->tif_rawcc >= tif->tif_rawdatasize &&
+		    !TIFFFlushData1(tif))
+		{
+			return (-1);
+		}
+	}
+
+	return (1);
+}
+
+static void JBIGOutputBie(unsigned char* buffer, size_t len, void *userData)
+{
+	TIFF* tif = (TIFF*)userData;
+
+	if (isFillOrder(tif, tif->tif_dir.td_fillorder))
+	{
+		TIFFReverseBits(buffer, len);
+	}
+
+	JBIGCopyEncodedData(tif, buffer, len, 0);
+}
+
+static int JBIGEncode(TIFF* tif, tidata_t buffer, tsize_t size, tsample_t s)
+{
+	TIFFDirectory* dir = &tif->tif_dir;
+	struct jbg_enc_state encoder;
+
+	jbg_enc_init(&encoder, 
+		     dir->td_imagewidth, 
+		     dir->td_imagelength, 
+		     1, 
+		     &buffer,
+		     JBIGOutputBie,
+		     tif);
+	/* 
+	 * jbg_enc_out does the "real" encoding.  As data is encoded, JBIGOutputBie
+	 * is called, which writes the data to the directory.
+	 */
+	jbg_enc_out(&encoder);
+	jbg_enc_free(&encoder);
+
+	return 1;
+}
+
+static void JBIGCleanup(TIFF* tif)
+{
+	if (NULL != tif->tif_data)
+	{
+		_TIFFfree(tif->tif_data);
+		tif->tif_data = NULL;
+	}
+}
+
+static void JBIGPrintDir(TIFF* tif, FILE* fd, long flags)
+{
+	struct JBIGState* codec = GetJBIGState(tif);
+	(void)flags;
+
+	if (TIFFFieldSet(tif, FIELD_RECVPARAMS))
+	{
+		fprintf(fd, 
+			"  Fax Receive Parameters: %08lx\n",
+			(unsigned long)codec->recvparams);
+	}
+
+	if (TIFFFieldSet(tif, FIELD_SUBADDRESS))
+	{
+		fprintf(fd, 
+			"  Fax SubAddress: %s\n", 
+			codec->subaddress);
+	}
+
+	if (TIFFFieldSet(tif, FIELD_RECVTIME))
+	{
+		fprintf(fd, 
+			"  Fax Receive Time: %lu secs\n",
+			(unsigned long)codec->recvtime);
+	}
+
+	if (TIFFFieldSet(tif, FIELD_FAXDCS))
+	{
+		fprintf(fd, 
+			"  Fax DCS: %s\n", 
+			codec->faxdcs);
+	}
+}
+
+static int JBIGVGetField(TIFF* tif, ttag_t tag, va_list ap)
+{
+	struct JBIGState* codec = GetJBIGState(tif);
+
+	switch (tag)
+	{
+		case TIFFTAG_FAXRECVPARAMS:
+			*va_arg(ap, uint32*) = codec->recvparams;
+			break;
+		
+		case TIFFTAG_FAXSUBADDRESS:
+			*va_arg(ap, char**) = codec->subaddress;
+			break;
+
+		case TIFFTAG_FAXRECVTIME:
+			*va_arg(ap, uint32*) = codec->recvtime;
+			break;
+
+		case TIFFTAG_FAXDCS:
+			*va_arg(ap, char**) = codec->faxdcs;
+			break;
+
+		default:
+			return (*codec->vgetparent)(tif, tag, ap);
+	}
+
+	return 1;
+}
+
+static int JBIGVSetField(TIFF* tif, ttag_t tag, va_list ap)
+{
+	struct JBIGState* codec = GetJBIGState(tif);
+
+	switch (tag)
+	{
+		case TIFFTAG_FAXRECVPARAMS:
+			codec->recvparams = va_arg(ap, uint32);
+			break;
+
+		case TIFFTAG_FAXSUBADDRESS:
+			_TIFFsetString(&codec->subaddress, va_arg(ap, char*));
+			break;
+
+		case TIFFTAG_FAXRECVTIME:
+			codec->recvtime = va_arg(ap, uint32);
+			break;
+
+		case TIFFTAG_FAXDCS:
+			_TIFFsetString(&codec->faxdcs, va_arg(ap, char*));
+			break;
+
+		default:
+			return (*codec->vsetparent)(tif, tag, ap);
+	}
+
+	TIFFSetFieldBit(tif, _TIFFFieldWithTag(tif, tag)->field_bit);
+	tif->tif_flags |= TIFF_DIRTYDIRECT;
+	return 1;
+}
+
+int TIFFInitJBIG(TIFF* tif, int scheme)
+{
+	struct JBIGState* codec = NULL;
+
+	/* Allocate memory for the JBIGState structure.*/
+	tif->tif_data = (tdata_t)_TIFFmalloc(sizeof(struct JBIGState));
+	if (tif->tif_data == NULL)
+	{
+		TIFFError("TIFFInitJBIG", "Not enough memory for JBIGState");
+		return 0;
+	}
+	_TIFFmemset(tif->tif_data, 0, sizeof(struct JBIGState));
+	codec = GetJBIGState(tif);
+
+	/* Initialize codec private fields */
+	codec->recvparams = 0;
+	codec->subaddress = NULL;
+	codec->faxdcs = NULL;
+	codec->recvtime = 0;
+
+	/* Register codec private fields with libtiff and setup function pointers*/
+	_TIFFMergeFieldInfo(tif, jbigFieldInfo, N(jbigFieldInfo));
+
+	codec->vgetparent = tif->tif_tagmethods.vgetfield;
+	codec->vsetparent = tif->tif_tagmethods.vsetfield;
+
+	tif->tif_tagmethods.vgetfield = JBIGVGetField;
+	tif->tif_tagmethods.vsetfield = JBIGVSetField;
+	tif->tif_tagmethods.printdir = JBIGPrintDir;
+
+
+	/*
+	 * These flags are set so the JBIG Codec can control when to reverse bits and when
+	 * not to and to allow the jbig decoder and bit reverser to write to memory
+	 * when necessary.
+	 */
+	tif->tif_flags |= TIFF_NOBITREV;
+	tif->tif_flags &= ~TIFF_MAPPED;
+
+	/* Setup the function pointers for encode, decode, and cleanup. */
+	tif->tif_setupdecode = JBIGSetupDecode;
+	tif->tif_decodestrip = JBIGDecode;
+
+	tif->tif_setupencode = JBIGSetupEncode;
+	tif->tif_encodestrip = JBIGEncode;
+	
+	tif->tif_cleanup = JBIGCleanup;
+
+	return 1;
+}
+
+#endif /* JBIG_SUPPORT */
--- libtiff/tiffconf.h.in.orig	2005-07-28 01:49:24.000000000 -0700
+++ libtiff/tiffconf.h.in	2006-06-06 19:35:23.000000000 -0700
@@ -40,6 +40,9 @@
 /* Support JPEG compression (requires IJG JPEG library) */
 #undef JPEG_SUPPORT
 
+/* Support JBIG compression (requires JBIG-KIT library) */
+#undef JBIG_SUPPORT
+
 /* Support LogLuv high dynamic range encoding */
 #undef LOGLUV_SUPPORT
 
--- libtiff/tiffconf.h.vc.orig	2005-07-28 01:49:24.000000000 -0700
+++ libtiff/tiffconf.h.vc	2006-06-06 19:35:23.000000000 -0700
@@ -41,6 +41,9 @@
 /* Support JPEG compression (requires IJG JPEG library) */
 /* #undef JPEG_SUPPORT */
 
+/* Support JBIG compression (requires JBIG-KIT library) */
+#undef JBIG_SUPPORT
+
 /* Support LogLuv high dynamic range encoding */
 #define LOGLUV_SUPPORT 1
 
--- tools/tiffcp.c.orig	2005-07-08 02:03:49.000000000 -0700
+++ tools/tiffcp.c	2006-06-06 19:44:44.000000000 -0700
@@ -349,6 +349,8 @@
 		if (cp)
 			defpredictor = atoi(cp+1);
 		defcompression = COMPRESSION_ADOBE_DEFLATE;
+	} else if (strneq(opt, "jbig", 4)) {
+		defcompression = COMPRESSION_JBIG;
 	} else
 		return (0);
 	return (1);
@@ -648,6 +650,12 @@
 		TIFFSetField(out, TIFFTAG_JPEGQUALITY, quality);
 		TIFFSetField(out, TIFFTAG_JPEGCOLORMODE, jpegcolormode);
 		break;
+	case COMPRESSION_JBIG:
+		CopyTag(TIFFTAG_FAXRECVPARAMS, 1, TIFF_LONG);
+		CopyTag(TIFFTAG_FAXRECVTIME, 1, TIFF_LONG);
+		CopyTag(TIFFTAG_FAXSUBADDRESS, 1, TIFF_ASCII);
+		CopyTag(TIFFTAG_FAXDCS, 1, TIFF_ASCII);
+		break;
 	case COMPRESSION_LZW:
 	case COMPRESSION_ADOBE_DEFLATE:
 	case COMPRESSION_DEFLATE:
--- libtiff/Makefile.vc.orig	2006-06-06 19:58:40.000000000 -0700
+++ libtiff/Makefile.vc	2006-06-06 19:59:32.000000000 -0700
@@ -29,7 +29,7 @@
 
 !INCLUDE ..\nmake.opt
 
-INCL	= -I. $(JPEG_INCLUDE) $(ZLIB_INCLUDE)
+INCL	= -I. $(JPEG_INCLUDE) $(ZLIB_INCLUDE) $(JBIG_INCLUDE)
 
 !IFDEF USE_WIN_CRT_LIB
 OBJ_SYSDEP_MODULE = tif_unix.obj
@@ -74,6 +74,7 @@
 	tif_warning.obj \
 	tif_write.obj \
 	tif_zip.obj \
+	tif_jbig.obj \
 	$(OBJ_SYSDEP_MODULE)
 
 all:	libtiff.lib $(DLLNAME)
