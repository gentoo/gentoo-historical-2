diff -ur xine-lib-1-rc0a.orig/src/input/input_gnome_vfs.c xine-lib-1-rc0a/src/input/input_gnome_vfs.c
--- xine-lib-1-rc0a.orig/src/input/input_gnome_vfs.c	2003-07-27 12:42:49.000000000 -0400
+++ xine-lib-1-rc0a/src/input/input_gnome_vfs.c	2003-08-18 09:40:46.000000000 -0400
@@ -33,7 +33,7 @@
 
 #include <libgnomevfs/gnome-vfs.h>
 
-#define D(...)
+/* #define D(...) */
 /* #define D(...) g_message (__VA_ARGS__) */
 /* #define LOG */
 
@@ -73,7 +73,7 @@
 	gnomevfs_input_t *this = (gnomevfs_input_t *) this_gen;
 	off_t n, num_bytes;
 
-	D("gnomevfs_plugin_read: %ld", (long int) len);
+	/* D("gnomevfs_plugin_read: %ld", (long int) len); */
 
 	num_bytes = 0;
 
@@ -85,15 +85,15 @@
 				(GnomeVFSFileSize) (len - num_bytes),
 				(GnomeVFSFileSize *)&n);
 
-		D("gnomevfs_plugin_read: read %ld from gnome-vfs",
-				(long int) n);
+		/* D("gnomevfs_plugin_read: read %ld from gnome-vfs", 
+				(long int) n); */
 		if (res != GNOME_VFS_OK && res != GNOME_VFS_ERROR_EOF)
 		{
-			D("gnomevfs_plugin_read: gnome_vfs_read returns %s",
-					gnome_vfs_result_to_string (res));
+			/* D("gnomevfs_plugin_read: gnome_vfs_read returns %s",
+					gnome_vfs_result_to_string (res)); */
 			return -1;
 		} else if (res == GNOME_VFS_ERROR_EOF) {
-			D("gnomevfs_plugin_read: GNOME_VFS_ERROR_EOF");
+			/* D("gnomevfs_plugin_read: GNOME_VFS_ERROR_EOF"); */
 			return 0;
 		}
 
@@ -138,7 +138,7 @@
 
 	if (gnome_vfs_seek (this->fh, origin, offset) == GNOME_VFS_OK)
 	{
-		D ("gnomevfs_plugin_seek: %d", (int) (origin + offset));
+		/* D ("gnomevfs_plugin_seek: %d", (int) (origin + offset)); */
 		return (off_t) (origin + offset);
 	} else
 		return (off_t) gnomevfs_plugin_get_current_pos (this_gen);
@@ -152,13 +152,13 @@
 
 	if (this->fh == NULL)
 	{
-		D ("gnomevfs_plugin_get_current_pos: (this->fh == NULL)");
+		/* D ("gnomevfs_plugin_get_current_pos: (this->fh == NULL)"); */
 		return 0;
 	}
 
 	if (gnome_vfs_tell (this->fh, &offset) == GNOME_VFS_OK)
 	{
-		D ("gnomevfs_plugin_get_current_pos: %d", (int) offset);
+		/* D ("gnomevfs_plugin_get_current_pos: %d", (int) offset); */
 		return (off_t) offset;
 	} else
 		return 0;
@@ -172,7 +172,7 @@
 
 	if (this->fh == NULL)
 	{
-		D ("gnomevfs_plugin_get_length: (this->fh == NULL)");
+		/* D ("gnomevfs_plugin_get_length: (this->fh == NULL)"); */
 		return 0;
 	}
 
@@ -180,7 +180,7 @@
 				&info,
 				GNOME_VFS_FILE_INFO_DEFAULT) == GNOME_VFS_OK)
 	{
-		D ("gnomevfs_plugin_get_length: %d", (int) info.size);
+		/* D ("gnomevfs_plugin_get_length: %d", (int) info.size); */
 		return (off_t) info.size;
 	} else
 		return 0;
@@ -222,7 +222,7 @@
 gnomevfs_plugin_get_optional_data (input_plugin_t *this_gen, 
 		void *data, int data_type)
 {
-	D ("input_gnomevfs: get optional data, type %08x\n", data_type);
+	/* D ("input_gnomevfs: get optional data, type %08x\n", data_type); */
 
 	return INPUT_OPTIONAL_UNSUPPORTED;
 }
@@ -246,10 +246,10 @@
 {
 	gnomevfs_input_t *this = (gnomevfs_input_t *) this_gen;
 
-	D("gnomevfs_klass_open: opening '%s'", this->mrl);
+	/* D("gnomevfs_klass_open: opening '%s'", this->mrl); */
 	if (gnome_vfs_open_uri (&this->fh, this->uri, GNOME_VFS_OPEN_READ) != GNOME_VFS_OK)
 	{
-		D("gnomevfs_klass_open: failed to open '%s'", this->mrl);
+		/* D("gnomevfs_klass_open: failed to open '%s'", this->mrl); */
 		return 0;
 	}
 
@@ -273,7 +273,7 @@
 	gnomevfs_input_t *this;
 	GnomeVFSURI *uri;
 
-	D("gnomevfs_klass_get_instance: %s", mrl);
+	/* D("gnomevfs_klass_get_instance: %s", mrl); */
 
 	uri = gnome_vfs_uri_new (mrl);
 	if (uri == NULL)
@@ -283,16 +283,16 @@
 	if (strncmp (mrl, "file:/", strlen ("file:/")) == 0
 			|| strstr (mrl, "://") == NULL)
 	{
-		D("gnomevfs_klass_open: '%s' is a file:///", mrl);
+		/* D("gnomevfs_klass_open: '%s' is a file:///", mrl); */
 		gnome_vfs_uri_unref (uri);
 		return NULL;
 	} else if (strncmp (gnome_vfs_uri_get_scheme (uri), "http", 4) == 0) {
-		D("gnomevfs_klass_open: '%s' is http://", mrl);
+		/* D("gnomevfs_klass_open: '%s' is http://", mrl); */
 		gnome_vfs_uri_unref (uri);
 		return NULL;
 	}
 
-	D("Creating the structure for stream '%s'", mrl);
+	/* D("Creating the structure for stream '%s'", mrl); */
 	this = g_new0 (gnomevfs_input_t, 1);
 	this->stream = stream;
 	this->fh = NULL;
@@ -321,7 +321,7 @@
 {
 	gnomevfs_input_class_t *this;
 
-	D("init_input_class");
+	/* D("init_input_class"); */
 
 	if (gnome_vfs_initialized () == FALSE)
 		if (gnome_vfs_init () == FALSE)
