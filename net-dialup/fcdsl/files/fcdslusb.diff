--- driver.c.orig	2004-05-14 02:00:00.000000000 +0200
+++ driver.c	2005-02-26 11:26:41.000000000 +0100
@@ -18,6 +18,10 @@
  * http://www.opensource.org/licenses/lgpl-license.html
  * 
  * Contact: AVM GmbH, Alt-Moabit 95, 10559 Berlin, Germany, email: info@avm.de
+ *
+ * Mon Oct 20 22:43:31 2003
+ * Modified by Joerg Lehrke to improve locking 
+ * Fixed for rev 0.4.1 by Stefan Schweizer
  */
 
 #include <asm/atomic.h>
@@ -46,6 +50,8 @@
 #include "main.h"
 #include "driver.h"
 
+#undef SINGLE_LOCK
+
 #ifndef HZ
 # error HZ is not defined...
 #endif
@@ -76,7 +82,11 @@ static atomic_t			crit_count		= ATOMIC_I
 static volatile int		hard_error_issued;
 static atomic_t			tx_flag			= ATOMIC_INIT (0);
 static atomic_t			rx_flag			= ATOMIC_INIT (0);
+#if defined (SINGLE_LOCK)
+# define stack_lock qt_lock
+#else
 static spinlock_t		stack_lock		= SPIN_LOCK_UNLOCKED;
+#endif
 static int			thread_pid		= -1;
 static atomic_t			thread_flag;
 static atomic_t			thread_capi_flag;
@@ -1367,15 +1377,20 @@ static void tx_handler (card_p pdc) {
 /*---------------------------------------------------------------------------*\
 \*---------------------------------------------------------------------------*/ 
 static void tx_task (unsigned long data) {
-
+	unsigned long flags;
 	UNUSED_ARG (data);
+
 	if (in_critical ()) {
 		atomic_set (&tx_flag, 1);
-	} else if (spin_trylock (&stack_lock)) {
-		tx_handler (capi_card);
-		spin_unlock (&stack_lock);
 	} else {
-		atomic_set (&tx_flag, 1);
+		local_irq_save(flags);
+		if (spin_trylock (&stack_lock)) {
+			tx_handler (capi_card);
+			spin_unlock (&stack_lock);
+		} else {
+			atomic_set (&tx_flag, 1);
+		}
+		local_irq_restore(flags);
 	}
 } /* tx_task */
 
@@ -1412,15 +1427,20 @@ static void rx_handler (card_p pdc) {
 /*---------------------------------------------------------------------------*\
 \*---------------------------------------------------------------------------*/ 
 static void rx_task (unsigned long data) {
-
+	unsigned long flags;
 	UNUSED_ARG (data);
+
 	if (in_critical ()) {
 		atomic_set (&rx_flag, 1);
-	} else if (spin_trylock (&stack_lock)) {
-		rx_handler (capi_card);
-		spin_unlock (&stack_lock);
 	} else {
-		atomic_set (&rx_flag, 1);
+		local_irq_save(flags);
+		if (spin_trylock (&stack_lock)) {
+			tx_handler (capi_card);
+			spin_unlock (&stack_lock);
+		} else {
+			atomic_set (&tx_flag, 1);
+		}
+		local_irq_restore(flags);
 	}
 } /* rxi_task */
 
