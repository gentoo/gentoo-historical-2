--- configure.ac.orig	2009-03-26 22:58:33.000000000 +0000
+++ configure.ac	2009-03-26 22:59:45.000000000 +0000
@@ -21,41 +21,16 @@
 
 # Include macros
 sinclude(acx_pthread.m4)
-sinclude(acx_prog_cc_optim.m4)
 sinclude(acx_urbi_resolve_dir.m4)
 
 # Display pakage and version number
 AC_MSG_RESULT([*********** Configuring:  $PACKAGE $VERSION ($date) **********])
 
-# Initialize the list of compilers to consider
-cclist="cc gcc"
-
-# Backup and reset the input CFLAGS and LDFLAGS
-mycflags="$CFLAGS"
-CFLAGS=""
-myldflags="$LDFLAGS"
-LDFLAGS=""
-
-# Provide special option for the Linux Intel C compiler
-AC_MSG_CHECKING([for Linux Intel C compiler mode])
-AC_ARG_ENABLE(icc,
-	[AC_HELP_STRING([--enable-icc],
-	[Enable special mode for compilation with the Intel compiler \
-(off by default)])],
-        use_icc="yes"
-        cclist="icc $cclist"
-	AC_MSG_RESULT([yes]),
-        use_icc="no"
-	AC_MSG_RESULT([no]))
-
 # Checks for programs.
-# GCC is chosen last because it is likely to yield less optimized code
-AC_PROG_CC([$cclist])
 # C Compiler: Check that it is ANSI C
 AM_PROG_CC_STDC
 # C Compiler: Check that it is POSIX-compliant
 AC_ISC_POSIX
-ACX_PROG_CC_OPTIM
 AC_PROG_RANLIB
 AC_PROG_INSTALL
 
@@ -65,9 +40,6 @@
 # Checks for header files.
 AC_HEADER_STDC
 AC_CHECK_HEADERS(malloc.h unistd.h sys/mman.h)
-if test $use_icc = "yes" -a $CC = "icc"; then
-AC_CHECK_HEADERS(mathimf.h)
-fi
 
 # Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST
