Index: configure.in
===================================================================
RCS file: /cvsroot/mozilla/configure.in,v
retrieving revision 1.1056
diff -u -r1.1056 configure.in
--- configure.in	2 Jul 2002 20:26:10 -0000	1.1056
+++ configure.in	3 Jul 2002 22:46:49 -0000
@@ -883,6 +883,7 @@
     ;;
     i?86)
     	USE_ELF_DYNSTR_GC=1
+        MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS=1
     ;;
     mips*)
         CFLAGS="$CFLAGS -Wa,-xgot"
@@ -3652,6 +3653,30 @@
 [  --enable-elf-dynstr-gc  Enable elf dynstr garbage collector (opt builds only)],
     USE_ELF_DYNSTR_GC=1,
     USE_ELF_DYNSTR_GC= )
+
+dnl ========================================================
+dnl = --enable-old-abi-compat-wrappers
+dnl ========================================================
+dnl on x86 linux, the current builds of some popular plugins (notably
+dnl flashplayer and real) expect a few builtin symbols from libgcc
+dnl which were available in some older versions of gcc.  However,
+dnl they're _NOT_ available in newer versions of gcc (eg 3.1), so if
+dnl we want those plugin to work with a gcc-3.1 built binary, we need
+dnl to provide these symbols.  MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS defaults
+dnl to true on x86 linux, and false everywhere else.
+dnl
+
+MOZ_ARG_ENABLE_BOOL(old-abi-compat-wrappers
+[  --old-abi-compat-wrappers,  Support old GCC ABI symbols to ease the pain of the linux compiler change],
+    MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS=1,
+    MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS= )
+if test "$MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS"; then
+    AC_LANG_SAVE
+    AC_LANG_CPLUSPLUS
+    AC_CHECK_FUNCS(__builtin_vec_new __builtin_vec_delete __builtin_new __builtin_delete __pure_virtual)
+    AC_LANG_RESTORE
+    AC_DEFINE(MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS)
+fi
 
 dnl ========================================================
 dnl = --enable-prebinding
Index: xpfe/bootstrap/nsAppRunner.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpfe/bootstrap/nsAppRunner.cpp,v
retrieving revision 1.353
diff -u -r1.353 nsAppRunner.cpp
--- xpfe/bootstrap/nsAppRunner.cpp	16 May 2002 01:02:12 -0000	1.353
+++ xpfe/bootstrap/nsAppRunner.cpp	3 Jul 2002 22:46:49 -0000
@@ -134,6 +134,58 @@
 #include "jprof.h"
 #endif
 
+// on x86 linux, the current builds of some popular plugins (notably
+// flashplayer and real) expect a few builtin symbols from libgcc
+// which were available in some older versions of gcc.  However,
+// they're _NOT_ available in newer versions of gcc (eg 3.1), so if
+// we want those plugin to work with a gcc-3.1 built binary, we need
+// to provide these symbols.  MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS defaults
+// to true on x86 linux, and false everywhere else.
+//
+// The fact that the new and free operators are mismatched 
+// mirrors the way the original functions in egcs 1.1.2 worked.
+
+
+extern "C" {
+
+# ifndef HAVE___builtin_vec_new
+  void *__builtin_vec_new(size_t aSize, const std::nothrow_t &aNoThrow) throw()
+  {
+    return ::operator new(aSize, aNoThrow);
+  }
+# endif
+
+# ifndef HAVE___builtin_vec_delete
+  void __builtin_vec_delete(void *aPtr, const std::nothrow_t &) throw ()
+  {
+    if (aPtr) {
+      free(aPtr);
+    }
+  }
+# endif
+
+# ifndef HAVE__builtin_new
+	void *__builtin_new(int aSize)
+  {
+    return malloc(aSize);
+  }
+# endif
+
+# ifndef HAVE__builtin_delete
+	void __builtin_delete(void *aPtr)
+  {
+    free(aPtr);
+  }
+# endif
+
+# ifndef HAVE__pure_virtual
+  void __pure_virtual(void) {
+    extern void __cxa_pure_virtual(void);
+
+    __cxa_pure_virtual();
+  }
+# endif
+}
 
 #ifdef _BUILD_STATIC_BIN
 #include "nsStaticComponent.h"
