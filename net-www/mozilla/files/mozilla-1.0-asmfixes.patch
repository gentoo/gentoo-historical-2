--- mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_unixish_x86.cpp.asmfixes	2002-06-12 11:03:43.000000000 +0200
+++ mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_unixish_x86.cpp	2002-06-12 11:32:57.000000000 +0200
@@ -40,7 +40,7 @@
 #include "xptcprivate.h"
 #include "xptc_platforms_unixish_x86.h"
 
-static nsresult
+extern "C" nsresult
 PrepareAndDispatch(nsXPTCStubBase* self, uint32 methodIndex, PRUint32* args)
 {
 #define PARAM_BUFFER_COUNT     16
@@ -102,32 +102,67 @@ PrepareAndDispatch(nsXPTCStubBase* self,
     return result;
 }
 
-#ifdef __GNUC__         /* Gnu Compiler. */
-#define STUB_ENTRY(n) \
-nsresult nsXPTCStubBase::Stub##n() \
-{ \
-  register nsresult (*method) (nsXPTCStubBase *, uint32, PRUint32 *) = PrepareAndDispatch; \
-  int temp0, temp1; \
-  register nsresult result; \
-  __asm__ __volatile__( \
-    "leal   0x0c(%%ebp), %%ecx\n\t"    /* args */ \
-    "pushl  %%ecx\n\t" \
-    "pushl  $"#n"\n\t"                 /* method index */ \
-    "movl   0x08(%%ebp), %%ecx\n\t"    /* this */ \
-    "pushl  %%ecx\n\t" \
-    "call   *%%edx\n\t"                /* PrepareAndDispatch */ \
-    "addl   $12, %%esp" \
-    : "=a" (result),    /* %0 */ \
-      "=&c" (temp0),    /* %1 */ \
-      "=d" (temp1)      /* %2 */ \
-    : "2" (method)      /* %2 */ \
-    : "memory" ); \
-    return result; \
-}
+#ifndef __GNUC__
+#error "can't find a compiler to use"
+#endif
 
+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100 /* G++ V3 ABI */
+// gcc3 mangling tends to insert the length of the method name
+#define STUB_ENTRY(n)                                                   \
+asm(".section   \".text\"\n\t"                                          \
+    ".align     2\n\t"                                                  \
+    ".if        " #n " < 10\n\t"                                        \
+    ".globl     _ZN14nsXPTCStubBase5Stub" #n "Ev\n\t"                   \
+    ".type      _ZN14nsXPTCStubBase5Stub" #n "Ev,@function\n"           \
+"_ZN14nsXPTCStubBase5Stub" #n "Ev:\n\t"                                 \
+                                                                        \
+    ".elseif    " #n " < 100\n\t"                                       \
+    ".globl     _ZN14nsXPTCStubBase6Stub" #n "Ev\n\t"                   \
+    ".type      _ZN14nsXPTCStubBase6Stub" #n "Ev,@function\n"           \
+"_ZN14nsXPTCStubBase6Stub" #n "Ev:\n\t"                                 \
+                                                                        \
+    ".elseif    " #n " < 1000\n\t"                                      \
+    ".globl     _ZN14nsXPTCStubBase7Stub" #n "Ev\n\t"                   \
+    ".type      _ZN14nsXPTCStubBase7Stub" #n "Ev,@function\n"           \
+"_ZN14nsXPTCStubBase7Stub" #n "Ev:\n\t"                                 \
+                                                                        \
+    ".else\n\t"                                                         \
+    ".err       \"stub number " #n " >= 1000 not yet supported\"\n\t"   \
+    ".endif\n\t"                                                        \
+                                                                        \
+    "movl       $" #n ", %eax\n\t"                                      \
+    "jmp        SharedStub"                                             \
+);
 #else
-#error "can't find a compiler to use"
-#endif /* __GNUC__ */
+// gcc2 version
+#define STUB_ENTRY(n)                                           \
+asm(".section   \".text\"\n\t"                                  \
+    ".align     2\n\t"                                          \
+    ".globl     Stub" #n "__14nsXPTCStubBase\n\t"               \
+    ".type      Stub" #n "__14nsXPTCStubBase,@function\n"       \
+"Stub" #n "__14nsXPTCStubBase:\n\t"                             \
+    "movl       $" #n ", %eax\n\t"                              \
+    "jmp        SharedStub\n\t"                                 \
+);
+#endif
+
+// static nsresult SharedStub(PRUint32 methodIndex) __attribute__((regparm(1)))
+asm(".section   \".text\"\n\t"
+    ".align     2\n\t"
+    ".type      SharedStub,@function\n\t"
+"SharedStub:\n\t"
+    "pushl %ebp\n\t"
+    "movl  %esp, %ebp\n\t"
+    "leal  0x0c(%ebp), %ecx\n\t"
+    "pushl %ecx\n\t"
+    "pushl %eax\n\t"
+    "movl  0x08(%ebp), %ecx\n\t"
+    "pushl %ecx\n\t"
+    "call  PrepareAndDispatch\n\t"
+    "addl  $12, %esp\n\t"
+    "popl  %ebp\n\t"
+    "ret"
+);
 
 #define SENTINEL_ENTRY(n) \
 nsresult nsXPTCStubBase::Sentinel##n() \
--- mozilla/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_unixish_x86.cpp.asmfixes	2002-06-11 15:48:50.000000000 +0200
+++ mozilla/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_unixish_x86.cpp	2002-06-12 11:06:49.000000000 +0200
@@ -40,9 +40,7 @@
 #include "xptcprivate.h"
 #include "xptc_platforms_unixish_x86.h"
 
-extern "C" {
-
-static void
+extern "C" void
 invoke_copy_to_stack(PRUint32 paramCount, nsXPTCVariant* s, PRUint32* d)
 {
     for(PRUint32 i = paramCount; i >0; i--, d++, s++)
@@ -70,69 +68,64 @@ invoke_copy_to_stack(PRUint32 paramCount
     }
 }
 
-}
-
+extern "C"
 XPTC_PUBLIC_API(nsresult)
 XPTC_InvokeByIndex(nsISupports* that, PRUint32 methodIndex,
-                   PRUint32 paramCount, nsXPTCVariant* params)
-{
-#ifdef __GNUC__            /* Gnu compiler. */
-  PRUint32 result;
-  // Each param takes at most 2, 4-byte words
-  // It doesn't matter if we push too many words, and calculating the exact
-  // ammount takes time.
-  PRUint32 n = paramCount << 3;
-  void (*fn_copy) (unsigned int, nsXPTCVariant *, PRUint32 *) = invoke_copy_to_stack;
-  int temp1, temp2, temp3;
- 
- __asm__ __volatile__(
-    "subl  %8, %%esp\n\t" /* make room for params */
-    "pushl %%esp\n\t"
-    "pushl %7\n\t"
-    "pushl %6\n\t"
-    "call  *%0\n\t"       /* copy params */
-    "addl  $0xc, %%esp\n\t"
-    "movl  %4, %%ecx\n\t"
+                   PRUint32 paramCount, nsXPTCVariant* params);
+
+#ifdef __GNUC__                 /* GNU compiler */
+asm(".section   \".text\"\n\t"
+    ".align     2\n\t"
+    ".globl     XPTC_InvokeByIndex\n\t"
+    ".type      XPTC_InvokeByIndex,@function\n"
+"XPTC_InvokeByIndex:\n\t"
+    "pushl %ebp\n\t"
+    "movl  %esp, %ebp\n\t"
+    "pushl %ecx\n\t"
+    "pushl %edx\n\t"
+    "pushl %edi\n\t"
+    "movl  0x10(%ebp), %ecx\n\t"        /* paramCount */
+    "movl  0x14(%ebp), %edx\n\t"        /* params */
+    // Each param takes at most 2, 4-byte words
+    // It doesn't matter if we push too many words, and calculating the exact
+    // ammount takes time.
+    "leal  0(,%ecx,8), %edi\n\t"
+    "subl  %edi, %esp\n\t"
+    "pushl %esp\n\t"                    /* copy params */
+    "pushl %edx\n\t"
+    "pushl %ecx\n\t"
+    "call  invoke_copy_to_stack\n\t"
+    "addl  $12, %esp\n\t"
+    "movl  0x08(%ebp), %ecx\n\t"        /* that */
+    "movl  0x0c(%ebp), %eax\n\t"        /* methodIndex */
 #ifdef CFRONT_STYLE_THIS_ADJUST
-    "movl  (%%ecx), %%edx\n\t"
-    "movl  %5, %%eax\n\t"   /* function index */
-    "shl   $3, %%eax\n\t"   /* *= 8 */
-    "addl  $8, %%eax\n\t"   /* += 8 skip first entry */
-    "addl  %%eax, %%edx\n\t"
-    "movswl (%%edx), %%eax\n\t" /* 'this' offset */
-    "addl  %%eax, %%ecx\n\t"
-    "pushl %%ecx\n\t"
-    "addl  $4, %%edx\n\t"   /* += 4, method pointer */
+#error "FIXME: untested"
+    "movl  (%ecx), %edx\n\t"
+    "shl   $3, %eax\n\t"                /* *= 8 */
+    "addl  $8, %eax\n\t"                /* += 8 skip first entry */
+    "addl  %eax, %edx\n\t"
+    "movswl (%edx), %eax\n\t"           /* 'this' offset */
+    "addl  %eax, %ecx\n\t"
+    "pushl %ecx\n\t"
+    "addl  $4, %edx\n\t"                /* += 4, method pointer */
 #else /* THUNK_BASED_THIS_ADJUST */
-    "pushl %%ecx\n\t"
-    "movl  (%%ecx), %%edx\n\t"
-    "movl  %5, %%eax\n\t"   /* function index */
+    "pushl %ecx\n\t"
+    "movl  (%ecx), %edx\n\t"
 #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100 /* G++ V3 ABI */
-    "leal  (%%edx,%%eax,4), %%edx\n\t"
+    "leal  0(%edx,%eax,4), %edx\n\t"
 #else /* not G++ V3 ABI  */
-    "leal  8(%%edx,%%eax,4), %%edx\n\t"
+    "leal  8(%edx,%eax,4), %edx\n\t"
 #endif /* G++ V3 ABI */
 #endif
-    "call  *(%%edx)\n\t"    /* safe to not cleanup esp */
-    "addl  $4, %%esp\n\t"
-    "addl  %8, %%esp"
-    : "=a" (result),        /* %0 */
-      "=c" (temp1),         /* %1 */
-      "=d" (temp2),         /* %2 */
-      "=g" (temp3)          /* %3 */
-    : "g" (that),           /* %4 */
-      "g" (methodIndex),    /* %5 */
-      "1" (paramCount),     /* %6 */
-      "2" (params),         /* %7 */
-      "g" (n),              /* %8 */
-      "0" (fn_copy)         /* %3 */
-    : "memory"
-    );
-    
-  return result;
-
+    "call  *(%edx)\n\t"
+    "addl  $4, %esp\n\t"                /* reajust stack for "this" pointer */
+    "addl  %edi, %esp\n\t"              /* ... and space for params */
+    "popl  %edi\n\t"
+    "popl  %edx\n\t"
+    "popl  %ecx\n\t"
+    "popl  %ebp\n\t"
+    "ret"
+);
 #else
 #error "can't find a compiler to use"
 #endif /* __GNUC__ */
-
-}    
