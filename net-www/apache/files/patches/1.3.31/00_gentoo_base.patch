diff -Naur apache_1.3.31/cgi-bin/printenv apache_1.3.31-gentoo/cgi-bin/printenv
--- apache_1.3.31/cgi-bin/printenv	1999-11-24 18:10:58.000000000 +0000
+++ apache_1.3.31-gentoo/cgi-bin/printenv	2004-05-08 09:49:06.461169744 +0000
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 ##
 ##  printenv -- demo CGI program which just prints its environment
 ##
diff -Naur apache_1.3.31/conf/mime.types apache_1.3.31-gentoo/conf/mime.types
--- apache_1.3.31/conf/mime.types	2004-01-10 22:57:46.000000000 +0000
+++ apache_1.3.31-gentoo/conf/mime.types	2004-05-08 09:49:06.481166704 +0000
@@ -344,19 +344,18 @@
 application/x-bcpio		bcpio
 application/x-cdlink		vcd
 application/x-chess-pgn		pgn
-application/x-compress
 application/x-cpio		cpio
 application/x-csh		csh
 application/x-director		dcr dir dxr
 application/x-dvi		dvi
 application/x-futuresplash	spl
 application/x-gtar		gtar
-application/x-gzip
 application/x-hdf		hdf
 application/x-javascript	js
 application/x-koan		skp skd skt skm
 application/x-latex		latex
 application/x-netcdf		nc cdf
+application/x-ogg		ogg
 application/x-sh		sh
 application/x-shar		shar
 application/x-shockwave-flash	swf
diff -Naur apache_1.3.31/config.layout apache_1.3.31-gentoo/config.layout
--- apache_1.3.31/config.layout	2002-05-16 16:32:31.000000000 +0000
+++ apache_1.3.31-gentoo/config.layout	2004-05-08 09:49:06.487165792 +0000
@@ -28,6 +28,7 @@
     runtimedir:    $localstatedir/logs
     logfiledir:    $localstatedir/logs
     proxycachedir: $localstatedir/proxy
+    serverroot:    $prefix
 </Layout>
 
 #   GNU standards conforming path layout.
@@ -50,6 +51,7 @@
     runtimedir:    $localstatedir/run
     logfiledir:    $localstatedir/log
     proxycachedir: $localstatedir/proxy
+    serverroot:    $prefix
 </Layout>
 
 #   Apache binary distribution path layout
@@ -92,6 +94,7 @@
     runtimedir:    $prefix/Logs
     logfiledir:    $prefix/Logs
     proxycachedir: $prefix/ProxyCache
+    serverroot:    $prefix
 </Layout>
 
 #   Darwin/Mac OS Layout
@@ -115,8 +118,8 @@
     proxycachedir: $runtimedir/proxy
 </Layout>
 
-#   Red Hat Linux 7.x layout
-<Layout RedHat>
+#   ADVX layout
+<Layout ADVX>
     prefix:        /usr
     exec_prefix:   $prefix
     bindir:        $prefix/bin
@@ -134,6 +137,7 @@
     runtimedir:    $localstatedir/run
     logfiledir:    $localstatedir/log/httpd
     proxycachedir: $localstatedir/cache/httpd
+    serverroot:    /etc/httpd
 </Layout>     
 
 #   According to the /opt filesystem conventions
diff -Naur apache_1.3.31/configure apache_1.3.31-gentoo/configure
--- apache_1.3.31/configure	2004-02-20 22:40:50.000000000 +0000
+++ apache_1.3.31-gentoo/configure	2004-05-08 09:49:06.617146032 +0000
@@ -460,7 +460,7 @@
             for var in prefix exec_prefix bindir sbindir libexecdir mandir \
                        sysconfdir datadir iconsdir htdocsdir manualdir cgidir \
                        includedir localstatedir runtimedir logfiledir \
-                       proxycachedir; do
+                       proxycachedir serverroot; do
                 eval "val=\"\$$var\""
                 case $val in
                     *+ )
@@ -621,6 +621,9 @@
             sysconfdir="$apc_optarg"    
             autosuffix_sysconfdir=no
             ;;
+	--serverroot=*)
+	    serverroot="$apc_optarg"
+	    ;;
         --datadir=*)       
             datadir="$apc_optarg"       
             autosuffix_datadir=no
@@ -1070,7 +1073,7 @@
 for var in prefix exec_prefix bindir sbindir libexecdir mandir \
            sysconfdir datadir iconsdir htdocsdir manualdir cgidir \
            includedir localstatedir runtimedir logfiledir \
-           proxycachedir suexec_docroot suexec_logexec ; do
+           proxycachedir suexec_docroot suexec_logexec serverroot; do
     eval "val=\"\$$var\"";
     val=`echo $val | sed -e 's:\(.\)/*$:\1:'`
     eval "$var=\"$val\""
@@ -1175,8 +1178,8 @@
 ##   path is just the emtpy one, i.e. ""]
 ##
 runtimedir_relative=`echo $runtimedir | sed -e "s:^$prefix/*::" -e 's:\(.\)$:\1/:'`
-logfiledir_relative=`echo $logfiledir | sed -e "s:^$prefix/*::" -e 's:\(.\)$:\1/:'`
-sysconfdir_relative=`echo $sysconfdir | sed -e "s:^$prefix/*::" -e 's:\(.\)$:\1/:'`
+logfiledir_relative=`echo $logfiledir | sed -e "s:^$serverroot/*::" -e 's:\(.\)$:\1/:'`
+sysconfdir_relative=`echo $sysconfdir | sed -e "s:^$serverroot/*::" -e 's:\(.\)$:\1/:'`
 libexecdir_relative=`echo $libexecdir | sed -e "s:^$prefix/*::" -e 's:\(.\)$:\1/:'`
 
 ##
@@ -1204,7 +1207,7 @@
     echo "        proxycachedir: $proxycachedir" 
     echo ""
     echo "Compilation paths:"
-    echo "           HTTPD_ROOT: $prefix"
+    echo "           HTTPD_ROOT: $serverroot"
     echo "      SHARED_CORE_DIR: $libexecdir"
     echo "       DEFAULT_PIDLOG: ${runtimedir_relative}${thetarget}.pid"
     echo "   DEFAULT_SCOREBOARD: ${runtimedir_relative}${thetarget}.scoreboard"
@@ -1263,6 +1266,7 @@
 -e "s%@libexecdir_relative@%$libexecdir_relative%g" \
 -e "s%@mandir@%$mandir%g" \
 -e "s%@sysconfdir@%$sysconfdir%g" \
+-e "s%@serverroot@%$serverroot%g" \
 -e "s%@datadir@%$datadir%g" \
 -e "s%@iconsdir@%$iconsdir%g" \
 -e "s%@htdocsdir@%$htdocsdir%g" \
@@ -1301,7 +1305,7 @@
 echo "#!/bin/sh" >$src/apaci
 echo "## USED AS A COMMAND LINE EXPANDER TO OVERRIDE PATHS" >>$src/apaci
 echo "## WITHOUT DISTURBING THE KNOWN MAKE BUILD PROCESS DISPLAY" >>$src/apaci
-echo "echo '-DHTTPD_ROOT=\"$prefix\"'" >>$src/apaci
+echo "echo '-DHTTPD_ROOT=\"$serverroot\"'" >>$src/apaci
 echo "echo '-DSUEXEC_BIN=\"$sbindir/suexec\"'" >>$src/apaci
 echo "echo '-DSHARED_CORE_DIR=\"$libexecdir\"'" >>$src/apaci
 echo "echo '-DDEFAULT_PIDLOG=\"${runtimedir_relative}${thetarget}.pid\"'" >>$src/apaci
diff -Naur apache_1.3.31/src/helpers/find-dbm-lib apache_1.3.31-gentoo/src/helpers/find-dbm-lib
--- apache_1.3.31/src/helpers/find-dbm-lib	2004-02-16 22:23:09.000000000 +0000
+++ apache_1.3.31-gentoo/src/helpers/find-dbm-lib	2004-05-08 09:49:06.621145424 +0000
@@ -28,17 +28,7 @@
 	    *-linux*)
 		# many systems don't have -ldbm
 		DBM_LIB=""
-		if ./helpers/TestCompile lib ndbm dbm_open; then
-		    DBM_LIB="-lndbm"
-		    if ./helpers/TestCompile lib db1 dbm_open; then
-			# Red Hat needs this; ndbm.h lives in db1
-			CFLAGS="$CFLAGS -I/usr/include/db1"
-		    fi
-		elif ./helpers/TestCompile lib db1 dbm_open; then
-		    # For Red Hat 7, if not handled by the ndbm case above
-		    DBM_LIB="-ldb1"
-		    CFLAGS="$CFLAGS -I/usr/include/db1"
-                elif ./helpers/TestCompile lib gdbm dbm_open; then
+                if ./helpers/TestCompile lib gdbm dbm_open; then
                     DBM_LIB="-lgdbm"
                     CFLAGS="$CFLAGS -I/usr/include/gdbm"
 		elif ./helpers/TestCompile lib dbm dbm_open; then
diff -Naur apache_1.3.31/src/include/hsregex.h apache_1.3.31-gentoo/src/include/hsregex.h
--- apache_1.3.31/src/include/hsregex.h	2004-04-15 15:51:51.000000000 +0000
+++ apache_1.3.31-gentoo/src/include/hsregex.h	2004-05-08 09:49:06.626144664 +0000
@@ -22,7 +22,7 @@
 #define ap_private_extern
 #endif
 
-typedef off_t regoff_t;
+typedef int regoff_t;
 typedef struct {
 	int re_magic;
 	size_t re_nsub;		/* number of parenthesized subexpressions */
diff -Naur apache_1.3.31/src/main/http_core.c apache_1.3.31-gentoo/src/main/http_core.c
--- apache_1.3.31/src/main/http_core.c	2004-05-03 20:15:26.000000000 +0000
+++ apache_1.3.31-gentoo/src/main/http_core.c	2004-05-08 09:51:58.137071040 +0000
@@ -2140,8 +2140,9 @@
 	else {
 	    cmd->server->server_uid = ap_user_id;
 	    fprintf(stderr,
-		    "Warning: User directive in <VirtualHost> "
+		    "ERROR: User directive in <VirtualHost> "
 		    "requires SUEXEC wrapper.\n");
+	    exit (1);
 	}
     }
 #if !defined (BIG_SECURITY_HOLE) && !defined (OS2)
@@ -2181,8 +2182,9 @@
 	else {
 	    cmd->server->server_gid = ap_group_id;
 	    fprintf(stderr,
-		    "Warning: Group directive in <VirtualHost> requires "
+		    "ERROR: Group directive in <VirtualHost> requires "
 		    "SUEXEC wrapper.\n");
+	    exit (1);
 	}
     }
 
diff -Naur apache_1.3.31/src/main/http_main.c apache_1.3.31-gentoo/src/main/http_main.c
--- apache_1.3.31/src/main/http_main.c	2004-04-06 16:42:19.000000000 +0000
+++ apache_1.3.31-gentoo/src/main/http_main.c	2004-05-08 09:49:06.929098608 +0000
@@ -425,6 +425,7 @@
     }
     else {
 	ap_add_version_component(SERVER_BASEVERSION " (" PLATFORM ")");
+	ap_add_version_component(" (Gentoo/Linux)");
     }
     /*
      * Lock the server_version string if we're not displaying
diff -Naur apache_1.3.31/src/modules/standard/mod_auth_dbm.c apache_1.3.31-gentoo/src/modules/standard/mod_auth_dbm.c
--- apache_1.3.31/src/modules/standard/mod_auth_dbm.c	2004-02-20 20:37:40.000000000 +0000
+++ apache_1.3.31-gentoo/src/modules/standard/mod_auth_dbm.c	2004-05-08 09:49:07.027083712 +0000
@@ -38,7 +38,8 @@
 #define dbm_fetch sdbm_fetch
 #define dbm_close sdbm_close
 #else
-#include <ndbm.h>
+#define DB_DBM_HSEARCH 1
+#include <db.h>
 #endif
 
 /*
diff -Naur apache_1.3.31/src/support/apxs.pl apache_1.3.31-gentoo/src/support/apxs.pl
--- apache_1.3.31/src/support/apxs.pl	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/apxs.pl	2004-05-08 09:49:07.123069120 +0000
@@ -187,15 +187,15 @@
 ##
 if ($^O ne "MSWin32") {
 if (not -x "$CFG_SBINDIR/$CFG_TARGET") {
-    print STDERR "apxs:Error: $CFG_SBINDIR/$CFG_TARGET not found or not executable\n";
-    exit(1);
+    print STDERR "apxs:Warning: $CFG_SBINDIR/$CFG_TARGET not found or not executable\n";
+    print STDERR "apxs:Warning: Continuing anyway...\n";
 }
 if (not grep(/mod_so/, `$CFG_SBINDIR/$CFG_TARGET -l`)) {
-    print STDERR "apxs:Error: Sorry, no DSO support for Apache available\n";
-    print STDERR "apxs:Error: under your platform. Make sure the Apache\n";
-    print STDERR "apxs:Error: module mod_so is compiled into your server\n";
-    print STDERR "apxs:Error: binary `$CFG_SBINDIR/$CFG_TARGET'.\n";
-    exit(1);
+    print STDERR "apxs:Warning: No shared object support for Apache\n";
+    print STDERR "apxs:Warning: available under your platform. Make sure\n";
+    print STDERR "apxs:Warning: the Apache module mod_so is compiled into\n";
+    print STDERR "apxs:Warning: your server binary `$CFG_SBINDIR/$CFG_TARGET'.\n";
+    print STDERR "apxs:Warning: Continuing anyway...\n";
 }
 }
 
@@ -469,7 +469,7 @@
             $filename = "mod_${name}.c";
         }
         my $dir = $CFG_LIBEXECDIR;
-        $dir =~ s|^$CFG_PREFIX/?||;
+	$dir =~ s|^$CFG_SYSCONFDIR/?||;
         $dir =~ s|(.)$|$1/|;
         push(@lmd, sprintf("LoadModule %-18s %s", "${name}_module", "$dir$t"));
         push(@amd, sprintf("AddModule %s", $filename));
diff -Naur apache_1.3.31/src/support/dbmmanage apache_1.3.31-gentoo/src/support/dbmmanage
--- apache_1.3.31/src/support/dbmmanage	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/dbmmanage	2004-05-08 09:53:56.276111176 +0000
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 # Copyright 1999-2004 The Apache Software Foundation
 #
diff -Naur apache_1.3.31/src/support/htdigest.c apache_1.3.31-gentoo/src/support/htdigest.c
--- apache_1.3.31/src/support/htdigest.c	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/htdigest.c	2004-05-08 09:49:07.153064560 +0000
@@ -52,7 +52,7 @@
 
 #define MAX_STRING_LEN 256
 
-char *tn;
+char tn[MAX_STRING_LEN];
 
 
 static void getword(char *word, char *line, char stop)
@@ -115,7 +115,7 @@
     ap_getpass("Re-type new password: ", pwv, sizeof(pwv));
     if (strcmp(pwin, pwv) != 0) {
 	fprintf(stderr, "They don't match, sorry.\n");
-	if (tn) {
+	if (strlen(tn)) {
 	    unlink(tn);
 	}
 	exit(1);
@@ -146,7 +146,7 @@
 static void interrupted(void)
 {
     fprintf(stderr, "Interrupted.\n");
-    if (tn)
+    if (strlen(tn))
 	unlink(tn);
     exit(1);
 }
@@ -174,8 +174,9 @@
     char x[MAX_STRING_LEN];
     char command[MAX_STRING_LEN];
     int found;
+    int tfd;
 
-    tn = NULL;
+    strcpy (tn, "/tmp/htdigest-XXXXXX");
     signal(SIGINT, (void (*)(int)) interrupted);
     if (argc == 5) {
 	if (strcmp(argv[1], "-c"))
@@ -199,8 +200,12 @@
     else if (argc != 4)
 	usage();
 
-    tn = tmpnam(NULL);
-    if (!(tfp = fopen(tn, "w"))) {
+    tfd = mkstemp (tn);
+    if (tfd == -1) {
+	fprintf(stderr, "Could not open temp file.\n");
+	exit(1);
+    }
+    if (!(tfp = fdopen(tfd, "w"))) {
 	fprintf(stderr, "Could not open temp file.\n");
 	exit(1);
     }
diff -Naur apache_1.3.31/src/support/htpasswd.c apache_1.3.31-gentoo/src/support/htpasswd.c
--- apache_1.3.31/src/support/htpasswd.c	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/htpasswd.c	2004-05-08 09:49:07.249049968 +0000
@@ -81,7 +81,7 @@
  * This needs to be declared statically so the signal handler can
  * access it.
  */
-static char *tempfilename;
+static char tempfilename[MAX_STRING_LEN];
 /*
  * If our platform knows about the tmpnam() external buffer size, create
  * a buffer to pass in.  This is needed in a threaded environment, or
@@ -241,7 +241,7 @@
 static void interrupted(void)
 {
     fprintf(stderr, "Interrupted.\n");
-    if (tempfilename != NULL) {
+    if (strlen(tempfilename) > 0) {
 	unlink(tempfilename);
     }
     exit(ERR_INTERRUPTED);
@@ -333,8 +333,10 @@
     int noninteractive = 0;
     int i;
     int args_left = 2;
+    int tfd;
+
+    memset (tempfilename, 0x00, sizeof(tempfilename));
 
-    tempfilename = NULL;
     signal(SIGINT, (void (*)(int)) interrupted);
 
     /*
@@ -521,8 +523,9 @@
      * to add or update.  Let's do it..
      */
     errno = 0;
-    tempfilename = tmpnam(tname_buf);
-    if ((tempfilename == NULL) || (*tempfilename == '\0')) {
+    strcpy(tempfilename, "/tmp/htpasswd-XXXXXX");
+    tfd = mkstemp(tempfilename);
+    if (tfd == -1) {
 	fprintf(stderr, "%s: unable to generate temporary filename\n",
 		argv[0]);
 	if (errno == 0) {
@@ -531,7 +534,7 @@
 	perror("tmpnam");
 	exit(ERR_FILEPERM);
     }
-    ftemp = fopen(tempfilename, "w+");
+    ftemp = fdopen(tfd, "w+");
     if (ftemp == NULL) {
 	fprintf(stderr, "%s: unable to create temporary file '%s'\n", argv[0],
 		tempfilename);
diff -Naur apache_1.3.31/src/support/httpd.8 apache_1.3.31-gentoo/src/support/httpd.8
--- apache_1.3.31/src/support/httpd.8	2004-02-20 22:40:51.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/httpd.8	2004-05-08 09:49:07.254049208 +0000
@@ -153,21 +153,17 @@
 , and then exit.
 .SH FILES
 .PD 0
-.B /usr/local/apache/conf/httpd.conf
+.B /etc/apache/conf/apache.conf
 .br
-.B /usr/local/apache/conf/srm.conf
+.B /etc/apache/conf/apache-mime.types
 .br
-.B /usr/local/apache/conf/access.conf
+.B /etc/apache/conf/magic
 .br
-.B /usr/local/apache/conf/mime.types
+.B /var/log/apache/error_log
 .br
-.B /usr/local/apache/conf/magic
+.B /var/log/apache/access_log
 .br
-.B /usr/local/apache/logs/error_log
-.br
-.B /usr/local/apache/logs/access_log
-.br
-.B /usr/local/apache/logs/httpd.pid
+.B /var/run/apache.pid
 .PD
 .SH SEE ALSO
 .BR inetd (8).
diff -Naur apache_1.3.31/src/support/log_server_status apache_1.3.31-gentoo/src/support/log_server_status
--- apache_1.3.31/src/support/log_server_status	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/log_server_status	2004-05-08 09:52:52.257843432 +0000
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 # Copyright 1999-2004 The Apache Software Foundation
 #
diff -Naur apache_1.3.31/src/support/phf_abuse_log.cgi apache_1.3.31-gentoo/src/support/phf_abuse_log.cgi
--- apache_1.3.31/src/support/phf_abuse_log.cgi	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/phf_abuse_log.cgi	2004-05-08 09:53:26.217680752 +0000
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 # Copyright 1999-2004 The Apache Software Foundation
 #
diff -Naur apache_1.3.31/src/support/suexec.c apache_1.3.31-gentoo/src/support/suexec.c
--- apache_1.3.31/src/support/suexec.c	2004-02-20 22:02:24.000000000 +0000
+++ apache_1.3.31-gentoo/src/support/suexec.c	2004-05-08 09:49:07.455018656 +0000
@@ -47,6 +47,7 @@
 #include <sys/types.h>
 
 #include <stdarg.h>
+#include <strings.h>
 
 #include "suexec.h"
 
@@ -131,6 +132,8 @@
     "UNIQUE_ID=",
     "USER_NAME=",
     "TZ=",
+    "HTTPS",
+    "REDIRECT_HTTPS",
     NULL
 };
 
@@ -219,6 +222,244 @@
     environ = cleanenv;
 }
 
+#define MY_STATE_NORMAL 0
+#define MY_STATE_SPACE 1
+#define MY_STATE_QUOTES 2
+#define MY_STATE_APOSTROPHES 3
+#define MY_STATE_END 4
+
+char** param_separate(char* params, int addl_slots) {
+    int state, actpos, actarg_start, actarg_len, argnum;
+    char **res=0;
+    char backslash=0;
+    
+    if (params==0) return(0);
+    
+    if (*params==0) {
+       res=(char**)malloc(sizeof(char*)*(1+addl_slots));
+       for (actpos=0;actpos<addl_slots+1;++actpos) res[actpos]=0;
+       return(res);
+    }
+    actpos=0;backslash=0;argnum=0;state=MY_STATE_SPACE;
+    while (state!=MY_STATE_END) {
+       switch (state) {
+       
+          case MY_STATE_SPACE: 
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          break;
+                          
+                 case ' ' :
+                 case '\t':
+                          break;              
+       
+                 case '\'':
+                          state=MY_STATE_APOSTROPHES;
+                          actarg_start=actpos+1;
+                          break;
+                 case '"':
+                          state=MY_STATE_QUOTES;
+                          actarg_start=actpos+1;
+                          break;
+                 default: 
+                          state=MY_STATE_NORMAL;
+                          actarg_start=actpos;
+              }
+              break;
+                          
+          case MY_STATE_NORMAL:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          ++argnum;
+                          actarg_len=actpos-actarg_start;
+                          break;
+                          
+                 case ' ':
+                 case '\t':
+                          state=MY_STATE_SPACE;
+                          ++argnum;
+                          actarg_len=actpos-actarg_start;
+                          break; 
+              }
+              break;
+
+          case MY_STATE_APOSTROPHES:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          ++argnum;
+                          actarg_len=actpos-actarg_start;
+                          break;
+                 
+                 case '\\':
+                          backslash=1-backslash;        
+                          break;        
+                          
+                 case '\'':
+                          if (! backslash) {
+                             state=MY_STATE_SPACE;
+                             ++argnum;
+                             actarg_len=actpos-actarg_start;
+                          }
+                          break; 
+              }
+              if (params[actpos]!='\\') backslash=0;
+              break;
+          
+          case MY_STATE_QUOTES:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          ++argnum;
+                          actarg_len=actpos-actarg_start;
+                          break;
+                 
+                 case '\\':
+                          backslash=1-backslash;        
+                          break;        
+                          
+                 case '"':
+                          if (! backslash) {
+                             state=MY_STATE_SPACE;
+                             ++argnum;
+                             actarg_len=actpos-actarg_start;
+                          }
+                          break; 
+              }
+              if (params[actpos]!='\\') backslash=0;
+              break;
+       }
+       actpos++;
+    }
+    
+    res=(char**)malloc(sizeof(char*)*(argnum+1+addl_slots));
+    for (actpos=0;actpos<argnum+addl_slots+1;++actpos) res[actpos]=0;
+    
+
+    actpos=0;backslash=0;argnum=0;state=MY_STATE_SPACE;
+    while (state!=MY_STATE_END) {
+       switch (state) {
+       
+          case MY_STATE_SPACE: 
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          break;
+                          
+                 case ' ' :
+                 case '\t':
+                          break;              
+       
+                 case '\'':
+                          state=MY_STATE_APOSTROPHES;
+                          actarg_start=actpos+1;
+                          break;
+                 case '"':
+                          state=MY_STATE_QUOTES;
+                          actarg_start=actpos+1;
+                          break;
+                 default: 
+                          state=MY_STATE_NORMAL;
+                          actarg_start=actpos;
+              }
+              break;
+                          
+          case MY_STATE_NORMAL:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          actarg_len=actpos-actarg_start;
+                          res[argnum]=(char*)malloc(actarg_len+1);
+                          strncpy(res[argnum],&params[actarg_start],actarg_len);
+                          res[argnum][actarg_len]=0;
+                          ++argnum;
+                          break;
+                          
+                 case ' ':
+                 case '\t':
+                          state=MY_STATE_SPACE;
+                          actarg_len=actpos-actarg_start;
+                          res[argnum]=(char*)malloc(actarg_len+1);
+                          strncpy(res[argnum],&params[actarg_start],actarg_len);
+                          res[argnum][actarg_len]=0;
+                          ++argnum;
+                          break; 
+              }
+              break;
+
+          case MY_STATE_APOSTROPHES:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          actarg_len=actpos-actarg_start;
+                          res[argnum]=(char*)malloc(actarg_len+1);
+                          strncpy(res[argnum],&params[actarg_start],actarg_len);
+                          res[argnum][actarg_len]=0;
+                          ++argnum;
+                          break;
+                 
+                 case '\\':
+                          backslash=1-backslash;        
+                          break;        
+                          
+                 case '\'':
+                          if (! backslash) {
+                             state=MY_STATE_SPACE;
+                             actarg_len=actpos-actarg_start;
+                             res[argnum]=(char*)malloc(actarg_len+1);
+                             strncpy(res[argnum],&params[actarg_start],actarg_len);
+                             res[argnum][actarg_len]=0;
+                             ++argnum;
+                          }
+                          break; 
+              }
+              if (params[actpos]!='\\') backslash=0;
+              break;
+          
+          case MY_STATE_QUOTES:
+              
+              switch (params[actpos]) {
+                 case 0 : 
+                          state=MY_STATE_END;
+                          actarg_len=actpos-actarg_start;
+                          res[argnum]=(char*)malloc(actarg_len+1);
+                          strncpy(res[argnum],&params[actarg_start],actarg_len);
+                          res[argnum][actarg_len]=0;
+                          ++argnum;
+                          break;
+                 
+                 case '\\':
+                          backslash=1-backslash;        
+                          break;        
+                          
+                 case '"':
+                          if (! backslash) {
+                             state=MY_STATE_SPACE;
+                             actarg_len=actpos-actarg_start;
+                             res[argnum]=(char*)malloc(actarg_len+1);
+                             strncpy(res[argnum],&params[actarg_start],actarg_len);
+                             res[argnum][actarg_len]=0;
+                             ++argnum;
+                          }
+                          break; 
+              }
+              if (params[actpos]!='\\') backslash=0;
+              break;
+       }
+       actpos++;
+    }
+
+    return(res);
+}    
+
+
 int main(int argc, char *argv[])
 {
     int userdir = 0;		/* ~userdir flag             */
@@ -231,6 +472,10 @@
     char *actual_gname;		/* actual group name         */
     char *prog;			/* name of this program      */
     char *cmd;			/* command to be executed    */
+
+    int ind, ind2;    
+    char **passedargv = 0;
+    
     char cwd[AP_MAXPATH];	/* current working directory */
     char dwd[AP_MAXPATH];	/* docroot working directory */
     struct passwd *pw;		/* password entry holder     */
@@ -510,8 +755,18 @@
     /*
      * Error out if we cannot stat the program.
      */
-    if (((lstat(cmd, &prg_info)) != 0) || (S_ISLNK(prg_info.st_mode))) {
-	log_err("error: cannot stat program: (%s)\n", cmd);
+    passedargv=param_separate(cmd,argc-4);
+    for (ind=0; passedargv[ind]; ++ind);
+    for (ind2=4;ind2<argc;++ind2,++ind) {
+        if (argv[ind2]!=0) if (argv[ind2][0]!=0) passedargv[ind]=strdup(argv[ind2]);
+        if (passedargv[ind]==0) {
+            passedargv[ind]=malloc(1);
+            passedargv[ind][0]=0;
+        }
+    }
+    
+    if (((lstat(passedargv[0], &prg_info)) != 0) || (S_ISLNK(prg_info.st_mode))) {
+	log_err("error: cannot stat program: (%s)\n", passedargv[0]);
 	exit(117);
     }
 
@@ -519,7 +774,7 @@
      * Error out if the program is writable by others.
      */
     if ((prg_info.st_mode & S_IWOTH) || (prg_info.st_mode & S_IWGRP)) {
-	log_err("error: file is writable by others: (%s/%s)\n", cwd, cmd);
+	log_err("error: file is writable by others: (%s/%s)\n", cwd, passedargv[0]);
 	exit(118);
     }
 
@@ -527,7 +782,7 @@
      * Error out if the file is setuid or setgid.
      */
     if ((prg_info.st_mode & S_ISUID) || (prg_info.st_mode & S_ISGID)) {
-	log_err("error: file is either setuid or setgid: (%s/%s)\n", cwd, cmd);
+	log_err("error: file is either setuid or setgid: (%s/%s)\n", cwd, passedargv[0]);
 	exit(119);
     }
 
@@ -552,7 +807,7 @@
      * "[error] Premature end of script headers: ..."
      */
     if (!(prg_info.st_mode & S_IXUSR)) {
-	log_err("error: file has no execute permission: (%s/%s)\n", cwd, cmd);
+	log_err("error: file has no execute permission: (%s/%s)\n", cwd, passedargv[0]);
 	exit(121);
     }
 
@@ -584,6 +839,8 @@
     /*
      * Execute the command, replacing our image with its own.
      */
+    execv(passedargv[0], passedargv);
+#if 0
 #ifdef NEED_HASHBANG_EMUL
     /* We need the #! emulation when we want to execute scripts */
     {
@@ -594,7 +851,7 @@
 #else /*NEED_HASHBANG_EMUL*/
     execv(cmd, &argv[3]);
 #endif /*NEED_HASHBANG_EMUL*/
-
+#endif
     /*
      * (I can't help myself...sorry.)
      *
@@ -604,5 +861,10 @@
      * Oh well, log the failure and error out.
      */
     log_err("emerg: (%d)%s: exec failed (%s)\n", errno, strerror(errno), cmd);
+
+    for (ind=0;passedargv[ind];++ind) free(passedargv[ind]);
+    free(passedargv);
+    passedargv=0;
+
     exit(255);
 }
