diff -u -p -r1.3 fclrexcpt.c
--- libc/sysdeps/hppa/fpu/fclrexcpt.c	6 Jul 2001 04:55:52 -0000	1.3
+++ libc/sysdeps/hppa/fpu/fclrexcpt.c	14 Oct 2003 01:25:55 -0000
@@ -29,7 +29,7 @@ feclearexcept (int excepts)
   __asm__ ("fstd %%fr0,0(%1)" : "=m" (*sw) : "r" (sw));
 
   /* Clear all the relevant bits. */
-  sw[0] &= ~(excepts & FE_ALL_EXCEPT) << 27;
+  sw[0] &= ~((excepts & FE_ALL_EXCEPT) << 27);
   __asm__ ("fldd 0(%0),%%fr0" : : "r" (sw));
 
   /* Success.  */
diff -u -p -r1.2 fegetenv.c
--- libc/sysdeps/hppa/fpu/fegetenv.c	6 Jul 2001 04:55:52 -0000	1.2
+++ libc/sysdeps/hppa/fpu/fegetenv.c	14 Oct 2003 01:25:55 -0000
@@ -23,11 +23,12 @@
 int
 fegetenv (fenv_t *envp)
 {
-  __asm__ (
-	   "fstd %%fr0,0(%2)\n"
-	   "fstd,ma %%fr1,8(%2)\n"
-	   "fstd,ma %%fr2,8(%2)\n"
-	   "fstd %%fr3,0(%2)\n"
-	   : "=m" (*envp), "=r" (envp) : "1" (envp));
+  fenv_t *temp = envp;
+  __asm__ ( "fstd,ma %%fr0,8(%1)\n"
+	    "fstd,ma %%fr1,8(%1)\n"
+	    "fstd,ma %%fr2,8(%1)\n"
+	    "fstd %%fr3,0(%1)\n"
+	    : "=m" (*temp), "+r" (temp)
+	  );  
   return 0;
 }
diff -u -p -r1.2 feholdexcpt.c
--- libc/sysdeps/hppa/fpu/feholdexcpt.c	6 Jul 2001 04:55:52 -0000	1.2
+++ libc/sysdeps/hppa/fpu/feholdexcpt.c	14 Oct 2003 01:25:55 -0000
@@ -25,36 +25,29 @@ int
 feholdexcept (fenv_t *envp)
 {
   fenv_t clear;
+  fenv_t * _regs = envp;
 
   /* Store the environment.  */
-  {
-    fenv_t * _regs = envp;
-    __asm__ (
-	     "fstd %%fr0,0(%2)\n"
-	     "fstd,ma %%fr1,8(%2)\n"
-	     "fstd,ma %%fr2,8(%2)\n"
-	     "fstd %%fr3,0(%2)\n"
-	     : "=m" (*_regs), "=r" (_regs) : "1" (_regs));
-    memcpy (&clear, envp, sizeof (clear));
-  }
+  __asm__ ( "fstd,ma %%fr0,8(%1)\n"
+	    "fstd,ma %%fr1,8(%1)\n"
+	    "fstd,ma %%fr2,8(%1)\n"
+	    "fstd %%fr3,0(%1)\n"
+	    : "=m" (*_regs), "+r" (_regs)
+	  );
+  
+  memcpy (&clear, envp, sizeof (clear));
 
-  /* Now clear all exceptions.  */
-  clear.__status_word &= ~(FE_ALL_EXCEPT << 27);
+  /* Now clear all exceptions (Enable bits and flags)  */
+  clear.__status_word &= ~((FE_ALL_EXCEPT << 27) | FE_ALL_EXCEPT);
   memset (clear.__exception, 0, sizeof (clear.__exception));
 
-  /* And set all exceptions to non-stop.  */
-  clear.__status_word &= ~FE_ALL_EXCEPT;
-
   /* Load the new environment. */
-  {
-    fenv_t * _regs = &clear + 1;
-    __asm__ (
-	     "fldd,mb -8(%2),%%fr3\n"
-	     "fldd,mb -8(%2),%%fr2\n"
-	     "fldd,mb -8(%2),%%fr1\n"
-	     "fldd -8(%2),%%fr0\n"
-	     : "=m" (*_regs), "=r" (_regs) : "1" (_regs));
-  }
+  __asm__ ( "fldd,ma -8(%1),%%fr3\n"
+	    "fldd,ma -8(%1),%%fr2\n"
+	    "fldd,ma -8(%1),%%fr1\n"
+	    "fldd 0(%1),%%fr0\n"
+	    : "=m" (*_regs), "+r" (_regs)
+	  );
 
   return 0;
 }
diff -u -p -r1.3 fesetenv.c
--- libc/sysdeps/hppa/fpu/fesetenv.c	10 Sep 2002 01:26:37 -0000	1.3
+++ libc/sysdeps/hppa/fpu/fesetenv.c	14 Oct 2003 01:25:55 -0000
@@ -26,24 +26,23 @@ int
 fesetenv (const fenv_t *envp)
 {
   fenv_t temp;
+  fenv_t * _regs = &temp;
 
   /* Install the environment specified by ENVP.  But there are a few
      values which we do not want to come from the saved environment.
      Therefore, we get the current environment and replace the values
      we want to use from the environment specified by the parameter.  */
-  {
-    fenv_t * _regs = &temp;
-    __asm__ (
-	     "fstd %%fr0,0(%2)\n"
-	     "fstd,ma %%fr1,8(%2)\n"
-	     "fstd,ma %%fr2,8(%2)\n"
-	     "fstd %%fr3,0(%2)\n"
-	     : "=m" (*_regs), "=r" (_regs) : "1" (_regs));
-  }
 
-  temp.__status_word &= ~(FE_ALL_EXCEPT
-			  | (FE_ALL_EXCEPT << 27)
-			  | FE_DOWNWARD);
+  __asm__ ( "fstd,ma %%fr0,8(%1)\n"
+	    "fstd,ma %%fr1,8(%1)\n"
+	    "fstd,ma %%fr2,8(%1)\n"
+	    "fstd %%fr3,0(%1)\n"
+	    : "=m" (*_regs), "+r" (_regs) 
+	  );
+
+  temp.__status_word &= ~((FE_ALL_EXCEPT << 27)
+			  | FE_DOWNWARD 
+			  | FE_ALL_EXCEPT);  
   if (envp == FE_DFL_ENV)
     ;
   else if (envp == FE_NOMASK_ENV)
@@ -55,16 +54,13 @@ fesetenv (const fenv_t *envp)
 			      | (FE_ALL_EXCEPT << 27)));
 
   /* Load the new environment. */
-  {
-    fenv_t * _regs = &temp + 1;
-    __asm__ (
-	     "fldd,mb -8(%2),%%fr3\n"
-	     "fldd,mb -8(%2),%%fr2\n"
-	     "fldd,mb -8(%2),%%fr1\n"
-	     "fldd -8(%2),%%fr0\n"
-	     : "=m" (*_regs), "=r" (_regs) : "1" (_regs));
-  }
-
+  __asm__ ( "fldd,ma -8(%1),%%fr3\n"
+	    "fldd,ma -8(%1),%%fr2\n"
+	    "fldd,ma -8(%1),%%fr1\n"
+	    "fldd 0(%2),%%fr0\n"
+	    : "=m" (*_regs), "+r" (_regs)
+	  );
+  
   /* Success.  */
   return 0;
 }
diff -u -p -r1.2 feupdateenv.c
--- libc/sysdeps/hppa/fpu/feupdateenv.c	6 Jul 2001 04:55:52 -0000	1.2
+++ libc/sysdeps/hppa/fpu/feupdateenv.c	14 Oct 2003 01:25:55 -0000
@@ -27,13 +27,11 @@ feupdateenv (const fenv_t *envp)
 
   /* Get the current exception status. */
   __asm__ ("fstd %%fr0,0(%1)" : "=m" (*sw) : "r" (sw));
-  sw[0] &= (FE_ALL_EXCEPT << 27);
-
+  sw[0] &= FE_ALL_EXCEPT;
+  envp->__status_word = envp->__status_word | sw[0];
+  
   /* Install new environment.  */
   fesetenv (envp);
-
-  /* Raise the saved exception. */
-  feraiseexcept (sw[0] >> 27);
 
   /* Success.  */
   return 0;
diff -u -p -r1.4 fraiseexcpt.c
--- libc/sysdeps/hppa/fpu/fraiseexcpt.c	10 Sep 2002 01:26:37 -0000	1.4
+++ libc/sysdeps/hppa/fpu/fraiseexcpt.c	19 Oct 2003 21:24:11 -0000
@@ -22,6 +22,9 @@
 #include <float.h>
 #include <math.h>
 
+/* Please see section 10, 
+   page 10-5 "Delayed Trapping" in the PA-RISC 2.0 Architecture manual */
+
 int
 feraiseexcept (int excepts)
 {
@@ -33,56 +36,64 @@ feraiseexcept (int excepts)
 
   /* We do these bits in assembly to be certain GCC doesn't optimize
      away something important, and so we can force delayed traps to
-     occur.  */
-
-  /* FIXME: These all need verification! */
+     occur. */
 
-  /* First: invalid exception.  */
+  /* We use "fldd 0(%%sr0,%%sp),%0" to flush the delayed exception */
+	
+  /* First: Invalid exception.  */
   if (excepts & FE_INVALID)
     {
       /* One example of a invalid operation is 0 * Infinity.  */
       double d = HUGE_VAL;
-      __asm__ __volatile__ ("fmpy,dbl %1,%%fr0,%0\n\t"
-			    /* FIXME: is this a proper trap barrier? */
-			    "fcpy,dbl %%fr0,%%fr0" : "=f" (d) : "0" (d));
+      __asm__ __volatile__ (
+		"	fcpy,dbl %%fr0,%%fr22\n"
+		"	fmpy,dbl %0,%%fr22,%0\n"
+		"	fldd 0(%%sr0,%%sp),%0"
+		: "+f" (d) : : "%fr22" );
     }
 
-  /* Next: division by zero.  */
+  /* Second: Division by zero.  */
   if (excepts & FE_DIVBYZERO)
     {
       double d = 1.0;
-      __asm__ __volatile__ ("fdiv,dbl %1,%%fr0,%0\n\t"
-			    "fcpy,dbl %%fr0,%%fr0" : "=f" (d) : "0" (d));
+      __asm__ __volatile__ (
+		"	fcpy,dbl %%fr0,%%fr22\n"
+		"	fdiv,dbl %0,%%fr22,%0\n"
+		"	fldd 0(%%sr0,%%sp),%0"
+		: "+f" (d) : : "%fr22" );
     }
 
-  /* Next: overflow.  */
-  /* FIXME: Compare with IA-64 - do we have the same problem? */
+  /* Third: Overflow.  */
   if (excepts & FE_OVERFLOW)
     {
       double d = DBL_MAX;
-
-      __asm__ __volatile__ ("fmpy,dbl %1,%1,%0\n\t"
-			    "fcpy,dbl %%fr0,%%fr0" : "=f" (d) : "0" (d));
+      __asm__ __volatile__ (
+		"	fadd,dbl %0,%0,%0\n"
+		"	fldd 0(%%sr0,%%sp),%0"
+		: "+f" (d) );
     }
 
-  /* Next: underflow.  */
+  /* Fourth: Underflow.  */
   if (excepts & FE_UNDERFLOW)
     {
       double d = DBL_MIN;
-      double e = 69.69;
-
-      __asm__ __volatile__ ("fdiv,dbl %1,%2,%0\n\t"
-			    "fcpy,dbl %%fr0,%%fr0" : "=f" (d) : "0" (d), "f" (e));
+      double e = 3.0;
+      __asm__ __volatile__ (
+		"	fdiv,dbl %0,%1,%0\n"
+		"	fldd 0(%%sr0,%%sp),%0"
+		: "+f" (d) : "f" (e) );
     }
 
-  /* Last: inexact.  */
+  /* Fifth: Inexact */
   if (excepts & FE_INEXACT)
     {
-      double d = 1.0;
-      double e = M_PI;
-
-      __asm__ __volatile__ ("fdiv,dbl %1,%2,%0\n\t"
-			    "fcpy,dbl %%fr0,%%fr0" : "=f" (d) : "0" (d), "f" (e));
+      double d = M_PI;
+      double e = 69.69;
+      __asm__ __volatile__ (
+		"	fdiv,dbl %0,%1,%%fr22\n"
+		"	fcnvfxt,dbl,sgl %%fr22,%%fr22L\n"
+		"	fldd 0(%%sr0,%%sp),%%fr22"
+		: : "f" (d), "f" (e) : "%fr22" );
     }
 
   /* Success.  */
diff -u -p -r1.2 fsetexcptflg.c
--- libc/sysdeps/hppa/fpu/fsetexcptflg.c	6 Jul 2001 04:55:52 -0000	1.2
+++ libc/sysdeps/hppa/fpu/fsetexcptflg.c	14 Oct 2003 01:25:55 -0000
@@ -29,8 +29,7 @@ fesetexceptflag (const fexcept_t *flagp,
   /* Get the current status word. */
   __asm__ ("fstd %%fr0,0(%1)" : "=m" (*sw) : "r" (sw));
 
-  /* Install the new exception flags bits.  */
-  sw[0] &= ~(excepts & (FE_ALL_EXCEPT >> 27));
+  /* Install new enable trap bits  */
   sw[0] |= (*flagp & excepts & FE_ALL_EXCEPT) << 27;
 
   /* Store the new status word.  */
