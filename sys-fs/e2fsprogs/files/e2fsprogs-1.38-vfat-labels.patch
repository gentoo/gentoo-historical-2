Add support for reading vfat labels
http://bugs.gentoo.org/77692

this is part of upstream commits:

changeset:   1800:3541b8928702
user:        tytso@mit.edu
date:        Sat Sep 10 21:07:23 2005 -0400
summary:     Generic blkid library cleanup

changeset:   1801:892782b13179
user:        tytso@mit.edu
date:        Sat Sep 10 21:51:20 2005 -0400
summary:     Search the root directory of FAT filesystems for the label information

--- e2fsprogs-1.38/lib/blkid/probe.c
+++ e2fsprogs-1.38/lib/blkid/probe.c
@@ -159,36 +159,204 @@
 	return 0;
 }
 
-static int probe_vfat(int fd __BLKID_ATTR((unused)), 
+static unsigned char *get_buffer(int fd, unsigned char **prevbuf, unsigned off, size_t len)
+{
+	ssize_t		ret_read;
+	unsigned char	*newbuf;
+
+	*prevbuf=newbuf = realloc(*prevbuf, len);
+	if (newbuf == NULL)
+		return NULL;
+
+	if (lseek(fd, off, SEEK_SET) < 0)
+		return NULL;
+	
+	ret_read = read(fd, newbuf, len);
+	if (ret_read != (ssize_t) len)
+		return NULL;
+	
+
+	return newbuf;
+}
+
+/* maximum number of clusters */
+#define FAT12_MAX 0xFF4
+#define FAT16_MAX 0xFFF4
+#define FAT32_MAX 0x0FFFFFF6
+
+#define FAT_ATTR_VOLUME_ID		0x08
+#define FAT_ATTR_DIR			0x10
+#define FAT_ATTR_LONG_NAME		0x0f
+#define FAT_ATTR_MASK			0x3f
+#define FAT_ENTRY_FREE			0xe5
+
+static char *no_name = "NO NAME    ";
+
+struct vfat_dir_entry {
+	__u8	name[11];
+	__u8	attr;
+	__u16	time_creat;
+	__u16	date_creat;
+	__u16	time_acc;
+	__u16	date_acc;
+	__u16	cluster_high;
+	__u16	time_write;
+	__u16	date_write;
+	__u16	cluster_low;
+	__u32	size;
+};
+
+static unsigned char *search_fat_label(struct vfat_dir_entry *dir, int count)
+{
+	unsigned int i;
+
+	for (i = 0; i < count; i++) {
+		if (dir[i].name[0] == 0x00)
+			break;
+		
+		if ((dir[i].name[0] == FAT_ENTRY_FREE) ||
+		    (dir[i].cluster_high != 0 || dir[i].cluster_low != 0) ||
+		    ((dir[i].attr & FAT_ATTR_MASK) == FAT_ATTR_LONG_NAME))
+			continue;
+
+		if ((dir[i].attr & (FAT_ATTR_VOLUME_ID | FAT_ATTR_DIR)) == 
+		    FAT_ATTR_VOLUME_ID) {
+			return dir[i].name;
+		}
+	}
+	return 0;
+}
+
+static int figure_label_len(const unsigned char *label, int len)
+{
+	const unsigned char *end = label + len - 1;
+
+	while ((*end == ' ' || *end == 0) && end >= label)
+		--end;
+	if (end >= label) {
+		label = label;
+		return end - label + 1;
+	}
+	return 0;
+}
+
+static int probe_vfat(int fd, 
 		      blkid_cache cache __BLKID_ATTR((unused)), 
 		      blkid_dev dev,
 		      struct blkid_magic *id __BLKID_ATTR((unused)), 
 		      unsigned char *buf)
 {
-	struct vfat_super_block *vs;
+	struct vfat_super_block *vs = (struct vfat_super_block *) buf;
+	struct msdos_super_block *ms = (struct msdos_super_block *) buf;
+	struct vfat_dir_entry *dir;
 	char serno[10];
-	const char *label = 0;
-	int label_len = 0;
+	const unsigned char *label = 0, *vol_label = 0;
+	unsigned char	*vol_serno;
+	int label_len = 0, maxloop = 100;
+	__u16 sector_size, dir_entries, reserved;
+	__u32 sect_count, fat_size, dir_size, cluster_count, fat_length;
+	__u32 buf_size, start_data_sect, next, root_start, root_dir_entries;
+	unsigned char *mybuf=NULL;
+
+	/* sector size check */
+	sector_size = blkid_le16(*((__u16 *) &ms->ms_sector_size));
+	if (sector_size != 0x200 && sector_size != 0x400 &&
+	    sector_size != 0x800 && sector_size != 0x1000)
+		return 1;
 
-	vs = (struct vfat_super_block *)buf;
+	dir_entries = blkid_le16(*((__u16 *) &ms->ms_dir_entries));
+	reserved =  blkid_le16(ms->ms_reserved);
+	sect_count = blkid_le16(*((__u16 *) &ms->ms_sectors));
+	if (sect_count == 0)
+		sect_count = blkid_le32(ms->ms_total_sect);
+
+	fat_length = blkid_le16(ms->ms_fat_length);
+	if (fat_length == 0)
+		fat_length = blkid_le32(vs->vs_fat32_length);
+
+	fat_size = fat_length * ms->ms_fats;
+	dir_size = ((dir_entries * sizeof(struct vfat_dir_entry)) +
+			(sector_size-1)) / sector_size;
 
-	if (strncmp(vs->vs_label, "NO NAME", 7)) {
-		char *end = vs->vs_label + sizeof(vs->vs_label) - 1;
+	cluster_count = sect_count - (reserved + fat_size + dir_size);
+	cluster_count /= ms->ms_cluster_size;
 
-		while (*end == ' ' && end >= vs->vs_label)
-			--end;
-		if (end >= vs->vs_label) {
-			label = vs->vs_label;
-			label_len = end - vs->vs_label + 1;
+	if (cluster_count > FAT32_MAX)
+		return 1;
+
+	if (ms->ms_fat_length) {
+		/* the label may be an attribute in the root directory */
+		root_start = (reserved + fat_size) * sector_size;
+		root_dir_entries = vs->vs_dir_entries[0] + 
+			(vs->vs_dir_entries[1] << 8);
+
+		buf_size = root_dir_entries * sizeof(struct vfat_dir_entry);
+		dir = (struct vfat_dir_entry *) get_buffer(fd, &mybuf, root_start, 
+																							 buf_size);
+		if (dir)
+			vol_label = search_fat_label(dir, root_dir_entries);
+
+		if (!vol_label || !memcmp(vol_label, no_name, 11))
+			vol_label = ms->ms_label;
+		vol_serno = ms->ms_serno;
+		blkid_set_tag(dev, "SEC_TYPE", "msdos", sizeof("msdos"));
+	} else {
+		/* Search the FAT32 root dir for the label attribute */
+		buf_size = vs->vs_cluster_size * sector_size;
+		start_data_sect = reserved + fat_size;
+
+		next = blkid_le32(vs->vs_root_cluster);
+		while (next && --maxloop) {
+			__u32 next_sect_off;
+			__u64 next_off, fat_entry_off;
+			int count;
+
+			next_sect_off = (next - 2) * vs->vs_cluster_size;
+			next_off = (start_data_sect + next_sect_off) * 
+				sector_size;
+
+			dir = (struct vfat_dir_entry *)get_buffer(fd, &mybuf, next_off, buf_size);
+			if (dir == NULL)
+				break;
+
+			count = buf_size / sizeof(struct vfat_dir_entry);
+
+			vol_label = search_fat_label(dir, count);
+
+
+			if (vol_label)
+				break;
+
+			/* get FAT entry */
+			fat_entry_off = (reserved * sector_size) + 
+				(next * sizeof(__u32));
+
+			buf = get_buffer(fd, &mybuf, fat_entry_off, buf_size);
+			if (buf == NULL)
+				break;
+
+			/* set next cluster */
+			next = blkid_le32(*((__u32 *) buf) & 0x0fffffff);
 		}
+
+		if (!vol_label || !memcmp(vol_label, no_name, 11))
+			vol_label = vs->vs_label;
+		vol_serno = vs->vs_serno;
+	}
+
+	if (vol_label && memcmp(vol_label, no_name, 11)) {
+		label = vol_label;
+		label_len = figure_label_len(vol_label, 11);
 	}
 
 	/* We can't just print them as %04X, because they are unaligned */
-	sprintf(serno, "%02X%02X-%02X%02X", vs->vs_serno[3], vs->vs_serno[2],
-		vs->vs_serno[1], vs->vs_serno[0]);
-	blkid_set_tag(dev, "LABEL", label, label_len);
-	blkid_set_tag(dev, "UUID", serno, sizeof(serno));
+	sprintf(serno, "%02X%02X-%02X%02X", vol_serno[3], vol_serno[2],
+		vol_serno[1], vol_serno[0]);
 
+	blkid_set_tag(dev, "LABEL", (const char *) label, label_len);
+	blkid_set_tag(dev, "UUID", serno, sizeof(serno)-1);
+	if (mybuf)
+		free(mybuf);
 	return 0;
 }
