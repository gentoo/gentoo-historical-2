Some odd reason usual import logging doesn't work; matches import of other modules in test_execute.py
diff -ur SQLAlchemy-0.7.9.orig/test/engine/test_execute.py SQLAlchemy-0.7.9/test/engine/test_execute.py
--- test/engine/test_execute.py	2012-10-02 06:33:29.000000000 +0800
+++ test/engine/test_execute.py	2013-02-26 16:13:44.923958389 +0800
@@ -9,7 +9,7 @@
 import sqlalchemy as tsa
 from test.lib import testing, engines
 from test.lib.engines import testing_engine
-import logging
+from logging import handlers, getLogger, DEBUG, INFO, WARN
 from sqlalchemy.dialects.oracle.zxjdbc import ReturningParam
 from sqlalchemy.engine import base, default
 from sqlalchemy.engine.base import Connection, Engine
@@ -542,18 +542,18 @@
     def setup(self):
         self.eng = engines.testing_engine(options={'echo':True})
         self.eng.execute("create table foo (data string)")
-        self.buf = logging.handlers.BufferingHandler(100)
+        self.buf = handlers.BufferingHandler(100)
         for log in [
-            logging.getLogger('sqlalchemy.engine'),
-            logging.getLogger('sqlalchemy.pool')
+            getLogger('sqlalchemy.engine'),
+            getLogger('sqlalchemy.pool')
         ]:
             log.addHandler(self.buf)
 
     def teardown(self):
         self.eng.execute("drop table foo")
         for log in [
-            logging.getLogger('sqlalchemy.engine'),
-            logging.getLogger('sqlalchemy.pool')
+            getLogger('sqlalchemy.engine'),
+            getLogger('sqlalchemy.pool')
         ]:
             log.removeHandler(self.buf)
 
@@ -646,17 +646,17 @@
         return engines.testing_engine(options=kw)
 
     def setup(self):
-        self.buf = logging.handlers.BufferingHandler(100)
+        self.buf = handlers.BufferingHandler(100)
         for log in [
-            logging.getLogger('sqlalchemy.engine'),
-            logging.getLogger('sqlalchemy.pool')
+            getLogger('sqlalchemy.engine'),
+            getLogger('sqlalchemy.pool')
         ]:
             log.addHandler(self.buf)
 
     def teardown(self):
         for log in [
-            logging.getLogger('sqlalchemy.engine'),
-            logging.getLogger('sqlalchemy.pool')
+            getLogger('sqlalchemy.engine'),
+            getLogger('sqlalchemy.pool')
         ]:
             log.removeHandler(self.buf)
 
@@ -703,14 +703,14 @@
     __requires__ = 'ad_hoc_engines',
 
     def setup(self):
-        self.level = logging.getLogger('sqlalchemy.engine').level
-        logging.getLogger('sqlalchemy.engine').setLevel(logging.WARN)
-        self.buf = logging.handlers.BufferingHandler(100)
-        logging.getLogger('sqlalchemy.engine').addHandler(self.buf)
+        self.level = getLogger('sqlalchemy.engine').level
+        getLogger('sqlalchemy.engine').setLevel(WARN)
+        self.buf = handlers.BufferingHandler(100)
+        getLogger('sqlalchemy.engine').addHandler(self.buf)
 
     def teardown(self):
-        logging.getLogger('sqlalchemy.engine').removeHandler(self.buf)
-        logging.getLogger('sqlalchemy.engine').setLevel(self.level)
+        getLogger('sqlalchemy.engine').removeHandler(self.buf)
+        getLogger('sqlalchemy.engine').setLevel(self.level)
 
     def testing_engine(self):
         e = engines.testing_engine()
@@ -727,26 +727,26 @@
 
         eq_(e1._should_log_info(), False)
         eq_(e1._should_log_debug(), False)
-        eq_(e1.logger.isEnabledFor(logging.INFO), False)
-        eq_(e1.logger.getEffectiveLevel(), logging.WARN)
+        eq_(e1.logger.isEnabledFor(INFO), False)
+        eq_(e1.logger.getEffectiveLevel(), WARN)
 
         e1.echo = True
         eq_(e1._should_log_info(), True)
         eq_(e1._should_log_debug(), False)
-        eq_(e1.logger.isEnabledFor(logging.INFO), True)
-        eq_(e1.logger.getEffectiveLevel(), logging.INFO)
+        eq_(e1.logger.isEnabledFor(INFO), True)
+        eq_(e1.logger.getEffectiveLevel(), INFO)
 
         e1.echo = 'debug'
         eq_(e1._should_log_info(), True)
         eq_(e1._should_log_debug(), True)
-        eq_(e1.logger.isEnabledFor(logging.DEBUG), True)
-        eq_(e1.logger.getEffectiveLevel(), logging.DEBUG)
+        eq_(e1.logger.isEnabledFor(DEBUG), True)
+        eq_(e1.logger.getEffectiveLevel(), DEBUG)
 
         e1.echo = False
         eq_(e1._should_log_info(), False)
         eq_(e1._should_log_debug(), False)
-        eq_(e1.logger.isEnabledFor(logging.INFO), False)
-        eq_(e1.logger.getEffectiveLevel(), logging.WARN)
+        eq_(e1.logger.isEnabledFor(INFO), False)
+        eq_(e1.logger.getEffectiveLevel(), WARN)
 
     def test_echo_flag_independence(self):
         """test the echo flag's independence to a specific engine."""
diff -ur SQLAlchemy-0.7.10.orig/lib/sqlalchemy/util/langhelpers.py SQLAlchemy-0.7.10/lib/sqlalchemy/util/langhelpers.py
--- lib/sqlalchemy/util/langhelpers.py	2013-02-08 08:10:48.000000000 +0800
+++ lib/sqlalchemy/util/langhelpers.py	2013-02-26 18:41:42.752032829 +0800
@@ -619,10 +619,19 @@
         if key == 'module':
             raise ImportError("Could not resolve module %s"
                                 % self._full_path)
-        try:
-            attr = getattr(self.module, key)
-        except AttributeError:
-            raise AttributeError(
+        if hasattr(sys, 'pypy_version_info'):
+            try:
+                attr = getattr(self.module, key)
+            except TypeError:
+                raise TypeError(
+                        "Module %s has no attribute '%s'" %
+                        (self._full_path, key)
+                    )
+        else:
+            try:
+                attr = getattr(self.module, key)
+            except AttributeError:
+                raise AttributeError(
                         "Module %s has no attribute '%s'" %
                         (self._full_path, key)
                     )
