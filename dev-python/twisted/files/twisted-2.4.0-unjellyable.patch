Index: twisted/test/test_jelly.py
===================================================================
--- twisted/test/test_jelly.py	(revision 17255)
+++ twisted/test/test_jelly.py	(revision 17256)
@@ -30,6 +30,23 @@
         def testDateTime(self):
             test_newjelly.JellyTestCase.testDateTime(self)
 
+    def testUnjellyable(self):
+        """
+        Test that if Unjellyable is used to deserialize a jellied object,
+        state comes out right.
+        """
+        class JellyableTestClass(jelly.Jellyable):
+            pass
+        jelly.setUnjellyableForClass(JellyableTestClass, jelly.Unjellyable)
+        input = JellyableTestClass()
+        input.attribute = 'value'
+        output = jelly.unjelly(jelly.jelly(input))
+        self.assertEquals(output.attribute, 'value')
+        self.failUnless(
+            isinstance(output, jelly.Unjellyable),
+            "Got instance of %r, not Unjellyable" % (output.__class__,))
+
+
     def testPersistentStorage(self):
         perst = [{}, 1]
         def persistentStore(obj, jel, perst = perst):
@@ -80,6 +97,3 @@
 
 class CircularReferenceTestCase(test_newjelly.CircularReferenceTestCase):
     jc = jelly
-
-
-testCases = [JellyTestCase, CircularReferenceTestCase]
Index: twisted/spread/jelly.py
===================================================================
--- twisted/spread/jelly.py	(revision 17255)
+++ twisted/spread/jelly.py	(revision 17256)
@@ -273,13 +273,15 @@
     Inherit from me to Jelly yourself directly with the `getStateFor'
     convenience method.
     """
+    implements(IJellyable)
 
-    implements(IJellyable)
-    
     def getStateFor(self, jellier):
         return self.__dict__
 
     def jellyFor(self, jellier):
+        """
+        @see L{twisted.spread.interfaces.IJellyable.jellyFor}
+        """
         sxp = jellier.prepare(self)
         sxp.extend([
             qual(self.__class__),
@@ -287,22 +289,29 @@
         return jellier.preserve(self, sxp)
 
 
+
 class Unjellyable:
     """
     Inherit from me to Unjelly yourself directly with the
     `setStateFor' convenience method.
     """
+    implements(IUnjellyable)
 
-    implements(IUnjellyable)
-    
     def setStateFor(self, unjellier, state):
         self.__dict__ = state
 
     def unjellyFor(self, unjellier, jellyList):
+        """
+        Perform the inverse operation of L{Jellyable.jellyFor}.
+
+        @see L{twisted.spread.interfaces.IUnjellyable.unjellyFor}
+        """
         state = unjellier.unjelly(jellyList[1])
         self.setStateFor(unjellier, state)
+        return self
 
 
+
 class _Jellier:
     """(Internal) This class manages state for a call to jelly()
     """
Index: twisted/spread/interfaces.py
===================================================================
--- twisted/spread/interfaces.py	(revision 17255)
+++ twisted/spread/interfaces.py	(revision 17256)
@@ -14,7 +14,15 @@
         """
 
 class IUnjellyable(Interface):
-    def unjellyFor(self, jellier):
+    def unjellyFor(self, jellier, jellyList):
         """
         Unjelly myself for the jellier.
+
+        @param jellier: A stateful object which exists for the lifetime of a
+        single call to L{unjelly}.
+
+        @param jellyList: The C{list} which represents the jellied state of the
+        object to be unjellied.
+
+        @return: The object which results from unjellying.
         """
