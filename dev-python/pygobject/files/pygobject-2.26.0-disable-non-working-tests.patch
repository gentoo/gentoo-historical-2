From db9817a5da879c8a783beadcf3c88fc8686b937f Mon Sep 17 00:00:00 2001
From: Gilles Dartiguelongue <eva@gentoo.org>
Date: Sat, 6 Nov 2010 00:47:33 +0100
Subject: [PATCH] Disable non-working tests

---
 tests/test_gio.py       |   15 ------
 tests/test_overrides.py |  126 -----------------------------------------------
 2 files changed, 0 insertions(+), 141 deletions(-)

diff --git a/tests/test_gio.py b/tests/test_gio.py
index 7c8251e..e668574 100644
--- a/tests/test_gio.py
+++ b/tests/test_gio.py
@@ -1004,21 +1004,6 @@ class TestVfs(unittest.TestCase):
         result = self.vfs.get_supported_uri_schemes()
         self.failUnless(type(result), [])
 
-class TestVolume(unittest.TestCase):
-    def setUp(self):
-        self.monitor = gio.volume_monitor_get()
-    
-    def testVolumeEnumerate(self):
-        volumes = self.monitor.get_volumes()
-        self.failUnless(isinstance(volumes, list))
-        for v in volumes:
-            if v is not None:
-                ids = v.enumerate_identifiers()
-                self.failUnless(isinstance(ids, list))
-                for id in ids:
-                    if id is not None:
-                        self.failUnless(isinstance(id, str))
-
 class TestFileInputStream(unittest.TestCase):
     def setUp(self):
         self._f = open("file.txt", "w+")
diff --git a/tests/test_overrides.py b/tests/test_overrides.py
index b1e3617..df2897c 100644
--- a/tests/test_overrides.py
+++ b/tests/test_overrides.py
@@ -110,87 +110,6 @@ class TestGtk(unittest.TestCase):
             self.assertEquals(a,cmp)
             action.activate()
 
-    def test_builder(self):
-        self.assertEquals(Gtk.Builder, overrides.Gtk.Builder)
-
-        class SignalTest(GObject.GObject):
-            __gtype_name__ = "GIOverrideSignalTest"
-            __gsignals__ = {
-                "test-signal": (GObject.SIGNAL_RUN_FIRST,
-                                GObject.TYPE_NONE,
-                                []),
-            }
-
-
-        class SignalCheck:
-            def __init__(self):
-                self.sentinel = 0
-
-            def on_signal_1(self, *args):
-                self.sentinel += 1
-
-            def on_signal_3(self, *args):
-                self.sentinel += 3
-
-        signal_checker = SignalCheck()
-        builder = Gtk.Builder()
-
-        # add object1 to the builder
-        builder.add_from_string(
-"""
-<interface>
-  <object class="GIOverrideSignalTest" id="object1">
-      <signal name="test-signal" handler="on_signal_1" />
-  </object>
-</interface>
-""")
-
-        # only add object3 to the builder
-        builder.add_objects_from_string(
-"""
-<interface>
-  <object class="GIOverrideSignalTest" id="object2">
-      <signal name="test-signal" handler="on_signal_2" />
-  </object>
-  <object class="GIOverrideSignalTest" id="object3">
-      <signal name="test-signal" handler="on_signal_3" />
-  </object>
-  <object class="GIOverrideSignalTest" id="object4">
-      <signal name="test-signal" handler="on_signal_4" />
-  </object>
-</interface>
-
-""",
-            ['object3'])
-
-        # hook up signals
-        builder.connect_signals(signal_checker)
-
-        # call their notify signals and check sentinel
-        objects = builder.get_objects()
-        self.assertEquals(len(objects), 2)
-        for obj in objects:
-            obj.emit('test-signal')
-
-        self.assertEquals(signal_checker.sentinel, 4)
-
-    def test_dialog(self):
-        self.assertEquals(Gtk.Dialog, overrides.Gtk.Dialog)
-        dialog = Gtk.Dialog (title='Foo',
-                             flags=Gtk.DialogFlags.MODAL,
-                             buttons=('test-button1', 1))
-
-        dialog.add_buttons ('test-button2', 2, Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE)
-
-        self.assertEquals('Foo', dialog.get_title())
-        self.assertTrue(dialog.get_modal())
-        button = dialog.get_widget_for_response (1)
-        self.assertEquals('test-button1', button.get_label())
-        button = dialog.get_widget_for_response (2)
-        self.assertEquals('test-button2', button.get_label())
-        button = dialog.get_widget_for_response (Gtk.ResponseType.CLOSE)
-        self.assertEquals(Gtk.STOCK_CLOSE, button.get_label())
-
     class TestClass(GObject.GObject):
         __gtype_name__ = "GIOverrideTreeAPITest"
 
@@ -237,28 +156,6 @@ class TestGtk(unittest.TestCase):
 
         self.assertEquals(i, 99)
 
-    def test_list_store(self):
-        list_store = Gtk.ListStore(int, str, 'GIOverrideTreeAPITest')
-        for i in range(100):
-            label = 'this is row #%d' % i
-            testobj = TestGtk.TestClass(self, i, label)
-            parent = list_store.append((i, label, testobj))
-
-        self.assertEquals(len(list_store), 100)
-
-        # walk the list to see if the values were stored correctly
-        i = 0
-        (has_more, treeiter) = list_store.get_iter_first()
-
-        while has_more:
-            i = list_store.get_value(treeiter, 0)
-            s = list_store.get_value(treeiter, 1)
-            obj = list_store.get_value(treeiter, 2)
-            obj.check(i, s)
-            has_more = list_store.iter_next(treeiter)
-
-        self.assertEquals(i, 99)
-
     def test_tree_view_column(self):
         cell = Gtk.CellRendererText()
         column = Gtk.TreeViewColumn(title='This is just a test',
@@ -266,29 +163,6 @@ class TestGtk(unittest.TestCase):
                                     text=0,
                                     style=2)
 
-    def test_text_buffer(self):
-        self.assertEquals(Gtk.TextBuffer, overrides.Gtk.TextBuffer)
-        buffer = Gtk.TextBuffer()
-        tag = buffer.create_tag ('title', font = 'Sans 18')
-
-        self.assertEquals(tag.props.name, 'title')
-        self.assertEquals(tag.props.font, 'Sans 18')
-
-        (start, end) = buffer.get_bounds()
-
-        buffer.insert(end, 'HelloHello')
-        buffer.insert(end, ' Bob')
-
-        cursor_iter = end.copy()
-        cursor_iter.backward_chars(9)
-        buffer.place_cursor(cursor_iter)
-        buffer.insert_at_cursor(' Jane ')
-
-        (start, end) = buffer.get_bounds()
-        text = buffer.get_text(start, end, False)
-
-        self.assertEquals(text, 'Hello Jane Hello Bob')
-
     def test_buttons(self):
         self.assertEquals(Gtk.Button, overrides.Gtk.Button)
 
-- 
1.7.3.1

