From 5a0a628021357bf37cccbcc401e07dc99e9415ee Mon Sep 17 00:00:00 2001
From: Ralf Schmitt <ralf@systemexit.de>
Date: Fri, 3 May 2013 21:48:03 +0200
Subject: [PATCH] fix segfaults when using gcc 4.8 on amd64/x86 unix

I'm just porting the aarch64 stuff committed recently.
---
 platform/switch_amd64_unix.h | 14 +++++++++++++-
 platform/switch_x86_unix.h   | 15 ++++++++++++++-
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/platform/switch_amd64_unix.h b/platform/switch_amd64_unix.h
index 3ed0a16..05b34b6 100644
--- a/platform/switch_amd64_unix.h
+++ b/platform/switch_amd64_unix.h
@@ -2,6 +2,9 @@
  * this is the internal transfer function.
  *
  * HISTORY
+ * 3-May-13   Ralf Schmitt  <ralf@systemexit.de>
+ *     Add support for strange GCC caller-save decisions
+ *     (ported from switch_aarch64_gcc.h)
  * 18-Aug-11  Alexey Borzenkov  <snaury@gmail.com>
  *      Correctly save rbp, csr and cw
  * 01-Apr-04  Hye-Shik Chang    <perky@FreeBSD.org>
@@ -33,10 +36,18 @@
 
 #define REGS_TO_SAVE "r12", "r13", "r14", "r15"
 
+/* See switch_aarch64_gcc.h for the purpose of this function  */
+__attribute__((noinline, noclone)) int fancy_return_zero(void);
+__attribute__((noinline, noclone)) int
+fancy_return_zero(void)
+{
+  return 0;
+}
 
 static int
 slp_switch(void)
 {
+    int err = 0;
     void* rbp;
     void* rbx;
     unsigned int csr;
@@ -57,13 +68,14 @@ slp_switch(void)
             : "r" (stsizediff)
             );
         SLP_RESTORE_STATE();
+        err = fancy_return_zero();
     }
     __asm__ volatile ("movq %0, %%rbx" : : "m" (rbx));
     __asm__ volatile ("movq %0, %%rbp" : : "m" (rbp));
     __asm__ volatile ("ldmxcsr %0" : : "m" (csr));
     __asm__ volatile ("fldcw %0" : : "m" (cw));
     __asm__ volatile ("" : : : REGS_TO_SAVE);
-    return 0;
+    return err;
 }
 
 #endif
diff --git a/platform/switch_x86_unix.h b/platform/switch_x86_unix.h
index 0d42a67..e66633e 100644
--- a/platform/switch_x86_unix.h
+++ b/platform/switch_x86_unix.h
@@ -2,6 +2,9 @@
  * this is the internal transfer function.
  *
  * HISTORY
+ * 3-May-13   Ralf Schmitt  <ralf@systemexit.de>
+ *     Add support for strange GCC caller-save decisions
+ *     (ported from switch_aarch64_gcc.h)
  * 19-Aug-11  Alexey Borzenkov  <snaury@gmail.com>
  *      Correctly save ebp, ebx and cw
  * 07-Sep-05 (py-dev mailing list discussion)
@@ -33,9 +36,18 @@
 /* the above works fine with gcc 2.96, but 2.95.3 wants this */
 #define STACK_MAGIC 0
 
+/* See below for the purpose of this function.  */
+__attribute__((noinline, noclone)) int fancy_return_zero(void);
+__attribute__((noinline, noclone)) int
+fancy_return_zero(void)
+{
+  return 0;
+}
+
 static int
 slp_switch(void)
 {
+    int err = 0;
 #ifdef _WIN32
     void *seh;
 #endif
@@ -64,6 +76,7 @@ slp_switch(void)
             : "r" (stsizediff)
             );
         SLP_RESTORE_STATE();
+        err = fancy_return_zero();
     }
 #ifdef _WIN32
     __asm__ volatile (
@@ -77,7 +90,7 @@ slp_switch(void)
     __asm__ volatile ("movl %0, %%ebp" : : "m" (ebp));
     __asm__ volatile ("fldcw %0" : : "m" (cw));
     __asm__ volatile ("" : : : "esi", "edi");
-    return 0;
+    return err;
 }
 
 #endif
-- 
1.8.2.1

--- b/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 #! /usr/bin/env python
 
-import sys, os, glob, platform
+import sys, os, glob, platform, tempfile, shutil
 
 # workaround segfaults on openbsd and RHEL 3 / CentOS 3 . see
 # https://bitbucket.org/ambroff/greenlet/issue/11/segfault-on-openbsd-i386
@@ -54,10 +54,33 @@
         extra_objects=extra_objects,
         depends=['greenlet.h', 'slp_platformselect.h'] + _find_platform_headers())]
 
-from my_build_ext import build_ext
-
+from my_build_ext import build_ext as _build_ext
 from distutils.core import Command
 
+
+class build_ext(_build_ext):
+    def configure_compiler(self):
+        compiler = self.compiler
+        if compiler.__class__.__name__ != "UnixCCompiler":
+            return
+
+        compiler.compiler_so += ["-fno-tree-dominator-opts"]
+        tmpdir = tempfile.mkdtemp()
+
+        try:
+            simple_c = os.path.join(tmpdir, "simple.c")
+            open(simple_c, "w").write("void foo(){}")
+            compiler.compile([simple_c], output_dir=tmpdir)
+        except Exception:
+            del compiler.compiler_so[-1]
+
+        shutil.rmtree(tmpdir)
+
+    def build_extensions(self):
+        self.configure_compiler()
+        _build_ext.build_extensions(self)
+
+
 class fixup(Command):
     user_options = []
     description = "prevent duplicate uploads and upload for the wrong architecture"
