#!/usr/bin/perl -w
#
# echangelog: Update the ChangeLog for an ebuild.  For example:
#
#   $ echangelog 'Add ~alpha to KEYWORDS'
#   4a5,7
#   >   10 Feb 2003; Aron Griffis <agriffis@gentoo.org> oaf-0.6.8-r1.ebuild :
#   >   Add ~alpha to KEYWORDS
#   >

use strict;
use POSIX qw(strftime getcwd);
use Text::Wrap;

my @files = ();
my ($entry, $user, $date, $text, $version);
my %versions = ();

# Read the current ChangeLog
if (-f 'ChangeLog') {
    open I, '<ChangeLog' or die "Can't open ChangeLog for input: $!\n";
    { local $/ = undef; $text = <I>; }
    close I;
} else {
    # No ChangeLog here, maybe we should make one...
    if (<*.ebuild>) {
        open I, '<../../skel.ChangeLog' 
            or die "Can't open ../../skel.ChangeLog for input: $!\n";
        { local $/ = undef; $text = <I>; }
        close I;
        my ($cwd) = getcwd();
        $cwd =~ m|.*/(\w+-\w+)/([^/]+)| 
            or die "Can't figure out category/package.. sorry!\n";
        my ($category, $package_name) = ($1, $2);
        $text =~ s/^\*.*//ms;   # don't need the fake entry
        $text =~ s/<CATEGORY>/$category/;
        $text =~ s/<PACKAGE_NAME>/$package_name/;
        # Okay, now we have a starter ChangeLog to work with.
        # The entry will be added just like with any other ChangeLog.
    } else {
        die "This should be run in a directory with ebuilds...\n";
    }
}

# Figure out what has changed around here
open C, 'cvs diff --brief 2>&1 |' or die "Can't run cvs diff: $!\n";
while (<C>) {
    /ChangeLog/ and next;
    if (/^cvs server: (\S+) .*new entry/ || /^Index: (\S+)/) {
        push @files, $1;
        if ($1 =~ /^([^\/]*?)\.ebuild$/) {
            $versions{$1} = -1;
        }
    }
}
close C;
die "No changed files found (did you forget to cvs add?)\n" unless @files;

# Get the entry from the cmdline or stdin
if ($ARGV[0]) {
    $entry = "@ARGV";
} else {
    local $/ = undef;
    print "Please type the log entry, finish with ctrl-d\n";
    $entry = <>;
}
die "Empty entry; aborting\n" unless $entry =~ /\S/;

# If there are any long lines, then wrap the entry at 76 chars
# (leaving 2 chars on each end after adding indentation below).
if ($entry =~ /^.{77}/m) {
    local $Text::Wrap::columns = 76;
    local $Text::Wrap::unexpand = 0;
    $entry = Text::Wrap::fill('', '', $entry);
}

# Prepend the user info to the entry
$user = $ENV{'ECHANGELOG_USER'} ||
        sprintf("%s <%s\@gentoo.org>", (getpwuid($<))[6,0]);
$date = strftime("%d %b %Y", localtime);
$entry =~ s/^\s*(.*?)\s*\z/$1/s; # trim whitespace
$entry = "$date; $user @files :\n$entry";
$entry =~ s/^/  /gm;             # add indentation

# Find the version that's highest in the file (or determine if we're
# adding a new version).
if (%versions) {
    for (keys %versions) {
        $versions{$_} = index $text, $_;
    }
    $version = (sort { $versions{$a} <=> $versions{$b} } keys %versions)[0];
}

if (!defined $version) {
    # Changing a patch or something, not an ebuild, so put the entry
    # after the first *version line
	$text =~ s/^\*.*\n/$&\n$entry\n/m
        or die "Failed to insert new entry (1)\n";
	# If we were putting it at the top of the file, the following
	# regex would work well.
	# $text =~ s/^.*?\n(?=\s)/$&\n$entry\n/s;
} elsif ($versions{$version} > -1) {
    # Insert after the *version line
    # Sometimes the version line includes . or even .ebuild
    $text =~ s/^\*\Q$version\E\.?(?:ebuild)?\s.*\n/$&\n$entry\n/m 
        or die "Failed to insert new entry (2)\n";
} else {
    # Insert at the top with a new version marker
    $text =~ s/^.*?\n(?=\s)/$&\n*$version ($date)\n\n$entry\n/s
        or die "Failed to insert new entry (3)\n";
}

# Write the new ChangeLog
open O, '>ChangeLog.new' or die "Can't open ChangeLog.new for output: $!\n";
print O $text            or die "Can't write ChangeLog.new: $!\n";
close O                  or die "Can't close ChangeLog.new: $!\n";

# Move things around
system 'diff -Nu ChangeLog ChangeLog.new';
rename 'ChangeLog.new', 'ChangeLog' or die "Can't rename: $!\n";
