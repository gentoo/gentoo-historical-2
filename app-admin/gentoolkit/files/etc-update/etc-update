#!/bin/bash
# Copyright 2002 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU Public License, v2 or later
# Author Brandon Low <lostlogic@gentoo.org>
#
# Previous version (from which I've borrowed a few bits) by:
# Jochem Kossen <j.kossen@home.nl>
# Leo Lipelis <aeoo@gentoo.org>
# Karl Trygve Kalleberg <karltk@gentoo.org>
#
# $Header: /var/cvsroot/gentoo-x86/app-admin/gentoolkit/files/etc-update/etc-update,v 1.7 2002/06/26 16:56:13 lostlogic Exp $

function get_config() {
	item=$1

	# First strip off comment lines, then grab the configuration
	# item. If there's more than one of the same configuration item,
	# then allow the last setting to take precedence.
	cut -d'#' -f1-1 /etc/etc-update.conf | \
		sed -ne "s/^\ *$item\ *=\ *\"\(.*\)\"/\1/p" | tail -1
}

function scan() {

	echo "Scanning Configuration files..."
	rm -rf ${TMP}/files > /dev/null 2>&1
	mkdir ${TMP}/files || die "Failed mkdir command!" 1
	count=0
	input=0
	
	for path in ${CONFIG_PROTECT}; do if [ -d ${path} ]; then
		ofile=""
		for file in `find ${path} -iname "._cfg????_*" |
			   sed -e "s:\(^.*/\)\(._cfg*_\)\(/.*$\):\1\2\3\%\2\%\3:" |
			   sort -t'%' -k3 -k2 | cut -f1 -d'%'`; do
			rpath=`echo "${file}" | sed -e "s:/[^/]*$::"`
			rfile=`echo "${file}" | sed -e "s:^.*/::"`
			if [[ "${ofile:10}" != "${rfile:10}" ]] || [[ ${opath} != ${rpath} ]]; then
				if [[ -z `diff -Nua ${rpath}/${rfile} ${rpath}/${rfile:10}|
						  grep "^[+-][^+-]"|grep -v '# $Header: /var/cvsroot/gentoo-x86/app-admin/gentoolkit/files/etc-update/etc-update,v 1.7 2002/06/26 16:56:13 lostlogic Exp $'` ]]; then
					mv ${rpath}/${rfile} ${rpath}/${rfile:10}
					continue
				else
					count=${count}+1
					echo "${rpath}/${rfile:10}" > ${TMP}/files/${count}
					echo "${rpath}/${rfile}" >> ${TMP}/files/${count}
			    	ofile="${rfile}"
					opath="${rpath}"
					continue
				fi
			fi
			if [[ -z `diff -Nua ${rpath}/${rfile} ${rpath}/${ofile}|
					  grep "^[+-][^+-]"|grep -v '# $Header: /var/cvsroot/gentoo-x86/app-admin/gentoolkit/files/etc-update/etc-update,v 1.7 2002/06/26 16:56:13 lostlogic Exp $'` ]]; then
				mv ${rpath}/${rfile} ${rpath}/${ofile}
				continue
			else
				echo "${rpath}/${rfile}" >> ${TMP}/files/${count}
				ofile="${rfile}"
				opath="${rpath}"
			fi
		done
	fi; done

}

function sel_file() {
#	[ ! -z `ls ${TMP}/files` ] && \
	until [ -f ${TMP}/files/${input} ] || [ ${input} == -1 ]; do
		echo "The following is the list of files which need updating, each 
configuration file is followed by a list of possible replacement files."
		for file in `ls ${TMP}/files|sort -n`; do
			    echo -n "${file}) "
		    for word in `cat ${TMP}/files/${file}`; do
				echo ${word}
			done
		done
		echo -n "Please select a file to edit by entering the corresponding number (-1 to exit): "
		read input
	done
}

function do_file() {
	echo
	local -i my_input
	local -i fcount
	until (( `cat ${TMP}/files/${input}|wc -l` < 2 )); do
		my_input=0
		(( `cat ${TMP}/files/${input}|wc -l` == 2 )) && my_input=1
		until (( ${my_input} > 0 )) && \
			  (( ${my_input} < `cat ${TMP}/files/${input}|wc -l` )); do
			fcount=0
			for line in `cat ${TMP}/files/${input}`; do
				if (( ${fcount} > 0 )); then
					echo -n "${fcount}) "
					echo "${line}"
				else
					echo "Below are the new config files for ${line}:"
				fi
				fcount=${fcount}+1
			done
			echo -n "Please enter the number of the file to process (-1 to exit this file): "
			read my_input
			[ ${my_input} == -1 ] && break
		done
		[ ${my_input} == -1 ] && break

		fcount=${my_input}+1

		file=`cat ${TMP}/files/${input} | sed -e "${fcount}p;d"`
		ofile=`head -n1 ${TMP}/files/${input}`

		do_cfg "${file}" "${ofile}"

		cat ${TMP}/files/${input}|sed -e "${fcount}!p;d" > ${TMP}/files/sed
		mv ${TMP}/files/sed ${TMP}/files/${input}

		[ ${my_input} == -1 ] && break
	done
	echo
	rm ${TMP}/files/${input}
	count=${count}-1
}

function do_cfg() {
	
	local file="${1}"
	local ofile="${2}"
	local -i my_input=0
	
	until (( ${my_input} == -1 )); do
		( echo "Showing differences between ${file} and ${ofile}"
		  `echo "${diff_command}" |
		   sed -e "s:%file1:${ofile}:" \
			   -e "s:%file2:${file}:"` ) | ${pager}
		echo -n "1) Replace ${ofile} with ${file}
2) Delete ${file}, keeping ${ofile} as is
3) Interactively merge ${ofile} with ${file}
4) Show differences again
Please select from the menu above (-1 to exit, ignoring this updated file):"
		read my_input
		case ${my_input} in
			1) echo "Replacing ${ofile} with ${file}"
			   mv ${mv_opts} ${file} ${ofile}
			   break
			   ;;
			2) echo "Deleting ${file}"
			   rm ${rm_opts} ${file}
			   break
			   ;;
			3) do_merge "${file}" "${ofile}"
			   my_input=${?}
			   [ ${my_input} == 255 ] && my_input=-1
			   ;;
			4) continue
			   ;;
			*) continue
			   ;;
		esac
	done
}

function do_merge() {
	
	local file="${1}"
	local ofile="${2}"
	local mfile="${2}.merged"
	local -i my_input=0
	echo "${file} ${ofile} ${mfile}"

	if [ -e ${mfile} ] ; then
		echo "A previous version of the merged file exists, cleaning..."
		rm ${rm_opts} ${mfile}
	fi

	until (( ${my_input} == -1 )); do
		echo "Merging ${file} and ${ofile}"
		`echo "${merge_command}" |
		 sed -e "s:%merged:${mfile}:g" \
		 	 -e "s:%orig:${ofile}:g" \
			 -e "s:%new:${file}:g"`
		until (( ${my_input} == -1 )); do	
			echo -n "1) Replace ${ofile} with merged file
2) Show differences between merged file and ${ofile}
3) Remerge ${ofile} with ${file}
4) Return to the previous menu
Please select from the menu above (-1 to exit, ignoring ${file}): "
			read my_input
			case ${my_input} in
				1) echo "Replacing ${ofile} with ${mfile}"
				   mv ${mv_opts} ${mfile} ${ofile}
				   rm ${rm_opts} ${file}
				   return 255
				   ;;
				2) ( echo "Showing differences between ${mfile} and ${ofile}"
					 `echo "${diff_command}" | \
					  sed -e "s:%file1:${ofile}:" \
					  	  -e "s:%file2:${mfile}:"` ) | ${pager}
				   continue
				   ;;
				3) break
				   ;;
				4) rm ${rm_opts} ${mfile}
				   return 0
				   ;;
				*) continue
				   ;;
			esac
		done
	done
	return 255
}

function die() {
	trap "" term
	trap "" kill
	echo "Exiting: ${1}"
	rm -rf ${TMP}
	exit ${2}
}

#
# Run the script
#
scriptname=`basename $0`

trap die term

TMP=/tmp/$$
rm -rf ${TMP} 2> /dev/null
mkdir ${TMP} || die "failed mkdir command!" 1

# I need the CONFIG_PROTECT value
source /etc/make.globals

# load etc-config's configuration
rm_opts=`get_config rm_opts`
mv_opts=`get_config mv_opts`
cp_opts=`get_config cp_opts`
pager=`get_config pager`
diff_command=`get_config diff_command`
merge_command=`get_config merge_command`
[ -z ${pager} ] && pager="cat"

#echo "rm_opts: $rm_opts, mv_opts: $mv_opts, cp_opts: $cp_opts"
#echo "pager: $pager, diff_command: $diff_command, merge_command: $merge_command" 

declare -i count=0
declare -i input=0

scan

until (( ${input} == -1 )); do
	[ ${count} == 0 ] && die "No files to work on!" 0
	sel_file
	[ ${input} != -1 ] && do_file
done

die "User termination!" 0
