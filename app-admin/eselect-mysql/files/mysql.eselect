# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: mysql.eselect,v 1.4 2006/01/08 23:41:42 vivo Exp $

DESCRIPTION="Manage the /usr/lib/*mysql* links"
MAINTAINER="vivo@gentoo.org"
SVN_DATE='$Date: 2006/01/08 23:41:42 $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
MYSQL_SYMLINK_CHECKDIR="${ROOT}/usr/sbin"
ERR_NOT_FOUND="(not-found)"
# "unset" is grepped by the MySQL ebuild so don't touch it
ERR_UNSET="(unset)"

# return a human oriented version
#
# $1 - version to transform
function version4human() {
	local major=${1:0:1}
	local minor=${1:1:2}
	[[ ${minor:0:1} == "0" ]] && minor=${minor:1:1}
	echo "${major}.${minor}.x"
}

# return a integer version
#
# $1 - version to transform

function version4bash() {
	local minor=${1#*.}
	minor=${minor%%.x*}
	[[ ${#minor} -eq 1 ]] && minor="0${minor}"
	echo "${1%%.*}${minor}"
}

# Return the versions currently installed
find_versions() {
	local versions list
	# "eselect mysql set 1" will always set the best version
	list=${MYSQL_SYMLINK_CHECKDIR}/mysqld-*
	[[ ${list##/} == mysqld-* ]] && return
	for x in ${MYSQL_SYMLINK_CHECKDIR}/mysqld-* ; do
		versions=( $(version4human ${x##*-}) ${versions[@]} )
	done
	echo ${versions[@]}
}

# Check if a symlink could be created for a specific file
#
# $1 - original file name
# $2 - MySQL version
check_symlink() {
	local filename=${1}
	local version=${2}
	local linkname=${filename/"-${version}"/}
	local ret=0

	[[ -z ${filename} ]] || [[ -z ${version} ]] && return 1

	# check link source
	[[ -f ${filename} ]] || [[ -d ${filename} ]] || ret=$(( ${ret} + 1 ))

	# check link targe
	# not checking for directory (want to keep "/etc/mysql")
	[[ -a ${linkname} ]] && [[ ! -L ${linkname} ]] && [[ ! -d ${linkname} ]] \
		&& ret=$(( ${ret} +2 ))

	return ${ret}
}

# work out which MYSQL version the user has chosen from the list
#
# $1: the list id that the user has chosen
get_version_fromlist() {
	local version=${1}
	local -a versions=( $(find_versions) )
	
	if is_number ${version} ; then
		if [[ ${version} -gt 0 ]] && [[ ${version} -le ${#versions[@]} ]] ; then
			version=${versions[(( ${version} - 1 ))]}
			echo "${version}"
			return
		fi
	fi

	for (( i = 0 ; i < ${#versions[@]} ; i = i + 1 )) ; do
		[[ ${versions[$i]} == ${version} ]] || continue
			echo ${version}
			return
	done

	echo "${ERR_NOT_FOUND}"
}

get_current_version() {
	link=$(readlink ${MYSQL_SYMLINK_CHECKDIR}/mysqld)
	version=${link##*-}

	if ! is_number "${version}" || [[ "${version}" == "" ]] ; then
		version="${ERR_UNSET}"
		echo "${version}"
	else
		echo $(version4human "${version}")
	fi
}

set_current_version() {

	local version=${1}
	is_number "${version}" || die -q "No usable version: ${version}"
	local CWD=$(pwd)
	local lastdir dir linkname
	local list=$(< $ROOT/var/lib/eselect/mysql/mysql-${version}.filelist )

	# perform a check on the entire file lis
	for filename in $list ; do
		dir="${ROOT}/$(dirname "${filename}")"
		if [[ "${dir}" != "${lastdir}" ]] ; then
			cd "${dir}"
			lastdir="${dir}"
		fi
		check_symlink "$(basename "${filename}")" "${version}"
		ret=$?
		if [[ $ret -ne 0 ]] ; then
			cd "${CWD}"
			die -q \
			"File \"${ROOT}/${filename}\" is not suitable for symlink (${ret})"
		fi
	done

	# it's ok to do the effective work now
	for filename in $list ; do
		dir="${ROOT}/$(dirname "${filename}")"
		if [[ "${dir}" != "${lastdir}" ]] ; then
			cd "${dir}"
			lastdir="${dir}"
		fi
		linkname="$(basename "${filename}")"
		if [[ -a "${linkname}" ]] ; then
			# rm needed for directory
			rm -f "${linkname/"-${version}"/}" &> /dev/null
			ln -sf "${linkname}" "${linkname/"-${version}"/}"
			[[ ! -L "${linkname/"-${version}"/}" ]] \
			&& write_warning_msg "FAILED: cd \"${dir}\" && ln -sf \"${linkname}\" \"${linkname/"-${version}"/}\""
		fi
	done

	cd "${CWD}"
}

remove_current_version() {

	local version=${1}
	is_number "${version}" || die -q "No usable version: ${version}"
	local CWD=$(pwd)
	local lastdir dir linkname
	local list=$(< $ROOT/var/lib/eselect/mysql/mysql-${version}.filelist )
	
	for filename in $list ; do
		linkname="${ROOT}/${filename/"-${version}"/}"
		[[ -L "${linkname}" ]] && rm -f "${linkname}"
	done

	cd "${CWD}"
}

### show action ###

describe_show() {
	echo "Show the current default version for MySQL"
}

do_show() {
	write_list_start "Current default MySQL version:"
	version=$(get_current_version)
	write_kv_list_entry "$version" ""
}

### list action ###

describe_list() {
	echo "List available MySQL versions to link to"
}

do_list() {
	versions=( $(find_versions) )
	current=$(get_current_version)
	
	write_list_start "Available MySQL versions:"

	if [[ -n "${versions[@]}" ]] ; then
		local i
		for (( i = 0 ; i < ${#versions[@]} ; i = i + 1 )) ; do
			[[ ${versions[${i}]} == ${current} ]] && \
				versions[${i}]="${versions[${i}]} $(highlight '*' )"
		done
		write_numbered_list "${versions[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set MYSQL version used"
}

do_set() {
	[[ ${#@} -lt 1 ]] &&
		die -q "Wrong count of paramters."
	local version
	version=$(get_version_fromlist ${1})

	if [[ ${version} == "${ERR_NOT_FOUND}" ]] ; then
		die -q "I don't recognise that version of MYSQL"
	fi

	set_current_version "$(version4bash "${version}")"
}

### remove action ###

describe_remove() {
	echo "Remove symlinks of the default server"
}

do_remove() {

	local version=$(readlink "${MYSQL_SYMLINK_CHECKDIR}/mysqld")
	version=$(version4human "${version##*-}")

	if [[ -z "${version}" ]] ; then
		die -q "No symlinks found"
	fi

	remove_current_version "$(version4bash "${version}")"
}

# vim: set ft=eselect :
