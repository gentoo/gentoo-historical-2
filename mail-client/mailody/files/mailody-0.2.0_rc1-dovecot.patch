Index: mailody/mailody/src/imap.cpp
===================================================================
--- mailody/mailody/src/imap.cpp        (revision 604932)
+++ mailody/mailody/src/imap.cpp        (working copy)
@@ -392,51 +392,72 @@
         //|* 1 FETCH (UID 1 BODY[HEADER.FIELDS ("FROM" "SUBJECT" "DATE")] {148}|
         // Cyrus:
         //|* 1 FETCH (UID 26133 BODY[HEADER.FIELDS (FROM SUBJECT DATE)] {139}|
+        // Dovecot:
+        //|* 1 FETCH (RFC822.SIZE 8609 UID 2 BODY[HEADER.FIELDS (FROM TO CC SUBJECT DATE IN-REPLY-TO MESSAGE-ID)] {337}

-        QRegExp rx;
+        QRegExp rx0;
+        QRegExp rx1;
+        QRegExp rx2;
         if (m_currentQueueItem.state() == Queue::GetHeaders)
-            rx.setPattern("UID (\\d*) RFC822.SIZE (\\d*)"
-                    + QRegExp::escape(" BODY[HEADER.FIELDS ")
+        {
+            rx0.setPattern("UID (\\d*) ");
+            rx1.setPattern("RFC822.SIZE (\\d*) ");
+            rx2.setPattern( QRegExp::escape(" BODY[HEADER.FIELDS ")
                     + "\\(\"?FROM\"? \"?TO\"? \"?CC\"? "
                     + "\"?SUBJECT\"? \"?DATE\"? \"?IN-REPLY-TO\"? "
                     + "\"?MESSAGE-ID\"?\\)\\] "
                     + QRegExp::escape("{") + "(\\d*)" + QRegExp::escape("}"));
+        }
         else
-            rx.setPattern("UID (\\d*)" + QRegExp::escape(" BODY[] ")
+        {
+            rx0.setPattern("UID (\\d*)");
+            rx2.setPattern(QRegExp::escape(" BODY[] ")
                     + QRegExp::escape("{") + "(\\d*)" + QRegExp::escape("}"));
+        }

         m_db->beginTransaction();
         QString r = received;
         QStringList headersToSend;
-        while (rx.search(r.stripWhiteSpace()) != -1)
+
+        while (rx0.search(r.stripWhiteSpace()) != -1)
         {
-            int uid = rx.cap(1).toInt();

+            if ( rx2.search(r.stripWhiteSpace()) == -1)
+            {
+                emit statusError(i18n("Retrieving failed"));
+                return;
+            }
+
+            int uid = rx0.cap(1).toInt();
+
             QString size;
-            int expectedLength;
-            if (m_currentQueueItem.state() == Queue::GetHeaders)
+            if (m_currentQueueItem.state() == Queue::GetHeaders &&
+                rx1.search(r.stripWhiteSpace()) != -1)
             {
-                size = "Size: " + rx.cap(2);
-                expectedLength = rx.cap(3).toInt();
+                size = "Size: " + rx1.cap(1);
             }
-            else
-                expectedLength = rx.cap(2).toInt();

+            int expectedLength = rx2.cap(1).toInt();
+
             int i = r.find("}")+1;
             QString text = r.mid(i, expectedLength);

             if (m_currentQueueItem.state() == Queue::GetHeaders)
             {
-                text += size;
+                text.append("\r\n");
+                text.append(size);
                 // kdDebug() << "UID: " << uid
-                //   << " mb: " << m_currentQueueItem.mailbox()
-                //   << "text" << text
-                //   << endl;
+                //        << " mb: " << m_currentQueueItem.mailbox()
+                //        << " size: " << size
+                //        << " expect: " << expectedLength
+                //        << " found: " << i
+                //        << " text: " << text
+                //        << endl;

-                headersToSend.append(rx.cap(1));
+                headersToSend.append(rx0.cap(1));
                 headersToSend.append(m_currentQueueItem.mailbox());
                 headersToSend.append(text);
-                headersToSend.append(m_db->getFlags(rx.cap(1).toInt(),
+                headersToSend.append(m_db->getFlags(uid,
                                      m_currentQueueItem.mailbox()));

                 if (text.isEmpty())