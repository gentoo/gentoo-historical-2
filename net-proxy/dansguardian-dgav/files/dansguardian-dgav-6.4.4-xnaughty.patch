diff -Nru dansguardian-2.8.0.6.orig/ConnectionHandler.cpp dansguardian-2.8.0.6/ConnectionHandler.cpp
--- dansguardian-2.8.0.6.orig/ConnectionHandler.cpp	2006-04-01 23:27:00.000000000 +0300
+++ dansguardian-2.8.0.6/ConnectionHandler.cpp	2006-04-01 23:37:11.378162000 +0300
@@ -1738,6 +1738,11 @@
       {                         // stealth
         (*checkme).isItNaughty = false; // dont block
       }
+    else if (o.reporting_level == -2)
+      { // just add a header
+        (*docheader).addXNaughty("true", (*checkme).whatIsNaughty.c_str(), (*url).toCharArray());
+        (*checkme).isItNaughty = false;  // dont block
+      }
   }
   catch (exception & e)
   {
diff -Nru dansguardian-2.8.0.6.orig/HTTPHeader.cpp dansguardian-2.8.0.6/HTTPHeader.cpp
--- dansguardian-2.8.0.6.orig/HTTPHeader.cpp	2006-04-01 23:27:00.000000000 +0300
+++ dansguardian-2.8.0.6/HTTPHeader.cpp	2006-04-01 23:33:23.779938000 +0300
@@ -763,6 +763,19 @@
 }
 
 void
+HTTPHeader::addXNaughty(std::string naughty, std::string whatIsNaughty, std::string whereIsNaughty)
+{
+  std::string line;
+
+  line = "X-Naughty: " + naughty + "\r";
+  header.push_back(String(line.c_str()));
+  line = "X-Naughty-Why: " + whatIsNaughty + "\r";
+  header.push_back(String(line.c_str()));
+  line = "X-Naughty-Where: " + whereIsNaughty + "\r";
+  header.push_back(String(line.c_str()));
+}
+
+void
 HTTPHeader::setTimeout (int t)
 {
   timeout = t;
diff -Nru dansguardian-2.8.0.6.orig/HTTPHeader.hpp dansguardian-2.8.0.6/HTTPHeader.hpp
--- dansguardian-2.8.0.6.orig/HTTPHeader.hpp	2006-04-01 23:27:00.000000000 +0300
+++ dansguardian-2.8.0.6/HTTPHeader.hpp	2006-04-01 23:34:12.766999500 +0300
@@ -43,6 +43,7 @@
     std::string getXForwardedForIP ();
   void setTimeout (int t);
   void addXForwardedFor (std::string clientip);
+  void addXNaughty (std::string naughty, std::string whatIsNaughty, std::string whereIsNaughty);
   bool isCompressed ();
   String contentEncoding ();
   void removeEncoding (int newlen);
