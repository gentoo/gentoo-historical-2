--- ChangeLog	(revision 1980)
+++ ChangeLog	(working copy)
@@ -1,6 +1,17 @@
 # ChangeLog for Gentoo System Intialization ("rc") scripts
 # Copyright 1999-2006 Gentoo Foundation; Distributed under the GPLv2
 
+  18 Apr 2006; Roy Marples <uberlord@gentoo.org>:
+
+    start-stop-daemon only removes the daemon stopping from the daemon
+    started list, #130166.
+
+  15 Apr 2006; Roy Marples <uberlord@gentoo.org>:
+
+    net services are now calculated properly in trace_dependencies.
+
+    arping.sh now tests if the interface exists or not.
+
   12 Apr 2006; Roy Marples <uberlord@gentoo.org>:
 
     vlans can now be configured with their own interface scripts, which
--- etc/conf.d/rc	(revision 1980)
+++ etc/conf.d/rc	(working copy)
@@ -22,7 +22,7 @@
 # RC_COLDPLUG to no.
 # For more fine grained control you can list full service names to allow
 # them to coldplug and prefix them with ! so they don't coldplug.
-# Example - RC_COLDLUG="net.wlan !net.*"
+# Example - RC_COLDPLUG="net.wlan !net.*"
 # This allows net.wlan and any service not matching net.* to coldplug.
 
 RC_COLDPLUG="yes"
--- etc/conf.d/local.start	(revision 1980)
+++ etc/conf.d/local.start	(working copy)
@@ -1,5 +1,5 @@
 # /etc/conf.d/local.start
 
 # This is a good place to load any misc programs
-# on startup ( use 1>&2 to hide output)
+# on startup (use &>/dev/null to hide output)
 
--- lib/rcscripts/net.modules.d/arping.sh	(revision 1980)
+++ lib/rcscripts/net-scripts/net.modules.d/arping.sh	(working copy)
@@ -36,6 +36,7 @@
 	[[ ${address} == "0.0.0.0" || ${address} == "0" ]] && return 1
 
 	# We need to bring the interface up to test
+	interface_exists "${iface}" || return 1 
 	interface_up "${iface}"
 
 	if [[ -x /sbin/arping ]] ; then
@@ -62,7 +63,7 @@
 	einfo "Pinging gateways on ${iface} for configuration"
 
 	gateways="gateways_${ifvar}[@]"
-	if [[ -z ${!gateways} ]] ; then
+	if [[ -z "${!gateways}" ]] ; then
 		eerror "No gateways have been defined (gateways_${ifvar}=\"...\")"
 		return 1
 	fi
--- lib/rcscripts/net.modules.d/udhcpc.sh	(revision 1980)
+++ lib/rcscripts/net.modules.d/udhcpc.sh	(working copy)
@@ -94,6 +94,13 @@
 	# maybe oneday, udhcp will accept custom env vars.
 	local conf="/var/run/udhcpc-${iface}.conf"
 	echo "# udhcpc runtime configuration for interface ${iface}" > "${conf}"
+	if [[ " ${!d} " == *" nogateway "* ]] ; then
+		#opts="${opts} --env PEER_ROUTERS=no"
+		echo "PEER_ROUTERS=no" >> "${conf}"
+	else
+		#opts="${opts} --env PEER_ROUTERS=yes"
+		echo "PEER_ROUTERS=yes" >> "${conf}"
+	fi
 	if [[ " ${!d} " == *" nodns "* ]] ; then
 		#opts="${opts} --env PEER_DNS=no"
 		echo "PEER_DNS=no" >> "${conf}"
--- lib/rcscripts/net.modules.d/dhclient.sh	(revision 1980)
+++ lib/rcscripts/net.modules.d/dhclient.sh	(working copy)
@@ -73,6 +73,11 @@
 	[[ -z ${!d} ]] && d="dhcp"
 	
 	# Add our peer and metric options
+	if [[ " ${!d} " == *" nogateway "* ]] ; then
+		opts="${opts} -e PEER_ROUTERS=no"
+	elif [[ " ${opts} " != *" -e PEER_ROUTERS="* ]] ; then
+		opts="${opts} -e PEER_ROUTERS=yes"
+	fi
 	if [[ " ${!d} " == *" nodns "* ]] ; then
 		opts="${opts} -e PEER_DNS=no"
 	elif [[ " ${opts} " != *" -e PEER_DNS="* ]] ; then
--- sbin/rc-daemon.sh	(revision 1980)
+++ sbin/rc-daemon.sh	(working copy)
@@ -378,7 +378,7 @@
 				# We should really check for valid cmd AND pidfile
 				# But most called to --stop only set the pidfile
 				if [[ ${RC_DAEMONS[i]} == "{cmd}" \
-					|| ${RC_PIDFILES[i]}="${pidfile}" ]]; then
+					|| ${RC_PIDFILES[i]} == "${pidfile}" ]]; then
 					unset RC_DAEMONS[i] RC_PIDFILES[i]
 					RC_DAEMONS=( "${RC_DAEMONS[@]}" )
 					RC_PIDFILES=( "${RC_PIDFILES[@]}" )
--- sbin/rc-services.sh	(revision 1980)
+++ sbin/rc-services.sh	(working copy)
@@ -753,8 +753,8 @@
 #   Get and sort the dependencies of given service[s].
 #
 trace_dependencies() {
-	local -a services=( "$@" ) net_deps
-	local i j net_services x
+	local -a services=( "$@" ) net_deps=()
+	local i= j= net_services= x=
 
 	if [[ $1 == -* ]]; then
 		deptype="${1/-/}"
@@ -765,26 +765,11 @@
 		fi
 	fi
 
-	net_services="$( cd "${svcdir}"/started; ls net.* 2>/dev/null )"
-	# If no net services are running or we only have net.lo up, then
-	# assume we are in boot runlevel or starting a new runlevel
-	if [[ -z ${net_services} || ${net_services} == "net.lo" ]]; then
-		get_net_services() {
-			local runlevel="$1"
-
-			if [[ -d "/etc/runlevels/${runlevel}" ]] ; then
-				cd "/etc/runlevels/${runlevel}"
-				ls net.* 2>/dev/null
-			fi
-		}
-
-		local mylevel="${BOOTLEVEL}"
-		local x="$( get_net_services "${mylevel}" )"
-
-		[[ -f "${svcdir}/softlevel" ]] && mylevel="$( < "${svcdir}/softlevel" )"
-		[[ ${BOOTLEVEL} != "${mylevel}" ]] && \
-			local x="${x} $( get_net_services "${mylevel}" )"
-		[[ -n ${x} ]] && net_services="${x}"
+	if is_runlevel_start || is_runlevel_stop || ! is_net_up ; then
+		for x in $(dolisting "/etc/runlevels/${BOOTLEVEL}/net.*") \
+			$(dolisting "/etc/runlevels/${SOFTLEVEL}/net.*") ; do
+			net_services="${net_services} ${x##*/}"
+		done
 	fi
 
 	# Cache the generic "net" depends
