Index: etc/conf.d/rc
===================================================================
--- etc/conf.d/rc	(revision 2175)
+++ etc/conf.d/rc	(working copy)
@@ -87,6 +87,11 @@
 
 RC_BOOTLOG="no"
 
+# Set to "yes" if you want to benchmark system boot with bootchart.
+# You'll need to emerge the apps-benchmark/bootchart package for this to work.
+
+RC_BOOTCHART="no"
+
 # RC_USE_FSTAB allows you to override the default mount options for the 
 # standard /proc, /sys, /dev, and /dev/pts mount points.  Note that this 
 # is the new way for selecting ramfs/tmpfs/etc... for udev mounting.
Index: sbin/rc
===================================================================
--- sbin/rc	(revision 2175)
+++ sbin/rc	(working copy)
@@ -223,6 +223,9 @@
 	try mount -n ${mntcmd:--t proc proc /proc -o noexec,nosuid,nodev}
 	eend $?
 
+	# Start profiling init now we have /proc
+	profiling start
+
 	# Read off the kernel commandline to see if there's any special settings
 	# especially check to see if we need to set the  CDBOOT environment variable
 	# Note: /proc MUST be mounted
@@ -391,6 +394,8 @@
 		# Needed for some addons like dm-crypt that starts in critical services
 		local myservice="$1"
 
+		profiling name "/etc/init.d/${service} start"
+
 		source "/etc/init.d/${service}"
 		retval=$?
 		if [[ ${retval} -ne 0 ]] ; then
@@ -516,6 +521,8 @@
 	# Now that the dependency cache are up to date, make sure these
 	# are marked as started ...
 	(
+		profiling name "mark started"
+
 		# Needed for mark_service_started()
 		source "${svclib}/sh/rc-services.sh"
 
Index: sbin/rc-services.sh
===================================================================
--- sbin/rc-services.sh	(revision 2175)
+++ sbin/rc-services.sh	(working copy)
@@ -407,20 +407,29 @@
 		  ${START_CRITICAL} == "yes" ]] ; then
 		# if we can not start the services in parallel
 		# then just start it and return the exit status
-		( "/etc/init.d/${service}" start )
+		(
+			profiling name "/etc/init.d/${service} start"
+			"/etc/init.d/${service}" start
+		)
+		
 		service_started "${service}" || service_inactive "${service}" \
 			|| service_scheduled "${service}"
 		retval=$?
+		
 		end_service "${service}" "${retval}"
 		splash "svc_started" "${service}" "${retval}"
+		
 		return "${retval}"
 	else
 		# if parallel startup is allowed, start it in background
 		(
+			profiling name "/etc/init.d/${service} start"
 			"/etc/init.d/${service}" start
+			
 			service_started "${service}" || service_inactive "${service}" \
 				|| service_scheduled "${service}"
 			retval=$?
+			
 			end_service "${service}" "${retval}"
 			splash "svc_started" "${service}" "${retval}"
 		) &
