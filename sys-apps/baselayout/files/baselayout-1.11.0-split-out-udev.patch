diff -urN rc-scripts-1.6.13/init.d/halt.sh rc-scripts-1.6.13.az/init.d/halt.sh
--- rc-scripts-1.6.13/init.d/halt.sh	2005-07-11 16:33:03.000000000 +0200
+++ rc-scripts-1.6.13.az/init.d/halt.sh	2005-11-08 12:27:35.000000000 +0200
@@ -13,64 +13,8 @@
 	/sbin/pam_console_apply -r
 fi
 
-# We need to properly terminate devfsd to save the permissions
-if [[ -n $(ps --no-heading -C 'devfsd') ]]; then
-	ebegin "Stopping devfsd"
-	killall -15 devfsd &>/dev/null
-	eend $?
-elif [[ ! -e /dev/.devfsd && -e /dev/.udev && -z ${CDBOOT} && \
-        ${RC_DEVICE_TARBALL} == "yes" ]] && \
-		touch /lib/udev-state/devices.tar.bz2 2>/dev/null
-then
-	ebegin "Saving device nodes"
-	# Handle our temp files
-	devices_udev=$(mktemp /tmp/devices.udev.XXXXXX)
-	devices_real=$(mktemp /tmp/devices.real.XXXXXX)
-	devices_totar=$(mktemp /tmp/devices.totar.XXXXXX)
-	device_tarball=$(mktemp /tmp/devices-XXXXXX)
-	
-	if [[ -z ${devices_udev} || -z ${devices_real} || \
-	      -z ${device_tarball} ]]; then
-		eend 1 "Could not create temporary files!"
-	else
-		cd /dev
-		# Find all devices
-		find . -xdev -type b -or -type c -or -type l | cut -d/ -f2- > \
-			"${devices_real}"
-		# Figure out what udev created
-		eval $(grep '^[[:space:]]*udev_db=' /etc/udev/udev.conf)
-		if [[ -d ${udev_db} ]]; then
-			# New udev_db is clear text ...
-			udevinfo=$(cat "${udev_db}"/*)
-		else
-			# Old one is not ...
-			udevinfo=$(udevinfo -d)
-		fi
-		# This basically strips 'S:' and 'N:' from the db output, and then
-		# print all the nodes/symlinks udev created ...
-		echo "${udevinfo}" | gawk '
-			/^(N|S):.+/ {
-				sub(/^(N|S):/, "")
-				split($0, nodes)
-				for (x in nodes)
-					print nodes[x]
-			}' > "${devices_udev}"
-		# These ones we also do not want in there
-		for x in MAKEDEV core fd initctl pts shm stderr stdin stdout; do
-			echo "${x}" >> "${devices_udev}"
-		done
-		fgrep -x -v -f "${devices_udev}" < "${devices_real}" > "${devices_totar}"
-		# Now only tarball those not created by udev if we have any
-		if [[ -s ${devices_totar} ]]; then
-			try tar -jclpf "${device_tarball}" -T "${devices_totar}"
-			try mv -f "${device_tarball}" /lib/udev-state/devices.tar.bz2
-			try rm -f "${devices_udev}" "${devices_real}"
-		else
-			rm -f /lib/udev-state/devices.tar.bz2
-		fi
-		eend 0
-	fi
-fi
+stop_addon devfs
+stop_addon udev
 
 # Try to unmount all tmpfs filesystems not in use, else a deadlock may
 # occure, bug #13599.
diff -urN rc-scripts-1.6.13/sbin/rc rc-scripts-1.6.13.az/sbin/rc
--- rc-scripts-1.6.13/sbin/rc	2005-06-10 16:10:23.000000000 +0200
+++ rc-scripts-1.6.13.az/sbin/rc	2005-11-08 12:28:12.000000000 +0200
@@ -75,45 +75,6 @@
 	return 0
 }
 
-udev_version() {
-	local version=0
-
-	if [ -x "/sbin/udev" ]
-	then
-		version=$(/sbin/udev -V)
-		# We need it without a leading '0', else bash do the wrong thing
-		version="${version##0}"
-		# Older udev's will print nothing
-		[ -z "${version}" ] && version=0
-	fi
-
-	echo "${version}"
-}
-
-populate_udev() {
-	# Now populate /dev
-	/sbin/udevstart
-
-	# Not provided by sysfs but needed
-	ln -snf /proc/self/fd /dev/fd
-	ln -snf fd/0 /dev/stdin
-	ln -snf fd/1 /dev/stdout
-	ln -snf fd/2 /dev/stderr
-	ln -snf /proc/kcore /dev/core
-
-	# Create nodes that udev can't
-	[ -x /sbin/dmsetup ] && /sbin/dmsetup mknodes &>/dev/null
-	[ -x /sbin/lvm ] && /sbin/lvm vgscan -P --mknodes --ignorelockingfailure &>/dev/null
-
-	# Create problematic directories
-	mkdir -p /dev/{pts,shm}
-
-	# Same thing as /dev/.devfsd
-	touch /dev/.udev
-
-	return 0
-}
-
 get_critical_services() {
 	local x=
 	CRITICAL_SERVICES=
@@ -227,7 +188,7 @@
 		if [ "${udev}" = "yes" ]
 		then
 			if get_bootparam "noudev" || \
-			   [ ! -x /sbin/udev -o -e "/dev/.devfsd" ] || \
+			   [ ! -x /sbin/udev -o ${devfs_automounted} = "yes" ] || \
 			   [ "$(get_KV)" -lt "$(KV_to_int '2.6.0')" ]
 			then
 				udev="no"
@@ -244,96 +205,29 @@
 		fi
 
 		# Actually start setting up /dev now
-		if [[ ${udev} = "yes" ]] ; then
-			# Setup temporary storage for /dev
-			ebegin "Mounting /dev for udev"
-			if [[ ${RC_USE_FSTAB} = "yes" ]] ; then
-				mntcmd=$(get_mount_fstab /dev)
-			else
-				unset mntcmd
-			fi
-			if [[ -n ${mntcmd} ]] ; then
-				try mount -n ${mntcmd}
-			else
-				if egrep -qs tmpfs /proc/filesystems ; then
-					mntcmd="tmpfs"
-				else
-					mntcmd="ramfs"
-				fi
-				# many video drivers require exec access in /dev #92921
-				try mount -n -t ${mntcmd} udev /dev -o exec,nosuid,mode=0755
-			fi
-			eend $?
-
-			# Selinux lovin; /selinux should be mounted by selinux-patched init
-			if [[ -x /sbin/restorecon ]] && [[ -c /selinux/null ]] ; then
-				restorecon /dev &> /selinux/null
-			fi
-
-			# Actually get udev rolling
-			ebegin "Configuring system to use udev"
-			if [[ ${RC_DEVICE_TARBALL} = "yes" ]] && [[ -s /lib/udev-state/devices.tar.bz2 ]]
-			then
-				einfo "  Populating /dev with device nodes ..."
-				try tar -jxpf /lib/udev-state/devices.tar.bz2 -C /dev
-			fi
-			populate_udev
-
-			# Setup hotplugging (if possible)
-			if [ -e /proc/sys/kernel/hotplug ] ; then
-				if [ "$(udev_version)" -ge "48" ] ; then
-					einfo "  Setting /sbin/udevsend as hotplug agent ..."
-					echo "/sbin/udevsend" > /proc/sys/kernel/hotplug
-				elif [ -x /sbin/hotplug ] ; then
-					einfo "  Using /sbin/hotplug as hotplug agent ..."
-				else
-					einfo "  Setting /sbin/udev as hotplug agent ..."
-					echo "/sbin/udev" > /proc/sys/kernel/hotplug
-				fi
-			fi
-			eend 0
+		if [[ ${udev} == "yes" ]] ; then
+			start_addon udev
 
 		# With devfs, /dev can be mounted by the kernel ...
-		elif [ "${devfs}" = "yes" ]
-		then
-			mymounts="$(awk '($2 == "devfs") { print "yes"; exit 0 }' /proc/filesystems)"
-			# Is devfs support compiled in?
-			if [ "${mymounts}" = "yes" ]
-			then
-				if [ "${devfs_automounted}" = "no" ]
-				then
-					ebegin "Mounting devfs at /dev"
-					try mount -n -t devfs devfs /dev
-					eend $?
-				else
-					ebegin "Kernel automatically mounted devfs at /dev"
-					eend 0
-				fi
-				ebegin "Starting devfsd"
-				/sbin/devfsd /dev >/dev/null
-				eend $? "Could not start /sbin/devfsd"
-			else
-				devfs="no"
-			fi
+		elif [[ ${devfs} == "yes" ]] ; then
+			start_addon devfs
 
 			# Did the user want udev in the config file but for 
 			# some reason, udev support didnt work out ?
-			if [ "${fellback_to_devfs}" = "yes" ]
-			then
+			if [[ ${fellback_to_devfs} == "yes" ]] ; then
 				ewarn "You wanted udev but support for it was not available!"
 				ewarn "Please review your system after it's booted!"
 			fi
 		fi
 
 		# OK, if we got here, things are probably not right :)
-		if [ "${devfs}" = "no" ] && [ "${udev}" = "no" ]
-		then
+		if [[ ${devfs} == "no" && ${udev} == "no" ]] ; then
 			clear
 			echo
 			einfo "The Gentoo Linux system initialization scripts have detected that"
-			einfo "your system does not support DEVFS or UDEV.  Since Gentoo Linux"
-			einfo "has been designed with these dynamic /dev managers in mind, it is"
-			einfo "highly suggested that you build support for it into your kernel."
+			einfo "your system does not support UDEV.  Since Gentoo Linux has been"
+			einfo "designed with dynamic /dev in mind, it is highly suggested that you"
+			einfo "emerge sys-fs/udev and configure your system to use it."
 			einfo "Please read the Gentoo Handbook for more information!"
 			echo
 			einfo "    http://www.gentoo.org/doc/en/handbook/"
