#!/usr/bin/env python

import portage
import os
import string
import commands
import types
import sys

fns=os.listdir(portage.root+"etc/env.d")
fns.sort()
pos=0
while (pos<len(fns)):
	if fns[pos]<=2:
		del fns[pos]
		continue
	if (fns[pos][0] not in string.digits) or (fns[pos][1] not in string.digits):
		del fns[pos]
		continue
	pos=pos+1

specials={"PATH":[],"CLASSPATH":[],"LDPATH":[],"MANPATH":[],"INFODIR":[],"ROOTPATH":[]}
env={}

for x in fns:
	myconfig=portage.configfile(portage.root+"etc/env.d/"+x)
	# process PATH, CLASSPATH, LDPATH
	for myspec in specials.keys():
		if myconfig.has_key(myspec):
			if myspec=="LDPATH":
				specials[myspec].extend(string.split(myconfig.get_key(myspec),":"))
			else:
				specials[myspec].append(myconfig.get_key(myspec))
		myconfig.del_key(myspec)
	# process all other variables
	for myenv in myconfig.all_keys():
		env[myenv]=myconfig.get_key(myenv)
if not os.getuid():
	if os.path.exists(portage.root+"etc/ld.so.conf"):
		myld=open(portage.root+"etc/ld.so.conf")
		myldlines=myld.readlines()
		myld.close()
		oldld=[]
		for x in myldlines:
			#each line has at least one char (a newline)
			if x[0]=="#":
				continue
			oldld.append(x[:-1])
		oldld.sort()
		os.rename(portage.root+"etc/ld.so.conf",portage.root+"etc/ld.so.conf.bak")
	else:
		oldld=None
	specials["LDPATH"].sort()
	if oldld!=specials["LDPATH"]:
		#ld.so.conf needs updating and ldconfig needs to be run
		newld=open(portage.root+"etc/ld.so.conf","w")
		newld.write("# ld.so.conf autogenerated by env-update; make all changes to\n")
		newld.write("# contents of /etc/env.d directory\n")
		for x in specials["LDPATH"]:
			newld.write(x+"\n")
		newld.close()
		#run ldconfig here
		commands.getstatusoutput("/sbin/ldconfig -r "+portage.root)
	del specials["LDPATH"]

if portage.root!="/":
	sys.exit(0)
if len(sys.argv)<2:
	sys.exit(0)
if sys.argv[1]!="echo":
	sys.exit(0)

for path in specials.keys():
	if len(specials[path])==0:
		continue
	outstring="export "+path+"='"
	for x in specials[path][:-1]:
		outstring=outstring+x+":"
	outstring=outstring+specials[path][-1]+"'"
	print outstring
	#get it out of the way
	del specials[path]

for x in env.keys():
	if type(env[x])!=types.StringType:
		continue
	print "export "+x+"='"+env[x]+"'"
