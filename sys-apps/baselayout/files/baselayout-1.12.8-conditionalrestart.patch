Index: sbin/runscript.sh
===================================================================
--- sbin/runscript.sh	(revision 2461)
+++ sbin/runscript.sh	(working copy)
@@ -71,7 +71,6 @@
 
 # State variables
 svcpause="no"
-svcrestart="no"
 
 # Functions to handle dependencies and services
 [[ ${RC_GOT_SERVICES} != "yes" ]] && source "${svclib}/sh/rc-services.sh"
@@ -136,7 +135,10 @@
 }
 
 restart() {
-	svc_restart
+	if ! service_stopped "${SVCNAME}" ; then
+		svc_stop || return "$?"
+	fi
+	svc_start
 }
 
 status() {
@@ -470,10 +472,65 @@
 }
 
 svc_restart() {
-	if ! service_stopped "${SVCNAME}" ; then
-		svc_stop || return "$?"
+	# We don't kill child processes if we're restarting
+	# This is especically important for sshd ....
+	RC_KILL_CHILDREN="no"				
+
+	# Create a snapshot of started services
+	rm -rf "${svcdir}/snapshot/$$"
+	mkdir -p "${svcdir}/snapshot/$$"
+	cp -pP "${svcdir}"/started/* "${svcdir}"/inactive/* \
+	"${svcdir}/snapshot/$$/" 2>/dev/null
+	rm -f "${svcdir}/snapshot/$$/${SVCNAME}"
+
+	# Simple way to try and detect if the service use svc_{start,stop}
+	# to restart if it have a custom restart() funtion.
+	if [[ -n $(egrep '^[[:space:]]*restart[[:space:]]*()' "/etc/init.d/${SVCNAME}") ]] ; then
+		if [[ -z $(egrep 'svc_stop' "/etc/init.d/${SVCNAME}") || \
+			-z $(egrep 'svc_start' "/etc/init.d/${SVCNAME}") ]] ; then
+			echo
+			ewarn "Please use 'svc_stop; svc_start' and not 'stop; start' to"
+			ewarn "restart the service in its custom 'restart()' function."
+			ewarn "Run ${SVCNAME} without arguments for more info."
+			echo
+			if ! service_stopped "${SVCNAME}" ; then
+				svc_stop || return "$?"
+			fi
+			svc_start
+		else
+			restart
+		fi
+	else
+		restart
 	fi
-	svc_start
+	retval="$?"
+
+	[[ -e "${svcdir}/scheduled/${SVCNAME}" ]] \
+		&& rm -Rf "${svcdir}/scheduled/${SVCNAME}"
+
+	# Restart dependencies as well
+	for x in $(dolisting "${svcdir}/snapshot/$$/") ; do
+		if [[ -x ${x} ]] && service_stopped "${x##*/}" ; then
+			if service_inactive "${SVCNAME}" \
+			|| service_wasinactive "${SVCNAME}" ; then
+				svc_schedule_start "${SVCNAME}" "${x##*/}"
+				ewarn "WARNING:  ${x##*/} is scheduled to start when ${SVCNAME} has started."
+			elif service_started "${SVCNAME}" ; then
+				start_service "${x##*/}"
+			fi
+		fi
+	done
+	rm -rf "${svcdir}/snapshot/$$"
+
+	service_started "${SVCNAME}" && svc_start_scheduled
+
+	# Wait for services to come up
+	if [[ ${IN_BACKGROUND} != "true" \
+		&& ${IN_BACKGROUND} != "1" ]] ; then
+		[[ ${RC_PARALLEL_STARTUP} == "yes" ]] && wait
+	fi
+
+	return ${retval}
 }
 
 svc_status() {
@@ -629,64 +686,14 @@
 		mark_service_stopped "${SVCNAME}"
 		;;
 	restart)
-		svcrestart="yes"
-
-        	# We don't kill child processes if we're restarting
-		# This is especically important for sshd ....
-		RC_KILL_CHILDREN="no"				
-		
-		# Create a snapshot of started services
-		rm -rf "${svcdir}/snapshot/$$"
-		mkdir -p "${svcdir}/snapshot/$$"
-		cp -pP "${svcdir}"/started/* "${svcdir}"/inactive/* \
-			"${svcdir}/snapshot/$$/" 2>/dev/null
-		rm -f "${svcdir}/snapshot/$$/${SVCNAME}"
-
-		# Simple way to try and detect if the service use svc_{start,stop}
-		# to restart if it have a custom restart() funtion.
-		if [[ -n $(egrep '^[[:space:]]*restart[[:space:]]*()' "/etc/init.d/${SVCNAME}") ]] ; then
-			if [[ -z $(egrep 'svc_stop' "/etc/init.d/${SVCNAME}") || \
-			      -z $(egrep 'svc_start' "/etc/init.d/${SVCNAME}") ]] ; then
-				echo
-				ewarn "Please use 'svc_stop; svc_start' and not 'stop; start' to"
-				ewarn "restart the service in its custom 'restart()' function."
-				ewarn "Run ${SVCNAME} without arguments for more info."
-				echo
-				svc_restart
-			else
-				restart
-			fi
-		else
-			restart
+		svc_restart
+		retval="$?"
+		;;
+	condrestart|conditionalrestart)
+		if service_started "${SVCNAME}" ; then
+			svc_restart
 		fi
 		retval="$?"
-
-		[[ -e "${svcdir}/scheduled/${SVCNAME}" ]] \
-			&& rm -Rf "${svcdir}/scheduled/${SVCNAME}"
-	
-		# Restart dependencies as well
-		for x in $(dolisting "${svcdir}/snapshot/$$/") ; do
-			if [[ -x ${x} ]] && service_stopped "${x##*/}" ; then
-				if service_inactive "${SVCNAME}" \
-					|| service_wasinactive "${SVCNAME}" ; then
-					svc_schedule_start "${SVCNAME}" "${x##*/}"
-					ewarn "WARNING:  ${x##*/} is scheduled to start when ${SVCNAME} has started."
-				elif service_started "${SVCNAME}" ; then
-					start_service "${x##*/}"
-				fi
-			fi
-		done
-		rm -rf "${svcdir}/snapshot/$$"
-	
-		service_started "${SVCNAME}" && svc_start_scheduled
-
-		# Wait for services to come up
-		if [[ ${IN_BACKGROUND} != "true" \
-		&& ${IN_BACKGROUND} != "1" ]] ; then
-			[[ ${RC_PARALLEL_STARTUP} == "yes" ]] && wait
-		fi
-
-		svcrestart="no"
 		;;
 	pause)
 		svcpause="yes"
Index: sbin/rc-help.sh
===================================================================
--- sbin/rc-help.sh	(revision 2461)
+++ sbin/rc-help.sh	(working copy)
@@ -67,6 +67,9 @@
       can be handled correctly.  Refer to the portmap rc-script for an
       example.
 
+    ${GREEN}conditionalrestart|condrestart${OFF}
+      Same as 'restart', but only if the service has already been started.
+
     ${GREEN}pause${OFF}
       Same as 'stop', but the services that depends on it, will not be
       stopped.  This is useful for stopping a network interface without
