uClibc svn has l64a() support in it, but not uClibc 0.9.28 release

--- shadow-4.0.15/libmisc/salt.c
+++ shadow-4.0.15/libmisc/salt.c
@@ -14,6 +14,52 @@
 #include "prototypes.h"
 #include "defines.h"
 #include "getdef.h"
+
+#ifndef HAVE_A64L
+
+/*
+ * l64a - convert a long to a string of radix 64 characters
+ */
+
+static const char conv_table[64] =
+{
+  '.', '/', '0', '1', '2', '3', '4', '5',
+  '6', '7', '8', '9', 'A', 'B', 'C', 'D',
+  'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
+  'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
+  'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b',
+  'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
+  'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
+  's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
+};
+
+char *
+l64a (n)
+     long int n;
+{
+  unsigned long int m = (unsigned long int) n;
+  static char result[7];
+  int cnt;
+
+  /* The standard says that only 32 bits are used.  */
+  m &= 0xffffffff;
+
+  if (m == 0ul)
+    /* The value for N == 0 is defined to be the empty string. */
+    return (char *) "";
+
+  for (cnt = 0; m > 0ul; ++cnt)
+    {
+      result[cnt] = conv_table[m & 0x3f];
+      m >>= 6;
+    }
+  result[cnt] = '\0';
+
+  return result;
+}
+
+#endif /* !HAVE_A64L */
+
 /*
  * Generate 8 base64 ASCII characters of random salt.  If MD5_CRYPT_ENAB
  * in /etc/login.defs is "yes", the salt string will be prefixed by "$1$"
