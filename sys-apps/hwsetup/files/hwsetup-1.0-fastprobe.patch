Common subdirectories: hwsetup-1.0.dyn_blacklist/debian and hwsetup-1.0/debian
diff -u hwsetup-1.0.dyn_blacklist/hwsetup.c hwsetup-1.0/hwsetup.c
--- hwsetup-1.0.dyn_blacklist/hwsetup.c	2005-06-10 16:25:06.000000000 -0400
+++ hwsetup-1.0/hwsetup.c	2005-06-10 16:28:24.000000000 -0400
@@ -3,6 +3,7 @@
 * loads modules, generates /dev links, no isapnp autoconfiguration (yet)     *
 * needs kudzu-devel (ver. 0.23 and up)                                       *
 * Author: Klaus Knopper <knopper@knopper.net>                                *
+* Modifications: René Rhéaume <rener@mediom.qc.ca>                           *
 \****************************************************************************/
 
 #include <stdio.h>
@@ -22,7 +23,8 @@
 #endif
 
 #define VERSION "HWSETUP 1.0, an automatic hardware configuration tool\n" \
-                "(C) 2002 Klaus Knopper <knoppix@knopper.net>\n\n"
+                "(C) 2002 Klaus Knopper <knoppix@knopper.net>\n" \
+                "Modifications (C) 2004 René Rhéaume <rener@mediom.qc.ca>\n"
 
 #define CARDSDB "/usr/share/hwdata/Cards"
 #define XPATH "/usr/X11R6/bin/"
@@ -78,14 +80,15 @@
 
 int syntax(char *option)
 {
- printf(VERSION);
+ puts(VERSION);
  if(option) fprintf(stderr,"hwsetup: Unknown option '%s'\n\n",option);
- printf("Usage: hwsetup\n"
-         "               -v       be verbose\n"
-         "               -p       print rotating prompt\n"
-         "               -a       ignore audio devices\n"
-         "               -s       ignore scsi controllers\n"
-         "               -n       probe only, don't configure anything.\n");
+ puts("Usage: hwsetup\n"
+         "\t\t-v\tbe verbose\n"
+         "\t\t-p\tprint rotating prompt\n"
+         "\t\t-a\tignore audio devices\n"
+         "\t\t-s\tignore scsi controllers\n"
+         "\t\t-n\tprobe only, don't configure anything\n"
+         "\t\t-f\trun a fast probe.");
  return option?1:0;
 }
 
@@ -363,7 +366,7 @@
 {
  signal(SIGALRM,SIG_IGN);
  fprintf(stderr,"\nWARNING: Autodetection seems to hang,\n"
-                "please check your computers BIOS settings.\n");
+                "please check your computer BIOS settings.\n");
  fflush(stderr);
  if(wpid) { kill(wpid,SIGTERM); usleep(2500000); kill(wpid,SIGKILL); wpid=0; }
  exit(1); /* exit program */
@@ -523,12 +526,13 @@
  return 0;
 }
 
-int hw_setup(enum deviceClass dc, int verbose, int probeonly, int skip)
+int hw_setup(enum deviceClass dc, int verbose, int probeonly, int skip, int fastprobe)
 {
  int i,mouse=0,cdrom=0,modem=0,scanner=0;
+ int probeopt=fastprobe?PROBE_SAFE:PROBE_ALL;
  struct device **currentDevs, *d, *serialmouse=NULL, *usbmouse=NULL;
  if(verbose&VERBOSE_PROMPT) wpid=startwheel();
- if((currentDevs=probeDevices(dc,BUS_UNSPEC,PROBE_ALL))==NULL) return -1;
+ if((currentDevs=probeDevices(dc,BUS_UNSPEC,probeopt))==NULL) return -1;
  if(verbose&VERBOSE_PROMPT&&wpid>0) { kill(wpid,SIGTERM); wpid=0; usleep(160000); write(2,"\033[0m Done.\n",11); }
  for(i=0;(d=currentDevs[i]);i++)
   {
@@ -582,7 +586,7 @@
 
 int main(int argc, char **argv)
 {
- int i, verbose=0, probeonly=0, skip=0;
+ int i, verbose=0, probeonly=0, skip=0, fast=0;
  enum deviceClass dc=CLASS_UNSPEC;
  for(i=1;i<argc;i++)
   {
@@ -591,6 +595,7 @@
    else if(!strcasecmp(argv[i],"-a")) skip|=SKIP_AUDIO;
    else if(!strcasecmp(argv[i],"-s")) skip|=SKIP_SCSI;
    else if(!strcasecmp(argv[i],"-n")) probeonly=1;
+   else if(!strcasecmp(argv[i],"-f")) fast=1;
    else return syntax(argv[i]);
   }
  /* Allow SIGTERM, SIGINT: rmmod depends on this. */
@@ -599,5 +604,5 @@
 #ifdef BLACKLIST
  gen_blacklist();
 #endif
- return hw_setup(dc,verbose,probeonly,skip);
+ return hw_setup(dc,verbose,probeonly,skip,fast);
 }
