=== modified file 'pym/portage.py'
--- pym/portage.py	
+++ pym/portage.py	
@@ -1402,8 +1402,20 @@
 			if mykey=="USE":
 				mydbs=self.uvlist
 				# XXX Global usage of db... Needs to go away somehow.
+				global db, root
 				if "auto" in self["USE_ORDER"].split(":") and db.has_key(root) and db[root].has_key("vartree"):
-					self.configdict["auto"]["USE"]=autouse(db[root]["vartree"],use_cache=use_cache)
+					class LazyAutouse(object):
+						def __init__(self, *pargs, **kwargs):
+							self._use = None
+							self._pargs = pargs
+							self._kwargs = kwargs
+						def __call__(self):
+							if self._use is None:
+								global db, root
+								self._use = autouse(db[root]["vartree"], *self._pargs, **self._kwargs)
+							return self._use
+					self.configdict["auto"] = portage_util.LazyItemsDict(self.configdict["auto"])
+					self.configdict["auto"].addLazyItem("USE", LazyAutouse(use_cache=use_cache))
 				else:
 					self.configdict["auto"]["USE"]=""
 			else:

=== modified file 'pym/portage_util.py'
--- pym/portage_util.py	
+++ pym/portage_util.py	
@@ -715,9 +715,13 @@
 	"""A mapping object that behaves like a standard dict except that it allows
 	for lazy initialization of values via callable objects.  Lazy items can be
 	overwritten and deleted just as normal items."""
-	def __init__(self):
+	def __init__(self, initial_items=None):
 		dict.__init__(self)
 		self.lazy_items = {}
+		if initial_items is not None:
+			self.update(initial_items)
+			if isinstance(initial_items, LazyItemsDict):
+				self.lazy_items.update(initial_items.lazy_items)
 	def addLazyItem(self, item_key, value_callable):
 		"""Add a lazy item for the given key.  When the item is requested,
 		value_callable will be called with no arguments."""

