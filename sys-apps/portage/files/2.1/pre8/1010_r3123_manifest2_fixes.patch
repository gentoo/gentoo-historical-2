=== modified file 'bin/repoman'
--- bin/repoman	
+++ bin/repoman	
@@ -795,7 +795,9 @@
 				fails["CVS/Entries.IO_error"].append(checkdir+"/files/CVS/Entries")
 			continue
 
-	mf=Manifest(checkdir, db=portage.db["/"]["porttree"].dbapi, mysettings=repoman_settings)
+	mf = Manifest(checkdir,
+		portage.FetchlistDict(checkdir, repoman_settings),
+		repoman_settings["DISTDIR"])
 	mydigests=mf.getTypeDigests("DIST")
 	myfiles_all = []
 
@@ -878,6 +880,8 @@
 				if y == "CVS":
 					continue
 				for z in os.listdir(checkdir+"/files/"+y):
+					if z == "CVS":
+						continue
 					filesdirlist.append(y+"/"+z)
 			# current policy is no files over 20k, this is the check.
 			elif mystat.st_size > 20480:
@@ -1613,8 +1617,8 @@
 	if "sign" in portage.features:
 		mydone=[]
 		if repolevel==3:   # In a package dir
-			repoman_settings["O"]="./"
-			while(gpgsign(repoman_settings["O"]+"/Manifest")):
+			repoman_settings["O"] = "."
+			while(gpgsign(os.path.join(repoman_settings["O"], "Manifest"))):
 				portage.writemsg("!!! YOU MUST sign the Manifest.\n")
 				portage.writemsg("!!! You can also disable this for the time being by removing FEATURES='sign'")
 				time.sleep(3)
@@ -1626,8 +1630,8 @@
 				if xs[0] in mydone:
 					continue
 				mydone.append(xs[0])
-				repoman_settings["O"]="./"+xs[0]
-				while(gpgsign(repoman_settings["O"]+"/Manifest")):
+				repoman_settings["O"] = os.path.join(".", xs[0])
+				while(gpgsign(os.path.join(repoman_settings["O"], "Manifest"))):
 					portage.writemsg("!!! YOU MUST sign the Manifest.\n")
 					portage.writemsg("!!! You can also disable this for the time being by removing FEATURES='sign'")
 					time.sleep(3)
@@ -1640,8 +1644,8 @@
 				if string.join(xs[:2],"/") in mydone:
 					continue
 				mydone.append(string.join(xs[:2],"/"))
-				repoman_settings["O"]="./"+string.join(xs[:2],"/")
-				while(gpgsign(repoman_settings["O"]+"/Manifest")):
+				repoman_settings["O"] = os.path.join(".", xs[0], xs[1])
+				while(gpgsign(os.path.join(repoman_settings["O"], "Manifest"))):
 					portage.writemsg("!!! YOU MUST sign the Manifest.\n")
 					portage.writemsg("!!! You can also disable this for the time being by removing FEATURES='sign'")
 					time.sleep(3)

=== modified file 'pym/portage.py'
--- pym/portage.py	
+++ pym/portage.py	
@@ -30,6 +30,7 @@
 	import commands
 	from time import sleep
 	from random import shuffle
+	import UserDict
 except ImportError, e:
 	sys.stderr.write("\n\n")
 	sys.stderr.write("!!! Failed to complete python imports. These are internal modules for\n")
@@ -2058,7 +2059,7 @@
 			return 0
 	return 1
 
-def digestgen(myarchives,mysettings,db=None,overwrite=1,manifestonly=0):
+def digestgen(myarchives, mysettings, overwrite=1, manifestonly=0):
 	"""generates digest file if missing.  Assumes all files are available.	If
 	overwrite=0, the digest will only be created if it doesn't already exist.
 	DEPRECATED: this now only is a compability wrapper for 
@@ -2069,26 +2070,16 @@
 	#       (e.g. cvs stuff should be in ebuild(1) and/or repoman)
 	# TODO: error/exception handling
 
-	if db is None:
-		db = portagetree().dbapi
-
-	mf = Manifest(mysettings["O"], db, mysettings)
+	global settings
+	mf = Manifest(mysettings["O"], FetchlistDict(mysettings["O"], mysettings), mysettings["DISTDIR"])
+	mf.create(assumeDistfileHashes=True)
 	for f in myarchives:
 		# the whole type evaluation is only for the case that myarchives isn't a 
 		# DIST file as create() determines the type on its own
-		mytype = mf.guessType(f)
-		if mytype == "AUX":
-			f = f[5:]
-		elif mytype is None:
-			continue
-		myrealtype = mf.findFile(f)
-		if myrealtype != None:
-			mytype = myrealtype
 		writemsg(">>> Creating Manifest for %s\n" % mysettings["O"])
-		mf.create(assumeDistfileHashes=True)
 		try:
 			writemsg(">>> Adding digests for file %s\n" % f)
-			mf.updateFileHashes(mytype, f, checkExisting=False, reuseExisting=not os.path.exists(os.path.join(mysettings["DISTDIR"], f)))
+			mf.updateHashesGuessType(f, checkExisting=False, reuseExisting=not os.path.exists(os.path.join(mysettings["DISTDIR"], f)))
 		except portage_exception.FileNotFound, e:
 			writemsg("!!! File %s doesn't exist, can't update Manifest\n" % str(e))
 			return 0
@@ -2098,7 +2089,7 @@
 	
 	return 1
 
-def digestParseFile(myfilename,mysettings=None,db=None):
+def digestParseFile(myfilename, mysettings=None):
 	"""(filename) -- Parses a given file for entries matching:
 	<checksumkey> <checksum_hex_string> <filename> <filesize>
 	Ignores lines that don't start with a valid checksum identifier
@@ -2109,48 +2100,17 @@
 
 	mysplit = myfilename.split(os.sep)
 	if mysplit[-2] == "files" and mysplit[-1].startswith("digest-"):
-		pkgdir = os.sep+os.sep.join(mysplit[:-2])
+		pkgdir = os.sep + os.sep.join(mysplit[:-2]).strip(os.sep)
 	elif mysplit[-1] == "Manifest":
-		pkgdir = os.sep+os.sep.join(mysplit[:-1])
-
-	if db is None:
-		db = portagetree().dbapi
+		pkgdir = os.sep + os.sep.join(mysplit[:-1]).strip(os.sep)
+
 	if mysettings is None:
+		global settings
 		mysettings = config(clone=settings)
 
-	mf = Manifest(pkgdir, db, mysettings)
+	mf = Manifest(pkgdir, FetchlistDict(pkgdir, mysettings), mysettings["DISTDIR"])
 
 	return mf.getDigests()
-	
-	#########################################
-	# Old code that's replaced by the above #
-	#########################################
-
-	if not os.path.exists(myfilename):
-		return None
-	mylines = portage_util.grabfile(myfilename, compat_level=1)
-
-	mydigests={}
-	for x in mylines:
-		myline=string.split(x)
-		if len(myline) < 4:
-			#invalid line
-			continue
-		if myline[0] not in portage_checksum.get_valid_checksum_keys():
-			continue
-		mykey  = myline.pop(0)
-		myhash = myline.pop(0)
-		mysize = long(myline.pop())
-		myfn   = string.join(myline, " ")
-		if myfn not in mydigests:
-			mydigests[myfn] = {}
-		mydigests[myfn][mykey] = myhash
-		if "size" in mydigests[myfn]:
-			if mydigests[myfn]["size"] != mysize:
-				raise portage_exception.DigestException, "Conflicting sizes in digest: %(filename)s" % {"filename":myfilename}
-		else:
-			mydigests[myfn]["size"] = mysize
-	return mydigests
 
 # XXXX strict was added here to fix a missing name error.
 # XXXX It's used below, but we're not paying attention to how we get it?
@@ -2194,15 +2154,13 @@
 	return 1
 
 
-def digestcheck(myfiles, mysettings, strict=0, justmanifest=0, db=None):
+def digestcheck(myfiles, mysettings, strict=0, justmanifest=0):
 	"""Verifies checksums.  Assumes all files have been downloaded.
 	DEPRECATED: this is now only a compability wrapper for 
 	            portage_manifest.Manifest()."""
 	
 	pkgdir = mysettings["O"]
-	if db is None:
-		db = portagetree().dbapi
-	mf = Manifest(pkgdir, db, mysettings)
+	mf = Manifest(pkgdir, FetchlistDict(pkgdir, mysettings), mysettings["DISTDIR"])
 	try:
 		if strict:
 			print ">>> checking ebuild checksums",
@@ -2750,6 +2708,28 @@
 	if need_distfiles and not fetch(fetchme, mysettings, listonly=listonly, fetchonly=fetchonly):
 		return 1
 
+	if mydo=="fetch" and listonly:
+		return 0
+
+	if "digest" in features:
+		#generate digest if it doesn't exist.
+		if mydo=="digest":
+			return (not digestgen(aalist,mysettings,overwrite=1))
+		else:
+			digestgen(aalist,mysettings,overwrite=0)
+	elif mydo=="digest":
+		#since we are calling "digest" directly, recreate the digest even if it already exists
+		return (not digestgen(aalist,mysettings,overwrite=1))
+	if mydo=="manifest":
+		return (not digestgen(aalist,mysettings,overwrite=1,manifestonly=1))
+
+	# See above comment about fetching only when needed
+	if not digestcheck(checkme, mysettings, ("strict" in features), (mydo not in ["digest","fetch","unpack"] and settings["PORTAGE_CALLER"] == "ebuild" and "noauto" in features)):
+		return 1
+
+	if mydo=="fetch":
+		return 0
+
 	# inefficient.  improve this logic via making actionmap easily searchable to see if we're in the chain of what
 	# will be executed, either that or forced N doebuild calls instead of a single set of phase calls.
 	if (mydo not in ("setup", "clean", "postinst", "preinst", "prerm", "fetch", "digest", "manifest") and 
@@ -2774,28 +2754,6 @@
 		except OSError:
 			print "!!! Failed symlinking in '%s' to ebuild distdir" % file
 			raise
-
-	if mydo=="fetch" and listonly:
-		return 0
-
-	if "digest" in features:
-		#generate digest if it doesn't exist.
-		if mydo=="digest":
-			return (not digestgen(aalist,mysettings,overwrite=1))
-		else:
-			digestgen(aalist,mysettings,overwrite=0)
-	elif mydo=="digest":
-		#since we are calling "digest" directly, recreate the digest even if it already exists
-		return (not digestgen(aalist,mysettings,overwrite=1))
-	if mydo=="manifest":
-		return (not digestgen(aalist,mysettings,overwrite=1,manifestonly=1))
-
-	# See above comment about fetching only when needed
-	if not digestcheck(checkme, mysettings, ("strict" in features), (mydo not in ["digest","fetch","unpack"] and settings["PORTAGE_CALLER"] == "ebuild" and "noauto" in features)):
-		return 1
-
-	if mydo=="fetch":
-		return 0
 
 	#initial dep checks complete; time to process main commands
 
=== modified file 'pym/portage_checksum.py'
--- pym/portage_checksum.py	
+++ pym/portage_checksum.py	
@@ -94,7 +94,9 @@
 		if mydict["size"] != mysize:
 			return False,("Filesize does not match recorded size", mysize, mydict["size"])
 	except OSError, e:
-		return False, str(e)
+		if e.errno == errno.ENOENT:
+			raise portage_exception.FileNotFound(filename)
+		return False, (str(e), None, None)
 	for x in mydict.keys():
 		if   x == "size":
 			continue

=== modified file 'pym/portage_manifest.py'
--- pym/portage_manifest.py	
+++ pym/portage_manifest.py	
@@ -3,8 +3,9 @@
 # $Header: $
 
 import errno, os, sets
-
-import portage, portage_exception, portage_versions, portage_const
+from itertools import imap
+
+import portage_exception, portage_versions, portage_const
 from portage_checksum import *
 from portage_exception import *
 from portage_util import write_atomic
@@ -25,11 +26,11 @@
 	return not (filename in ["CVS", ".svn", "files", "Manifest"] or filename.endswith(".ebuild"))
 
 class Manifest(object):
-	def __init__(self, pkgdir, db, mysettings, manifest1_compat=True, from_scratch=False):
-		""" create new Manifest instance for package in pkgdir, using db and mysettings for metadata lookups,
+	def __init__(self, pkgdir, fetchlist_dict, distdir, manifest1_compat=True, from_scratch=False):
+		""" create new Manifest instance for package in pkgdir
 		    and add compability entries for old portage versions if manifest1_compat == True.
 		    Do not parse Manifest file if from_scratch == True (only for internal use) """
-		self.pkgdir = pkgdir+os.sep
+		self.pkgdir = pkgdir.rstrip(os.sep) + os.sep
 		self.fhashdict = {}
 		self.hashes = portage_const.MANIFEST2_HASH_FUNCTIONS[:]
 		self.hashes.append("size")
@@ -41,12 +42,8 @@
 		if not from_scratch:
 			self._read()
 		self.compat = manifest1_compat
-		self.db = db
-		self.mysettings = mysettings
-		if mysettings.has_key("PORTAGE_ACTUAL_DISTDIR"):
-			self.distdir = mysettings["PORTAGE_ACTUAL_DISTDIR"]
-		else:
-			self.distdir = mysettings["DISTDIR"]
+		self.fetchlist_dict = fetchlist_dict
+		self.distdir = distdir
 		
 	def guessType(self, filename):
 		""" Perform a best effort guess of which type the given filename is, avoid using this if possible """
@@ -79,9 +76,11 @@
 	def _readDigests(self):
 		""" Parse old style digest files for this Manifest instance """
 		mycontent = ""
-		for d in portage.listdir(os.path.join(self.pkgdir, "files"), filesonly=True, recursive=False):
+		for d in os.listdir(os.path.join(self.pkgdir, "files")):
 			if d.startswith("digest-"):
-				mycontent += open(os.path.join(self.pkgdir, "files", d), "r").read()
+				f = open(os.path.join(self.pkgdir, "files", d), "r")
+				mycontent += f.read()
+				f.close()
 		return mycontent
 		
 	def _read(self):
@@ -124,7 +123,7 @@
 	
 	def _writeDigests(self, force=False):
 		""" Create old style digest files for this Manifest instance """
-		cpvlist = [os.path.join(self.pkgdir.rstrip(os.sep).split(os.sep)[-2], x[:-7]) for x in portage.listdir(self.pkgdir) if x.endswith(".ebuild")]
+		cpvlist = [os.path.join(self._pkgdir_category(), x[:-7]) for x in os.listdir(self.pkgdir) if x.endswith(".ebuild")]
 		rval = []
 		try:
 			os.makedirs(os.path.join(self.pkgdir, "files"))
@@ -134,7 +133,7 @@
 			else:
 				raise
 		for cpv in cpvlist:
-			dname = os.path.join(self.pkgdir, "files", "digest-"+portage.catsplit(cpv)[1])
+			dname = os.path.join(self.pkgdir, "files", "digest-%s" % self._catsplit(cpv)[1])
 			distlist = self._getCpvDistfiles(cpv)
 			update_digest = True
 			if not force:
@@ -194,7 +193,7 @@
 		mylines = []
 		for dname in digests:
 			myhashes = perform_multiple_checksums(dname, portage_const.MANIFEST1_HASH_FUNCTIONS+["size"])
-			for h in myhashes.keys():
+			for h in myhashes:
 				mylines.append((" ".join([h, str(myhashes[h]), os.path.join("files", os.path.basename(dname)), str(myhashes["size"])])))
 		fd.write("\n".join(mylines))
 		fd.write("\n")
@@ -258,7 +257,7 @@
 		self.fhashdict[ftype][fname] = {}
 		if hashdict != None:
 			self.fhashdict[ftype][fname].update(hashdict)
-		if not portage_const.MANIFEST2_REQUIRED_HASH in self.fhashdict[ftype][fname].keys():
+		if not portage_const.MANIFEST2_REQUIRED_HASH in self.fhashdict[ftype][fname]:
 			self.updateFileHashes(ftype, fname)
 	
 	def removeFile(self, ftype, fname):
@@ -267,7 +266,7 @@
 	
 	def hasFile(self, ftype, fname):
 		""" Return wether the Manifest contains an entry for the given type,filename pair """
-		return (fname in self.fhashdict[ftype].keys())
+		return (fname in self.fhashdict[ftype])
 	
 	def findFile(self, fname):
 		""" Return entrytype of the given file if present in Manifest or None if not present """
@@ -286,8 +285,10 @@
 			distfilehashes = self.fhashdict["DIST"]
 		else:
 			distfilehashes = {}
-		self.__init__(self.pkgdir, self.db, self.mysettings, from_scratch=True)
-		for f in portage.listdir(self.pkgdir, filesonly=True, recursive=False):
+		self.__init__(self.pkgdir, self.fetchlist_dict, self.distdir, from_scratch=True)
+		for pkgdir, pkgdir_dirs, pkgdir_files in os.walk(self.pkgdir):
+			break
+		for f in pkgdir_files:
 			if f.endswith(".ebuild"):
 				mytype = "EBUILD"
 			elif manifest2MiscfileFilter(f):
@@ -295,11 +296,18 @@
 			else:
 				continue
 			self.fhashdict[mytype][f] = perform_multiple_checksums(self.pkgdir+f, self.hashes)
-		for f in portage.listdir(self.pkgdir+"files", filesonly=True, recursive=True):
+		recursive_files = []
+		cut_len = len(os.path.join(self.pkgdir, "files") + os.sep)
+		for parentdir, dirs, files in os.walk(os.path.join(self.pkgdir, "files")):
+			for f in files:
+				full_path = os.path.join(parentdir, f)
+				recursive_files.append(full_path[cut_len:])
+		for f in recursive_files:
 			if not manifest2AuxfileFilter(f):
 				continue
-			self.fhashdict["AUX"][f] = perform_multiple_checksums(self.pkgdir+"files"+os.sep+f, self.hashes)
-		cpvlist = [os.path.join(self.pkgdir.rstrip(os.sep).split(os.sep)[-2], x[:-7]) for x in portage.listdir(self.pkgdir) if x.endswith(".ebuild")]
+			self.fhashdict["AUX"][f] = perform_multiple_checksums(
+				os.path.join(self.pkgdir, "files", f.lstrip(os.sep)), self.hashes)
+		cpvlist = [os.path.join(self._pkgdir_category(), x[:-7]) for x in os.listdir(self.pkgdir) if x.endswith(".ebuild")]
 		distlist = []
 		for cpv in cpvlist:
 			distlist.extend(self._getCpvDistfiles(cpv))
@@ -307,11 +315,14 @@
 			fname = os.path.join(self.distdir, f)
 			if os.path.exists(fname):
 				self.fhashdict["DIST"][f] = perform_multiple_checksums(fname, self.hashes)
-			elif assumeDistfileHashes and f in distfilehashes.keys():
+			elif assumeDistfileHashes and f in distfilehashes:
 				self.fhashdict["DIST"][f] = distfilehashes[f]
 			else:
 				raise FileNotFound(fname)			
-	
+
+	def _pkgdir_category(self):
+		return self.pkgdir.rstrip(os.sep).split(os.sep)[-2]
+
 	def _getAbsname(self, ftype, fname):
 		if ftype == "DIST":
 			absname = os.path.join(self.distdir, fname)
@@ -326,7 +337,7 @@
 			self.checkTypeHashes(t, ignoreMissingFiles=ignoreMissingFiles)
 	
 	def checkTypeHashes(self, idtype, ignoreMissingFiles=False):
-		for f in self.fhashdict[idtype].keys():
+		for f in self.fhashdict[idtype]:
 			self.checkFileHashes(idtype, f, ignoreMissing=ignoreMissingFiles)
 	
 	def checkFileHashes(self, ftype, fname, ignoreMissing=False):
@@ -343,7 +354,7 @@
 			self.checkTypeHashes("AUX", ignoreMissingFiles=False)
 			if checkMiscfiles:
 				self.checkTypeHashes("MISC", ignoreMissingFiles=False)
-			ebuildname = portage.catsplit(cpv)[1]+".ebuild"
+			ebuildname = "%s.ebuild" % self._catsplit(cpv)[1]
 			self.checkFileHashes("EBUILD", ebuildname, ignoreMissing=False)
 		if checkDistfiles:
 			if onlyDistfiles:
@@ -352,26 +363,26 @@
 	
 	def _getCpvDistfiles(self, cpv):
 		""" Get a list of all DIST files associated to the given cpv """
-		return self.db.getfetchlist(cpv, mysettings=self.mysettings, all=True)[1]
+		return self.fetchlist_dict[cpv]
 	
 	def updateFileHashes(self, ftype, fname, checkExisting=True, ignoreMissing=True, reuseExisting=False):
 		""" Regenerate hashes for the given file """
 		if checkExisting:
-			self.checkFileHashes(fname)
+			self.checkFileHashes(ftype, fname, ignoreMissing=ignoreMissing)
 		if not ignoreMissing and not self.fhashdict[ftype].has_key(fname):
 			raise FileNotInManifestException(fname)
 		if not self.fhashdict[ftype].has_key(fname):
 			self.fhashdict[ftype][fname] = {}
 		myhashkeys = list(self.hashes)
 		if reuseExisting:
-			for k in [h for h in self.fhashdict[ftype][fname].keys() if h in myhashkeys]:
+			for k in [h for h in self.fhashdict[ftype][fname] if h in myhashkeys]:
 				myhashkeys.remove(k)
 		myhashes = perform_multiple_checksums(self._getAbsname(ftype, fname), myhashkeys)
 		self.fhashdict[ftype][fname].update(myhashes)
 	
 	def updateTypeHashes(self, idtype, checkExisting=False, ignoreMissingFiles=True):
 		""" Regenerate all hashes for all files of the given type """
-		for fname in self.fhashdict[idtype].keys():
+		for fname in self.fhashdict[idtype]:
 			self.updateFileHashes(idtype, fname, checkExisting)
 	
 	def updateAllHashes(self, checkExisting=False, ignoreMissingFiles=True):
@@ -384,10 +395,23 @@
 		files)."""
 		self.updateTypeHashes("AUX", ignoreMissingFiles=ignoreMissingFiles)
 		self.updateTypeHashes("MISC", ignoreMissingFiles=ignoreMissingFiles)
-		ebuildname = portage.catsplit(cpv)[1]+".ebuild"
+		ebuildname = "%s.ebuild" % self._catsplit(cpv)[1]
 		self.updateFileHashes("EBUILD", ebuildname, ignoreMissingFiles=ignoreMissingFiles)
 		for f in self._getCpvDistfiles(cpv):
 			self.updateFileHashes("DIST", f, ignoreMissingFiles=ignoreMissingFiles)
+
+	def updateHashesGuessType(self, fname, *args, **kwargs):
+		""" Regenerate hashes for the given file (guesses the type and then
+		calls updateFileHashes)."""
+		mytype = self.guessType(fname)
+		if mytype == "AUX":
+			fname = fname[len("files" + os.sep):]
+		elif mytype is None:
+			return
+		myrealtype = self.findFile(fname)
+		if myrealtype is not None:
+			mytype = myrealtype
+		return self.updateFileHashes(mytype, fname, *args, **kwargs)
 
 	def getFileData(self, ftype, fname, key):
 		""" Return the value of a specific (type,filename,key) triple, mainly useful
@@ -410,3 +434,8 @@
 			elif len(mysplit) > 4 and mysplit[0] in portage_const.MANIFEST2_IDENTIFIERS and ((len(mysplit) - 3) % 2) == 0 and not 2 in rVal:
 				rVal.append(2)
 		return rVal
+
+	def _catsplit(self, pkg_key):
+		"""Split a category and package, returning a list of [cat, pkg].
+		This is compatible with portage.catsplit()"""
+		return pkg_key.split("/", 1)

