Modified: bin/emerge
===================================================================
--- bin/emerge	2006-04-21 08:58:17 UTC (rev 3183)
+++ bin/emerge	2006-04-21 19:07:30 UTC (rev 3184)
@@ -784,27 +784,21 @@
 					mysum = [0,0]
 					mycat = match.split("/")[0]
 					mypkg = match.split("/")[1]
+					mycpv = match + "-" + myversion
+					myebuild = portage.portdb.findname(mycpv)
+					pkgdir = os.path.dirname(myebuild)
+					import portage_manifest
+					mf = portage_manifest.Manifest(pkgdir,
+						portage.FetchlistDict(pkgdir, portage.settings),
+						portage.settings["DISTDIR"])
+					mysum[0] = mf.getDistfilesSize(mf.fetchlist_dict[mycpv])
+					mystr = str(mysum[0]/1024)
+					mycount=len(mystr)
+					while (mycount > 3):
+						mycount-=3
+						mystr=mystr[:mycount]+","+mystr[mycount:]
+					mysum[0]=mystr+" kB"
 
-					mydigest = portage.db["/"]["porttree"].dbapi.finddigest(mycat+"/"+mypkg + "-" + myversion)
-
-					try:
-						myfile = open(mydigest,"r")
-						for line in myfile.readlines():
-							mysum[0] += int(line.split(" ")[3])
-						myfile.close()
-						mystr = str(mysum[0]/1024)
-						mycount=len(mystr)
-						while (mycount > 3):
-							mycount-=3
-							mystr=mystr[:mycount]+","+mystr[mycount:]
-						mysum[0]=mystr+" kB"
-					except SystemExit, e:
-						raise # Needed else can't exit
-					except Exception, e:
-						if edebug:
-							print "!!! Exception:",e
-						mysum[0]=" [no/bad digest]"
-
 					if "--quiet" not in myopts:
 						print "     ", darkgreen("Latest version available:"),myversion
 						print "     ", self.getInstallationStatus(mycat+'/'+mypkg)

Modified: pym/portage_manifest.py
===================================================================
--- pym/portage_manifest.py	2006-04-21 08:58:17 UTC (rev 3183)
+++ pym/portage_manifest.py	2006-04-21 19:07:30 UTC (rev 3184)
@@ -486,7 +486,13 @@
 	def _getCpvDistfiles(self, cpv):
 		""" Get a list of all DIST files associated to the given cpv """
 		return self.fetchlist_dict[cpv]
-	
+
+	def getDistfilesSize(self, fetchlist):
+		total_bytes = 0
+		for f in fetchlist:
+			total_bytes += int(self.fhashdict["DIST"][f]["size"])
+		return total_bytes
+
 	def updateFileHashes(self, ftype, fname, checkExisting=True, ignoreMissing=True, reuseExisting=False):
 		""" Regenerate hashes for the given file """
 		if checkExisting:
