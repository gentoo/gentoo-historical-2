=== modified file 'pym/portage.py'
--- pym/portage.py	
+++ pym/portage.py	
@@ -1837,29 +1837,12 @@
 			print "!!! No write access to %s" % mysettings["DISTDIR"]+"/"
 			can_fetch=False
 	else:
-		def distdir_perms(filename):
-			all_applied = True
-			try:
-				all_applied = portage_util.apply_secpass_permissions(filename, gid=portage_gid, mode=0775)
-			except portage_exception.OperationNotPermitted:
-				all_applied = False
-			if not all_applied:
-				writemsg(("!!! Unable to apply group permissions to '%s'." \
-				+ "  Non-root users may experience issues.\n") % filename)
-		distdir_perms(mysettings["DISTDIR"])
 		if use_locks and locks_in_subdir:
 			distlocks_subdir = os.path.join(mysettings["DISTDIR"], locks_in_subdir)
-			try:
-				distdir_perms(distlocks_subdir)
-			except portage_exception.FileNotFound:
-				os.mkdir(distlocks_subdir)
-				distdir_perms(distlocks_subdir)
 			if not os.access(distlocks_subdir, os.W_OK):
 				writemsg("!!! No write access to write to %s.  Aborting.\n" % distlocks_subdir)
 				return 0
 			del distlocks_subdir
-		del distdir_perms
-
 	for myfile in filedict.keys():
 		fetched=0
 		file_lock = None
@@ -2594,26 +2577,13 @@
 					for subdir in kwargs["subdirs"]:
 						mydirs.append(os.path.join(basedir, subdir))
 				for mydir in mydirs:
-					if not makedirs(mydir):
-						raise portage_exception.DirectoryNotFound(
-							"Failed to create directory.")
-					try:
-						initial_stat = os.stat(mydir)
-						apply_secpass_permissions(mydir,
-							gid=portage_gid, mode=dirmode, mask=modemask, stat_cached=initial_stat)
-						result_stat = os.stat(mydir)
-					except OSError, oe:
-						if errno.EPERM == oe.errno:
-							writemsg("!!! %s\n" % oe)
-							raise portage_exception.OperationNotPermitted("stat('%s')" % mydir)
-						raise
+					modified = portage_util.ensure_dirs(mydir,
+						gid=portage_gid, mode=dirmode, mask=modemask)
 					# To avoid excessive recursive stat calls, we trigger
 					# recursion when the top level directory does not initially
 					# match our permission requirements.
-					if kwargs["always_recurse"] or \
-					result_stat.st_gid != initial_stat.st_gid or \
-					result_stat.st_mode & 07777 != initial_stat.st_mode & 07777:
-						if not kwargs["always_recurse"]:
+					if modified or kwargs["always_recurse"]:
+						if modified:
 							writemsg("Adjusting permissions recursively: '%s'" % mydir)
 						def onerror(e):
 							raise	# The feature is disabled if a single error
@@ -2804,28 +2774,29 @@
 		checkme=alist[:]
 
 	if not listonly:
-		for x in ("", "cvs-src"):
-			mydir = os.path.join(mysettings["DISTDIR"], x)
-			try:
-				os.makedirs(mydir)
-			except OSError, oe:
-				if errno.EEXIST == oe.errno:
-					pass
-				elif errno.EPERM == oe.errno:
-					writemsg("!!! %s\n" % str(oe))
-					writemsg("!!! Fetching may fail!\n")
-				else:
-					raise
+		dirmode  = 02070
+		filemode =   060
+		modemask =    02
+		distdir_dirs = ["", "cvs-src"]
+		if "distlocks" in features:
+			distdir_dirs.append(".locks")
 		try:
-			apply_secpass_permissions(mysettings["DISTDIR"],
-				gid=portage_gid, mode=0775, mask=02)
-		except portage_exception.OperationNotPermitted, e:
-			writemsg("Operation Not Permitted: %s\n" % str(e))
-		except portage_exception.FileNotFound, e:
-			writemsg("File Not Found: '%s'\n" % str(e))
-
-		apply_recursive_permissions(os.path.join(mysettings["DISTDIR"], "cvs-src"),
-			gid=portage_gid, dirmode=02770, dirmask=02, filemode=0660, filemask=02)
+			
+			for x in distdir_dirs:
+				mydir = os.path.join(mysettings["DISTDIR"], x)
+				if portage_util.ensure_dirs(mydir, gid=portage_gid, mode=dirmode, mask=modemask):
+					writemsg("Adjusting permissions recursively: '%s'\n" % mydir)
+					def onerror(e):
+						raise # bail out on the first error that occurs during recursion
+					if not apply_recursive_permissions(mydir,
+						gid=portage_gid, dirmode=dirmode, dirmask=modemask,
+						filemode=filemode, filemask=modemask, onerror=onerror):
+						raise portage_exception.OperationNotPermitted(
+							"Failed to apply recursive permissions for the portage group.")
+		except portage_exception.PortageException, e:
+			writemsg("!!! %s\n" % str(e))
+			writemsg("!!! Problem adjusting permissions on DISTDIR='%s'\n" % mysettings["DISTDIR"])
+			writemsg("!!! Fetching may fail!\n")
 
 	# Only try and fetch the files if we are going to need them ... otherwise,
 	# if user has FEATURES=noauto and they run `ebuild clean unpack compile install`,

=== modified file 'pym/portage_util.py'
--- pym/portage_util.py	
+++ pym/portage_util.py	
@@ -462,7 +462,10 @@
 	bits.  When mask=0 is specified, mode bits on the target file are allowed
 	to be a superset of the mode argument (via logical OR).  When mask>0, the
 	mode bits that the target file is allowed to have are restricted via
-	logical XOR."""
+	logical XOR.
+	Returns True if the permissions were modified and False otherwise."""
+
+	modified = False
 
 	if stat_cached is None:
 		try:
@@ -479,6 +482,7 @@
 		(gid != -1 and gid != stat_cached.st_gid):
 		try:
 			os.chown(filename, uid, gid)
+			modified = True
 		except OSError, oe:
 			if oe.errno == errno.EPERM:
 				raise OperationNotPermitted("chown('%s', %i, %i)" % (filename, uid, gid))
@@ -506,6 +510,7 @@
 	if new_mode != -1:
 		try:
 			os.chmod(filename, new_mode)
+			modified = True
 		except OSError, oe:
 			if oe.errno == errno.EPERM:
 				raise OperationNotPermitted("chmod('%s', %s)" % (filename, oct(new_mode)))
@@ -513,6 +518,7 @@
 				raise FileNotFound(filename)
 			else:
 				raise
+	return modified
 
 def apply_stat_permissions(filename, newstat, **kwargs):
 	"""A wrapper around apply_secpass_permissions that gets
@@ -680,3 +686,23 @@
 	except IOError, ioe:
 		f.abort()
 		raise ioe
+
+def ensure_dirs(dir_path, *args, **kwargs):
+	"""Create a directory and call apply_permissions.
+	Returns True if a directory is created or the permissions needed to be
+	modified, and False otherwise."""
+
+	created_dir = False
+
+	try:
+		os.makedirs(dir_path)
+		created_dir = True
+	except OSError, oe:
+		if errno.EEXIST == oe.errno:
+			pass
+		elif  oe.errno in (errno.EPERM, errno.EROFS):
+			raise portage_exception.OperationNotPermitted(str(oe))
+		else:
+			raise
+	perms_modified = apply_permissions(dir_path, *args, **kwargs)
+	return created_dir or perms_modified

