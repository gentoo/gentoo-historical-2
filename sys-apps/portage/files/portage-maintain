#!/usr/bin/env python

import os
import portage
import string
import sys

portagedict={}
os.chdir("/usr/portage")
for x in portage.categories:
	for y in os.listdir(os.getcwd()+"/"+x):
		if not os.path.isdir(os.getcwd()+"/"+x+"/"+y):
			continue
		if y=="CVS":
			continue
		for mypkg in os.listdir(os.getcwd()+"/"+x+"/"+y):
			if mypkg[-7:] != ".ebuild":
				continue
			mypkg=mypkg[:-7]
			mykey=x+"/"+y
			if not portagedict.has_key(mykey):
				portagedict[mykey]=[]
			portagedict[mykey].append([x+"/"+mypkg,portage.pkgsplit(mypkg)])

#format: cat/basepkgname: [ cat/fullpkgname, mysplit ]
installeddict={}
os.chdir("/var/db/pkg")
for x in os.listdir(os.getcwd()):
	for y in os.listdir(os.getcwd()+"/"+x):
		mysplit=portage.pkgsplit(y)
		if not installeddict.has_key(x+"/"+mysplit[0]):
			installeddict[x+"/"+mysplit[0]]=[]
		installeddict[x+"/"+mysplit[0]].append([x+"/"+y,mysplit])


#format: cat/basepkgname: [ cat/fullpkgname, mysplit ]
currentdict={}
mycurrent=open("/usr/portage/current-packages","r")
mylines=mycurrent.readlines()
for x in mylines:
	if x[:2]!="./":
		continue
	myline=string.split(string.strip(x)[2:-7],"/")
	mysplit=portage.pkgsplit(myline[2])
	mykey=myline[0]+"/"+myline[1]
	if not currentdict.has_key(mykey):
		currentdict[mykey]=[]
	currentdict[mykey].append([myline[0]+"/"+myline[2],mysplit])
mycurrent.close()
del mylines



for mypkg in installeddict.keys():
	#if there is one installed version, and one recommended version, and they both
	#are the same version, don't list the package.  This package is up-to-date.
	if (len(installeddict[mypkg])==1) and currentdict.has_key(mypkg): 
		if len(currentdict[mypkg])==1: 
			if portage.pkgcmp(currentdict[mypkg][0][1],installeddict[mypkg][0][1])==0:
				continue
	print "Package",mypkg
	print "Installed version(s):"
	for inspkg in installeddict[mypkg]:
		print " ",inspkg[0]
	# print available portage versions, labelling one as the recommended version
	print "Available versions:"
	if portagedict.has_key(mypkg):
		for curpkg in portagedict[mypkg]:
			print " ",curpkg[0]
	else:
		print " ","(none)"
	print "Recommended version:"
	if currentdict.has_key(mypkg):
		for curpkg in currentdict[mypkg]:
			print " ",curpkg[0]
	else:
		print " ","(none)"
	print
	
"""
for x in installed:
	myebuild="/usr/portage/"+x[0]+"/"+x[2][0]+"/"+x[1]+".ebuild"
	if x not in current:
		if not currentdict.has_key(x[0]+"/"+x[2][0]):
			print "!!!",x[0]+"/"+x[2][0]
			print
			continue
		print "pkg",x[0]+"/"+x[1]+":"
		mydir="/usr/portage/"+x[0]+"/"+x[2][0]
		if not os.path.exists(mydir):
			print mydir,"does not exist."
			continue
		for y in os.listdir(mydir):
			if y[-7:] != ".ebuild":
				continue
			mye=portage.pkgsplit(y[:-7])
			isnew=portage.pkgcmp(mye,x[2])
			if isnew>0:
				outstring="new"
			elif isnew<0:
				outstring="old"
			else:
				outstring="cur"
			if not currentdict.has_key(x[0]+"/"+mye[0]):
				outstring="non !!!"
			else:
				if currentdict[x[0]+"/"+mye[0]][1]==mye:
					outstring=outstring+" >>>"
				else:
					outstring=outstring+"    "
			print "   ",outstring,y
		print
"""
