this is a test
<!--code
x=1
while x<10:
	print "this is really a test!"
	x=x+1
foo="sure I do!"
-->

Do you like the test?

<!--code

print foo

-->

<!--code
print "setting key foo.bar to 23"
setkey("foo.bar",23)
print "getting value for key foo.bar:",getkey("foo.bar")
-->

I will soon add support to automatically save keys to a global file.
In addition, I will add support for macro expansion, so that if something
like this appears in the text file: [net.resolv.domain]

it will automatically be replaced with: 129.24.8.4

If the net.resolv.domain key is set to 129.24.8.4.

The embedded python functionality combined with the simple [macro] expansion
features will make it easy to customize config files -- really easy! 
Administrators will be able to "template-enable" their own config files
within minutes.  And, they have all the power of python.  Look at this example
code:

#this is to simulate the fact that this setting is in global config 
setkey("net.resolv.nameserver",["129.24.8.1","129.24.8.4"])

#this is sample code from /etc/resolv.conf.tmpl
for x in getkey("net.resolv.nameserver"):
	print "nameserver",x

Now, let's see it actually run:

<!--code
setkey("net.resolv.nameserver",["129.24.8.1","129.24.8.4"])
for x in getkey("net.resolv.nameserver"):
	print "nameserver",x
-->

Beautiful, no?  The administrator can embed python in any of his or her
config files!  Also, consider that the administrator doesn't need to study
complex XSL to understand how the global settings are inserted into the
config file. :) Complex actions are possible... even "pulling in" settings
from a network server!  setkey and getkey can be configured to store
registry information on a remote machine or in a database. 
