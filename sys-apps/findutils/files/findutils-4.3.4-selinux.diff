diff -purN findutils-4.3.4.orig/find/Makefile.am findutils-4.3.4/find/Makefile.am
--- findutils-4.3.4.orig/find/Makefile.am	2007-03-07 17:55:47.000000000 -0500
+++ findutils-4.3.4/find/Makefile.am	2007-05-12 22:07:47.498816252 -0400
@@ -2,6 +2,7 @@ AUTOMAKE_OPTIONS = std-options
 localedir = $(datadir)/locale
 # noinst_PROGRAMS = regexprops
 # regexprops_SOURCES = regexprops.c
+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -DWITH_SELINUX
 
 noinst_LIBRARIES = libfindtools.a
 libfindtools_a_SOURCES = finddata.c fstype.c parser.c pred.c tree.c util.c version.c
@@ -26,7 +27,7 @@ endif
 
 EXTRA_DIST = defs.h $(man_MANS)
 INCLUDES = -I../gnulib/lib -I$(top_srcdir)/lib -I$(top_srcdir)/gnulib/lib -I../intl -DLOCALEDIR=\"$(localedir)\"
-LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@
+LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@ -lselinux
 man_MANS = find.1
 SUBDIRS = testsuite
 
diff -purN findutils-4.3.4.orig/find/Makefile.in findutils-4.3.4/find/Makefile.in
--- findutils-4.3.4.orig/find/Makefile.in	2007-04-21 09:04:48.000000000 -0400
+++ findutils-4.3.4/find/Makefile.in	2007-05-12 22:08:43.029980793 -0400
@@ -273,7 +273,7 @@ CPPFLAGS = @CPPFLAGS@
 CROSS_COMPILING_FALSE = @CROSS_COMPILING_FALSE@
 CROSS_COMPILING_TRUE = @CROSS_COMPILING_TRUE@
 CYGPATH_W = @CYGPATH_W@
-DEFS = @DEFS@
+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -DWITH_SELINUX
 DEPDIR = @DEPDIR@
 ECHO_C = @ECHO_C@
 ECHO_N = @ECHO_N@
@@ -502,7 +502,7 @@ libfindtools_a_SOURCES = finddata.c fsty
 @WITH_FTS_TRUE@oldfind_SOURCES = find.c
 @WITH_FTS_FALSE@ftsfind_SOURCES = ftsfind.c
 EXTRA_DIST = defs.h $(man_MANS)
-LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@
+LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@ -lselinux
 man_MANS = find.1
 SUBDIRS = testsuite
 all: all-recursive
diff -purN findutils-4.3.4.orig/find/defs.h findutils-4.3.4/find/defs.h
--- findutils-4.3.4.orig/find/defs.h	2007-04-15 09:09:58.000000000 -0400
+++ findutils-4.3.4/find/defs.h	2007-05-12 22:06:42.675122161 -0400
@@ -140,6 +140,10 @@ int get_statinfo PARAMS((const char *pat
 #define MODE_RWX	(S_IXUSR | S_IXGRP | S_IXOTH | MODE_RW)
 #define MODE_ALL	(S_ISUID | S_ISGID | S_ISVTX | MODE_RWX)
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#endif /*WITH_SELINUX*/
+
 #if 1
 #include <stdbool.h>
 typedef bool boolean;
@@ -357,6 +361,9 @@ struct predicate
     struct dir_id   fileid;	/* samefile */
     mode_t type;		/* type */
     FILE *stream;		/* ls fls fprint0 */
+#ifdef WITH_SELINUX
+    security_context_t scontext; /* scontext */
+#endif /*WITH_SELINUX*/
     struct format_val printf_vec; /* printf fprintf fprint  */
   } args;
 
@@ -520,6 +527,9 @@ boolean pred_used PARAMS((char *pathname
 boolean pred_user PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_writable PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_xtype PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
+#ifdef WITH_SELINUX
+boolean pred_scontext PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
+#endif /* WITH_SELINUX */
 
 
 
@@ -642,6 +652,10 @@ struct options
   /* Optimisation level.  One is the default. 
    */
   unsigned short optimisation_level;
+
+#ifdef WITH_SELINUX
+  int (*x_getfilecon)();
+#endif /* WITH_SELINUX */
 };
 extern struct options options;
 
diff -purN findutils-4.3.4.orig/find/find.1 findutils-4.3.4/find/find.1
--- findutils-4.3.4.orig/find/find.1	2007-04-15 15:02:19.000000000 -0400
+++ findutils-4.3.4/find/find.1	2007-05-12 22:06:42.679122388 -0400
@@ -641,6 +641,9 @@ links: if the \-H or \-P option was spec
 link to a file of type \fIc\fR; if the \-L option has been given, true
 if \fIc\fR is `l'.  In other words, for symbolic links, \-xtype checks
 the type of the file that \-type does not check.
+.IP "\-context \fIscontext\fR"
+.IP "\--context \fIscontext\fR"
+(SELinux only) File has the security context \fIscontext\fR.
 
 .SS ACTIONS
 .IP "\-delete\fR"
@@ -951,6 +954,8 @@ File's numeric user ID.
 File's type (like in ls \-l), U=unknown type (shouldn't happen)
 .IP %Y
 File's type (like %y), plus follow symlinks: L=loop, N=nonexistent
+.IP %Z
+(SELinux only) file's security context.
 .PP
 A `%' character followed by any other character is discarded, but the
 other character is printed (don't rely on this, as further format
diff -purN findutils-4.3.4.orig/find/find.c findutils-4.3.4/find/find.c
--- findutils-4.3.4.orig/find/find.c	2007-04-17 05:04:27.000000000 -0400
+++ findutils-4.3.4/find/find.c	2007-05-12 22:06:42.679122388 -0400
@@ -1250,7 +1250,7 @@ process_path (char *pathname, char *name
 static void
 process_dir (char *pathname, char *name, int pathlen, const struct stat *statp, char *parent)
 {
-  int subdirs_left;		/* Number of unexamined subdirs in PATHNAME. */
+  int subdirs_left=0;		/* Number of unexamined subdirs in PATHNAME. */
   boolean subdirs_unreliable;	/* if true, cannot use dir link count as subdir limif (if false, it may STILL be unreliable) */
   unsigned int idx;		/* Which entry are we on? */
   struct stat stat_buf;
diff -purN findutils-4.3.4.orig/find/parser.c findutils-4.3.4/find/parser.c
--- findutils-4.3.4.orig/find/parser.c	2007-04-15 09:04:26.000000000 -0400
+++ findutils-4.3.4/find/parser.c	2007-05-12 22:23:07.675254119 -0400
@@ -53,6 +53,13 @@
 /* We need <unistd.h> for isatty(). */
 #include <unistd.h> 
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+int optionh_getfilecon(const char *name, security_context_t *p);
+int optionl_getfilecon(const char *name, security_context_t *p);
+int optionp_getfilecon(const char *name, security_context_t *p);
+#endif /*WITH_SELINUX*/
+
 #if ENABLE_NLS
 # include <libintl.h>
 # define _(Text) gettext (Text)
@@ -156,6 +163,9 @@ static boolean parse_noignore_race PARAM
 static boolean parse_warn          PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 static boolean parse_xtype         PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 static boolean parse_quit          PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
+#ifdef WITH_SELINUX
+static boolean parse_scontext      PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
+#endif /*WITH_SELINUX*/
 
 boolean parse_print             PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 
@@ -314,6 +324,8 @@ static struct parser_table const parse_t
   {ARG_TEST, "-help",                 parse_help,    NULL},       /* GNU */
   {ARG_TEST, "version",               parse_version, NULL},	  /* GNU */
   {ARG_TEST, "-version",              parse_version, NULL},	  /* GNU */
+  {ARG_TEST, "context",               parse_scontext, pred_scontext},	/* SELinux */
+  {ARG_TEST, "-context",              parse_scontext, pred_scontext},	/* SELinux */
   {0, 0, 0, 0}
 };
 
@@ -383,10 +395,16 @@ set_follow_state(enum SymlinkOption opt)
 	case SYMLINK_ALWAYS_DEREF:  /* -L */
 	  options.xstat = optionl_stat;
 	  options.no_leaf_check = true;
+#ifdef WITH_SELINUX
+	  options.x_getfilecon = optionl_getfilecon;
+#endif /* WITH_SELINUX */
 	  break;
 	  
 	case SYMLINK_NEVER_DEREF:	/* -P (default) */
 	  options.xstat = optionp_stat;
+#ifdef WITH_SELINUX
+	  options.x_getfilecon = optionp_getfilecon;
+#endif /* WITH_SELINUX */
 	  /* Can't turn no_leaf_check off because the user might have specified 
 	   * -noleaf anyway
 	   */
@@ -395,6 +413,9 @@ set_follow_state(enum SymlinkOption opt)
 	case SYMLINK_DEREF_ARGSONLY: /* -H */
 	  options.xstat = optionh_stat;
 	  options.no_leaf_check = true;
+#ifdef WITH_SELINUX
+	  options.x_getfilecon = optionh_getfilecon;
+#endif /* WITH_SELINUX */
 	}
     }
   options.symlink_handling = opt;
@@ -555,6 +576,94 @@ estimate_timestamp_success_rate(time_t w
  
    The predicate structure is updated with the new information. */
 
+#ifdef WITH_SELINUX
+
+static int
+fallback_getfilecon(const char *name, security_context_t *p, int prev_rv)
+{
+  /* Our original getfilecon() call failed.  Perhaps we can't follow a
+   * symbolic link.  If that might be the problem, lgetfilecon() the link. 
+   * Otherwise, admit defeat. 
+   */
+  switch (errno)
+    {
+    case ENOENT:
+    case ENOTDIR:
+#ifdef DEBUG_STAT
+      fprintf(stderr, "fallback_getfilecon(): getfilecon(%s) failed; falling back on lgetfilecon()\n", name);
+#endif
+      return lgetfilecon(name, p);
+
+    case EACCES:
+    case EIO:
+    case ELOOP:
+    case ENAMETOOLONG:
+#ifdef EOVERFLOW
+    case EOVERFLOW:	    /* EOVERFLOW is not #defined on UNICOS. */
+#endif
+    default:
+      return prev_rv;	       
+    }
+}
+
+
+/* optionh_getfilecon() implements the getfilecon operation when the
+ * -H option is in effect.
+ * 
+ * If the item to be examined is a command-line argument, we follow
+ * symbolic links.  If the getfilecon() call fails on the command-line
+ * item, we fall back on the properties of the symbolic link.
+ *
+ * If the item to be examined is not a command-line argument, we
+ * examine the link itself.
+ */
+int 
+optionh_getfilecon(const char *name, security_context_t *p)
+{
+  if (0 == state.curdepth) 
+    {
+      /* This file is from the command line; deference the link (if it
+       * is a link).  
+       */
+      int rv = getfilecon(name, p);
+      if (0 == rv)
+	return 0;		/* success */
+      else
+	return fallback_getfilecon(name, p, rv);
+    }
+  else
+    {
+      /* Not a file on the command line; do not derefernce the link.
+       */
+      return lgetfilecon(name, p);
+    }
+}
+
+/* optionl_getfilecon() implements the getfilecon operation when the
+ * -L option is in effect.  That option makes us examine the thing the
+ * symbolic link points to, not the symbolic link itself.
+ */
+int 
+optionl_getfilecon(const char *name, security_context_t *p)
+{
+  int rv = getfilecon(name, p);
+  if (0 == rv)
+    return 0;			/* normal case. */
+  else
+    return fallback_getfilecon(name, p, rv);
+}
+
+/* optionp_getfilecon() implements the stat operation when the -P
+ * option is in effect (this is also the default).  That option makes
+ * us examine the symbolic link itself, not the thing it points to.
+ */
+int 
+optionp_getfilecon(const char *name, security_context_t *p)
+{
+  return lgetfilecon(name, p);
+}
+#endif /* WITH_SELINUX */
+
 
 static boolean
 parse_and (const struct parser_table* entry, char **argv, int *arg_ptr)
@@ -927,6 +1036,10 @@ tests (N can be +N or -N or N): -amin N 
       -readable -writable -executable\n\
       -wholename PATTERN -size N[bcwkMG] -true -type [bcdpflsD] -uid N\n\
       -used N -user NAME -xtype [bcdpfls]\n"));
+#ifdef WITH_SELINUX
+  puts (_("\
+      -context CONTEXT\n"));
+#endif /*WITH_SELINUX*/
   puts (_("\
 actions: -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print \n\
       -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit\n\
@@ -2130,6 +2243,29 @@ parse_version (const struct parser_table
   exit (0);
 }
 
+#ifdef WITH_SELINUX
+
+static boolean
+parse_scontext ( const struct parser_table* entry, char **argv, int *arg_ptr)
+{
+  struct predicate *our_pred;
+
+  if ( (argv == NULL) || (argv[*arg_ptr] == NULL) )
+    return( false );
+
+  our_pred = insert_primary(entry);
+  our_pred->need_stat = false;
+#ifdef DEBUG
+  our_pred->p_name = find_pred_name (pred_scontext);
+#endif /*DEBUG*/
+  our_pred->args.scontext = argv[*arg_ptr];;
+
+  (*arg_ptr)++;
+  return( true );
+}
+
+#endif /*WITH_SELINUX*/
+
 static boolean
 parse_xdev (const struct parser_table* entry, char **argv, int *arg_ptr)
 {
@@ -2387,7 +2523,11 @@ insert_fprintf (FILE *fp, const struct p
 	  if (*scan2 == '.')
 	    for (scan2++; ISDIGIT (*scan2); scan2++)
 	      /* Do nothing. */ ;
+#ifdef WITH_SELINUX
+	  if (strchr ("abcdDfFgGhHiklmMnpPsStuUyYZ", *scan2))
+#else
 	  if (strchr ("abcdDfFgGhHiklmMnpPsStuUyY", *scan2))
+#endif
 	    {
 	      segmentp = make_segment (segmentp, format, scan2 - format,
 				       KIND_FORMAT, *scan2, 0,
diff -purN findutils-4.3.4.orig/find/pred.c findutils-4.3.4/find/pred.c
--- findutils-4.3.4.orig/find/pred.c	2007-04-15 11:48:31.000000000 -0400
+++ findutils-4.3.4/find/pred.c	2007-05-12 22:06:42.683122616 -0400
@@ -44,6 +44,14 @@
 #include "stat-time.h"
 #include "dircallback.h"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#endif /*WITH_SELINUX*/
+
+#ifndef FNM_CASEFOLD
+#define FNM_CASEFOLD (1<<4)
+#endif  /*FNM_CASEFOLD*/
+
 #if ENABLE_NLS
 # include <libintl.h>
 # define _(Text) gettext (Text)
@@ -226,6 +234,9 @@ struct pred_assoc pred_table[] =
   {pred_user, "user    "},
   {pred_writable, "writable "},
   {pred_xtype, "xtype   "},
+#ifdef WITH_SELINUX
+  {pred_scontext, "context"},
+#endif /*WITH_SELINUX*/
   {0, "none    "}
 };
 #endif
@@ -929,6 +940,26 @@ do_fprintf(FILE *fp,
 		     mode_to_filetype(stat_buf->st_mode & S_IFMT));
 	  }
 	  break;
+#ifdef WITH_SELINUX
+      case 'Z':               /* SELinux security context */
+        {
+          security_context_t scontext;
+          int rv;
+          rv = (*options.x_getfilecon)(state.rel_pathname, &scontext);
+
+          if ( rv < 0 ) {
+            (void) fprintf(stderr, "getfileconf(%s): %s",
+                           pathname, strerror(errno));
+            (void) fflush(stderr);
+          }
+          else {
+	      segment->text[segment->text_len] = 's';
+	      (void) fprintf (fp, segment->text, scontext);
+	      freecon(scontext);
+          }
+        }
+        break ;
+#endif /* WITH_SELINUX */
 	}
       break;
     }
@@ -1705,6 +1736,34 @@ pred_xtype (char *pathname, struct stat 
    */
   return (pred_type (pathname, &sbuf, pred_ptr));
 }
+  
+
+#ifdef WITH_SELINUX
+
+boolean
+pred_scontext ( pathname, stat_buf, pred_ptr )
+     char *pathname;
+     struct stat *stat_buf;
+     struct predicate *pred_ptr;
+{
+  int rv;
+  security_context_t scontext;
+
+  rv = (* options.x_getfilecon)(state.rel_pathname, &scontext);
+
+  if ( rv < 0 ) {
+    (void) fprintf(stderr, "getfilecon(%s): %s\n", pathname, strerror(errno));
+    (void) fflush(stderr);
+    return ( false );
+  }
+
+  rv = (fnmatch(pred_ptr->args.scontext, scontext,0)==0);
+  freecon(scontext);
+  return rv;
+}
+
+#endif /*WITH_SELINUX*/
+
 
 /*  1) fork to get a child; parent remembers the child pid
     2) child execs the command requested
diff -purN findutils-4.3.4.orig/find/tree.c findutils-4.3.4/find/tree.c
--- findutils-4.3.4.orig/find/tree.c	2007-03-31 14:11:29.000000000 -0400
+++ findutils-4.3.4/find/tree.c	2007-05-12 22:06:42.687122844 -0400
@@ -1285,6 +1285,10 @@ build_expression_tree(int argc, char *ar
   const struct parser_table *entry_close, *entry_print, *entry_open;
   int i, oldi;
 
+#ifdef WITH_SELINUX
+  int is_selinux_enabled_flag = is_selinux_enabled()>0;
+#endif /* WITH_SELINUX */
+
   predicates = NULL;
   
   /* Find where in ARGV the predicates begin by skipping the list of
@@ -1320,6 +1324,16 @@ build_expression_tree(int argc, char *ar
 	}
 
       predicate_name = argv[i];
+
+#ifdef WITH_SELINUX
+      if (! is_selinux_enabled_flag) {
+	if ((strncmp(predicate_name,"-context",strlen("-context"))==0) ||
+	    (strncmp(predicate_name,"--context",strlen("--context"))==0)) {
+	  error (1, 0,_("Error: invalid predicate %s: the kernel is not selinux-enabled.\n"),predicate_name);
+	}
+      }
+#endif
+
       parse_entry = find_parser (predicate_name);
       if (parse_entry == NULL)
 	{
@@ -1518,6 +1532,9 @@ get_new_pred (const struct parser_table 
   last_pred->need_stat = true;
   last_pred->need_type = true;
   last_pred->args.str = NULL;
+#ifdef WITH_SELINUX
+  last_pred->args.scontext = NULL;
+#endif
   last_pred->pred_next = NULL;
   last_pred->pred_left = NULL;
   last_pred->pred_right = NULL;
