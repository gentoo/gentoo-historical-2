--- ./bsect.c.orig	Fri Sep 14 15:02:01 2001
+++ ./bsect.c	Fri Sep 14 15:02:01 2001
@@ -342,6 +342,7 @@
 	else if (!strcasecmp(vga,"ext") || !strcasecmp(vga,"extended"))
 		descr->vga_mode = EXTENDED_VGA;
 	else if (!strcasecmp(vga,"ask")) descr->vga_mode = ASK_VGA;
+	else if (!strcasecmp(vga,"inst")) descr->vga_mode = INST_VGA;
 	else descr->vga_mode = to_number(vga);
 #endif
     }
--- ./second.S.orig	Fri Sep 14 15:02:01 2001
+++ ./second.S	Mon Sep 17 12:57:10 2001
@@ -1029,11 +1029,152 @@
 	or	cl,cl		! no errors ?
 	jnz	pwfail		! no -> fail
 	cmp	byte ptr (si),#0 ! at end ?
-	je	doboot		! yes -> continue booting
+	jne	pwfail		! yes -> continue booting
+	br	doboot
 pwfail:	mov	bx,#msg_pf	! display an error message
 	call	say
 	br	iloop		! get next input
 
+!	Test if the monitor can display a vga mode
+!	mode in ax, returns ax if success, otherwise 0
+montest:
+	push	es
+	push	di
+	push	bx
+	push	cx
+	push	dx
+	push	ax
+	push    #0
+	pop     es
+	mov     di,#0xfc00
+	xor	cx,cx
+	seg	es
+	mov	0xfc23,cx
+	xor	dx,dx
+	mov     bx,#1
+	mov	ax,#0x4f15
+	int     0x10
+	cmp     ax,#0x4f
+	pop	ax
+	jnz     monno
+	mov	bx,ax
+	sub	bx,#0x100
+	cmp	bx,#0x1c
+	jnb	monno
+	seg	cs
+	mov	bl,monbits(bx)
+	xor	bh,bh
+	seg	es
+	mov	cx,0xfc23
+	or	cx,cx
+	jnz	nofsc
+	call	fscscan
+nofsc:	and	cl,#0xfe
+	bt	cx,bx
+	jc	monok
+monno:	xor	ax,ax
+monok:	pop	dx
+	pop	cx
+	pop	bx
+	pop	di
+	pop	es
+	ret
+
+monbits:
+	.byte	5,5,9,9,14,14,15,15,0,0,0,0,0,0,0,0
+	.byte	5,5,5,9,9,9,14,14,14,15,15,15
+
+!	return in cx the bits for FSC notebooks.
+fscscan:
+	push	ds
+	push	si
+	push	di
+	push	ax
+	push	bx
+	push	#0xf000
+	pop	ds
+	xor	di,di
+fscnn:	cmp	dword ptr (di),#0x696a7546
+	jnz	fscn
+	cmp	dword ptr 4(di),#0x20757374
+	jnz	fscn
+	mov	cx,#0x20
+	xor	bx,bx
+	mov	si,di
+fscsig:	lodsb
+	add	bl,al
+	dec	cx
+	jnz	fscsig
+	or	bl,bl
+	jnz	fscn
+	mov	al,23(di)
+	and	al,#0xf0
+	jnz	fscbad
+	mov	bl,21(di)
+	and	bx,#0xf0
+	shr	bx,#3
+	seg	cs
+	mov	cx,fscbits(bx)
+	jmp	fscok
+fscn:	add	di,#0x10
+	jnz	fscnn
+fscbad:	xor	cx,cx
+fscok:	pop	bx
+	pop	ax
+	pop	di
+	pop	si
+	pop	ds
+	ret
+	
+fscbits:
+	.word	0,0x0020,0x0200,0x4000,0x8000,0,0,0
+	.word	0,0,0,0,0,0,0,0
+
+!	Test if the driver can display a vga mode
+!	mode in ax, returns ax if success, otherwise 0
+vgatest:
+	push	es
+	push	di
+	push	bx
+	push	cx
+	push	dx
+	push	ax
+	push    #0
+	pop     es
+	mov	cx,ax
+	xor	ax,ax
+	seg	es
+	mov	0xfc00+0x28,ax
+	seg	es
+	mov	0xfc00+0x2a,ax
+	mov     di,#0xfc00
+	mov     ax,#0x4f01
+	int     0x10
+	cmp     ax,#0x4f
+	jnz     vgano
+	seg	es
+	mov	ax,0xfc00
+	and	ax,#0x99
+	cmp	ax,#0x99
+	jnz	vgano
+	seg	es
+	mov     ax,0xfc00+0x28
+	seg	es
+	or      ax,0xfc00+0x2a
+	jz      vgano
+	pop	ax
+	jmp	vgayes
+vgano:	pop	ax
+	xor	ax,ax
+vgayes:	pop	dx
+	pop	cx
+	pop	bx
+	pop	di
+	pop	es
+	ret
+
+
+
 ! Boot the image BX points to
 
 doboot:
@@ -1245,7 +1386,32 @@
 	jmp	vgaset
 vganorm:test	bx,#FLAG_VGA
 	jz	novga
-vgaset:	seg	es
+vgaset:
+#ifdef NORMAL_VGA
+	cmp     ax,#INST_VGA
+	jnz     vganoi
+	mov	ax,#0x117
+	call	vgatest
+	or	ax,ax
+	jz	vga2
+	call	montest
+	or	ax,ax
+	jnz	vga3
+vga2:	mov	ax,#0x114
+	call	vgatest
+	or	ax,ax
+	jz	vga4
+	call	montest
+	or	ax,ax
+	jnz	vga3
+vga4:	mov	ax,#0x101
+	call	vgatest
+	or	ax,ax
+	jnz	vga3
+     	mov	ax,#NORMAL_VGA-0x0200
+vga3:	add	ax,#0x200
+#endif
+vganoi: seg     es
 	mov	506,ax
 novga:	push	bx		! use flags (BX) later
 	test	bx,#FLAG_LOCK	! ... lock target ?
@@ -2257,6 +2423,9 @@
 	.byte	0
 	.word	NORMAL_VGA
 	.ascii	"NORMAL"
+	.byte   0
+	.word   INST_VGA
+	.ascii  "INST"
 	.byte	0
 #endif
 	.word	0
--- ./lilo.h.orig	Fri Sep 14 15:02:01 2001
+++ ./lilo.h	Fri Sep 14 15:02:01 2001
@@ -151,6 +151,7 @@
 #define FLAG_FALLBACK	64	/* fallback command line exists */
 
 #define VGA_NOCOVR	0x8000	/* VGA setting not overridden on command line */
+#define INST_VGA	0xfff0	/* test for framebuffer at vga=771 */
 
 #define SER_DFL_PRM	0xa3	/* default serial parameters: 2400n8 */
 
--- ./lilo.c.orig	Fri Sep 14 15:02:01 2001
+++ ./lilo.c	Fri Sep 14 15:02:01 2001
@@ -170,6 +170,9 @@
 			    case ASK_VGA:
 				printf("ASK\n");
 				break;
+			    case INST_VGA:
+				printf("INST\n");
+				break;
 			    default:
 				printf("%d (0x%04x)\n",
 				  descrs.d.descr[image].vga_mode,
