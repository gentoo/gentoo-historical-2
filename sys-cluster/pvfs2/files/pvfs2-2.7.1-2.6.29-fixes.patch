From a23f33d2a86735194b42e3f84f2fbfb7e7d9e9df Mon Sep 17 00:00:00 2001
From: Justin Bronder <jsbronder@gmail.com>
Date: Sun, 27 Sep 2009 09:49:42 -0400
Subject: [PATCH] 2.6.29 fixes.

Backport of:
http://www.pvfs.org/fisheye/changelog/PVFS/?cs=MAIN:pcarns:20090401212735
http://www.pvfs.org/fisheye/changelog/PVFS/?cs=MAIN:pcarns:20090401202748
---
 maint/config/kernel.m4              |   21 ++++++++++++++++++++-
 pvfs2-config.h.in                   |    3 +++
 src/kernel/linux-2.6/acl.c          |   21 ++++++++++++++++-----
 src/kernel/linux-2.6/inode.c        |    5 +++++
 src/kernel/linux-2.6/pvfs2-kernel.h |   13 +++++++++++++
 src/kernel/linux-2.6/pvfs2-utils.c  |   16 +++++++++++++++-
 6 files changed, 72 insertions(+), 7 deletions(-)

diff --git a/maint/config/kernel.m4 b/maint/config/kernel.m4
index 15123de..4e2abc4 100644
--- a/maint/config/kernel.m4
+++ b/maint/config/kernel.m4
@@ -20,7 +20,7 @@ AC_DEFUN([AX_KERNEL_FEATURES],
         dnl we probably need additional includes if this build is intended
         dnl for a different architecture
 	if test -n "${ARCH}" ; then
-		CFLAGS="$CFLAGS -I$lk_src/arch/${ARCH}/include"
+		CFLAGS="$CFLAGS -I$lk_src/arch/${ARCH}/include -I$lk_src/arch/${ARCH}/include/asm/mach-default"
 	fi
 
 	AC_MSG_CHECKING(for i_size_write in kernel)
@@ -985,5 +985,24 @@ AC_DEFUN([AX_KERNEL_FEATURES],
 	AC_MSG_RESULT(no)
 	)
 
+    dnl newer 2.6 kernels (2.6.29-ish) use current_fsuid() macro instead
+    dnl of accessing task struct fields directly
+    tmp_cflags=$CFLAGS
+    CFLAGS="$CFLAGS -Werror"
+    AC_MSG_CHECKING(for current_fsuid)
+    AC_TRY_COMPILE([
+        #define __KERNEL__
+        #include <linux/sched.h>
+        #include <linux/cred.h>
+    ], [
+        int uid = current_fsuid();
+    ],
+    AC_MSG_RESULT(yes)
+    AC_DEFINE(HAVE_CURRENT_FSUID, 1, [Define if cred.h contains current_fsuid]),
+    AC_MSG_RESULT(no)
+    )
+    CFLAGS=$tmp_cflags
+
+
 	CFLAGS=$oldcflags
 ])
diff --git a/pvfs2-config.h.in b/pvfs2-config.h.in
index e08a89d..de97472 100644
--- a/pvfs2-config.h.in
+++ b/pvfs2-config.h.in
@@ -43,6 +43,9 @@
 /* Define if third param (message) to DB error callback function is const */
 #undef HAVE_CONST_THIRD_PARAMETER_TO_DB_ERROR_CALLBACK
 
+/* Define if cred.h contains current_fsuid */
+#undef HAVE_CURRENT_FSUID
+
 /* Define if DB error callback function takes dbenv parameter */
 #undef HAVE_DBENV_PARAMETER_TO_DB_ERROR_CALLBACK
 
diff --git a/src/kernel/linux-2.6/acl.c b/src/kernel/linux-2.6/acl.c
index 252a445..290851b 100644
--- a/src/kernel/linux-2.6/acl.c
+++ b/src/kernel/linux-2.6/acl.c
@@ -409,6 +409,11 @@ pvfs2_xattr_set_acl(struct inode *inode, int type, const void *value,
 {
     struct posix_acl *acl;
     int error;
+#ifdef HAVE_CURRENT_FSUID
+    int fsuid = current_fsuid();
+#else
+    int fsuid = current->fsuid;
+#endif
 
     gossip_debug(GOSSIP_ACL_DEBUG, "pvfs2_xattr_set_acl called with size %ld\n",
             (long)size);
@@ -420,11 +425,11 @@ pvfs2_xattr_set_acl(struct inode *inode, int type, const void *value,
         return -EOPNOTSUPP;
     }
     /* Are we capable of setting acls on a file for which we should not be? */
-    if ((current->fsuid != inode->i_uid) && !capable(CAP_FOWNER))
+    if ((fsuid != inode->i_uid) && !capable(CAP_FOWNER))
     {
         gossip_err("pvfs2_xattr_set_acl: operation not permitted "
                 "(current->fsuid %d), (inode->owner %d)\n", 
-                current->fsuid, inode->i_uid);
+                fsuid, inode->i_uid);
         return -EPERM;
     }
     if (value) 
@@ -673,6 +678,12 @@ static int pvfs2_check_acl(struct inode *inode, int mask)
 
 int pvfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
 {
+#ifdef HAVE_CURRENT_FSUID
+    int fsuid = current_fsuid();
+#else
+    int fsuid = current->fsuid;
+#endif
+
 #ifdef HAVE_GENERIC_PERMISSION
     int ret;
 
@@ -684,7 +695,7 @@ int pvfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
                 "inode->i_uid = %d, inode->i_gid = %d "
                 "in_group_p = %d "
                 "(ret = %d)\n",
-                llu(get_handle_from_ino(inode)), mask, inode->i_mode, current->fsuid, 
+                llu(get_handle_from_ino(inode)), mask, inode->i_mode, fsuid, 
                 inode->i_uid, inode->i_gid, 
                 in_group_p(inode->i_gid),
                 ret);
@@ -709,7 +720,7 @@ int pvfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
             "mode = %o current->fsuid = %d "
             "inode->i_uid = %d, inode->i_gid = %d"
             "in_group_p = %d\n", 
-            llu(get_handle_from_ino(inode)), mask, mode, current->fsuid,
+            llu(get_handle_from_ino(inode)), mask, mode, fsuid,
             inode->i_uid, inode->i_gid,
             in_group_p(inode->i_gid));
 
@@ -727,7 +738,7 @@ int pvfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
         gossip_err("pvfs2_permission: cannot write to an immutable file!\n");
         return -EACCES;
     }
-    if (current->fsuid == inode->i_uid) 
+    if (fsuid == inode->i_uid) 
     {
         mode >>= 6;
     }
diff --git a/src/kernel/linux-2.6/inode.c b/src/kernel/linux-2.6/inode.c
index 9a38f59..8651f29 100644
--- a/src/kernel/linux-2.6/inode.c
+++ b/src/kernel/linux-2.6/inode.c
@@ -532,8 +532,13 @@ struct inode *pvfs2_get_custom_inode_common(
                 "pvfs2_get_custom_inode_common: inode: %p, inode->i_mode %o\n",
                 inode, inode->i_mode);
         inode->i_mapping->host = inode;
+#ifdef HAVE_CURRENT_FSUID
+        inode->i_uid = current_fsuid();
+        inode->i_gid = current_fsgid();
+#else
         inode->i_uid = current->fsuid;
         inode->i_gid = current->fsgid;
+#endif
         inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;
         inode->i_size = PAGE_CACHE_SIZE;
 #ifdef HAVE_I_BLKSIZE_IN_STRUCT_INODE
diff --git a/src/kernel/linux-2.6/pvfs2-kernel.h b/src/kernel/linux-2.6/pvfs2-kernel.h
index ca3b10b..0beb386 100644
--- a/src/kernel/linux-2.6/pvfs2-kernel.h
+++ b/src/kernel/linux-2.6/pvfs2-kernel.h
@@ -1162,6 +1162,18 @@ static inline struct dentry* pvfs2_d_splice_alias(struct dentry *dentry, struct
     return d_splice_alias(inode, dentry);
 }
 
+#ifdef HAVE_CURRENT_FSUID 
+#define fill_default_sys_attrs(sys_attr,type,mode)\
+do                                                \
+{                                                 \
+    sys_attr.owner = current_fsuid();             \
+    sys_attr.group = current_fsgid();             \
+    sys_attr.size = 0;                            \
+    sys_attr.perms = PVFS_util_translate_mode(mode,0); \
+    sys_attr.objtype = type;                      \
+    sys_attr.mask = PVFS_ATTR_SYS_ALL_SETABLE;    \
+} while(0)
+#else
 #define fill_default_sys_attrs(sys_attr,type,mode)\
 do                                                \
 {                                                 \
@@ -1172,6 +1184,7 @@ do                                                \
     sys_attr.objtype = type;                      \
     sys_attr.mask = PVFS_ATTR_SYS_ALL_SETABLE;    \
 } while(0)
+#endif /* HAVE_CURRENT_FSUID */
 
 #endif /* PVFS2_LINUX_KERNEL_2_4 */
 
diff --git a/src/kernel/linux-2.6/pvfs2-utils.c b/src/kernel/linux-2.6/pvfs2-utils.c
index 380df79..ec35ceb 100644
--- a/src/kernel/linux-2.6/pvfs2-utils.c
+++ b/src/kernel/linux-2.6/pvfs2-utils.c
@@ -19,8 +19,13 @@ int pvfs2_gen_credentials(
     if (credentials)
     {
         memset(credentials, 0, sizeof(PVFS_credentials));
+#ifdef HAVE_CURRENT_FSUID
+        credentials->uid = current_fsuid();
+        credentials->gid = current_fsgid();
+#else
         credentials->uid = current->fsuid;
         credentials->gid = current->fsgid;
+#endif
 
         ret = 0;
     }
@@ -716,6 +721,7 @@ ssize_t pvfs2_inode_getxattr(struct inode *inode, const char* prefix,
     pvfs2_kernel_op_t *new_op = NULL;
     pvfs2_inode_t *pvfs2_inode = NULL;
     ssize_t length = 0;
+    int fsuid, fsgid;
 
     if (name == NULL || (size > 0 && buffer == NULL))
     {
@@ -730,8 +736,16 @@ ssize_t pvfs2_inode_getxattr(struct inode *inode, const char* prefix,
     }
     if (inode)
     {
+#ifdef HAVE_CURRENT_FSUID
+        fsuid = current_fsuid();
+        fsgid = current_fsgid();
+#else
+        fsuid = current->fsuid;
+        fsgid = current->fsgid;
+#endif
+
         gossip_debug(GOSSIP_XATTR_DEBUG, "getxattr on inode %llu, name %s (uid %o, gid %o)\n", 
-                llu(get_handle_from_ino(inode)), name, current->fsuid, current->fsgid);
+                llu(get_handle_from_ino(inode)), name, fsuid, fsgid);
         pvfs2_inode = PVFS2_I(inode);
         /* obtain the xattr semaphore */
         down_read(&pvfs2_inode->xattr_sem);
-- 
1.6.3.3

