#!/bin/bash

source ${ROOT}/etc/rc.d/config/functions

if [ "$ROOT" != "" ] || [ "$ROOT" = "/" ]
then
	eerror "nvidia-setup must be run under Gentoo Linux directly."
	eerror "Please boot your system mounted at $ROOT, and then run"
	eerror "/usr/src/nvidia/nvidia-setup.  Make a note so you don't"
	eerror "forget :)"
	exit 1
fi
if [ "$DISPLAY" != "" ]
then
	eerror "Please make sure X is not running, then rerun nvidia-setup"
	eerror "If X isn't running, please temporarily unset DISPLAY and"
	eerror "run nvidia-setup again."
	exit 1
fi
clear
echo "Step 1: Selecting AGP code"
echo
echo "The NVdriver kernel module can be compiled to use AGPGART or NVAGP AGP access"
echo "code.  Choose the best match for your particular motherboard AGP chipset."
echo "Here's some information about your AGP chipset that I gleaned from /proc/pci:"
echo
echo `cat /proc/pci | grep AGP | grep -v VGA`
echo
echo "Based on this information, you'll need to determine whether to use AGPGART or"
echo "NVAGP.  Here's a popular motherboard AGP chipset compatibility list:"
cat << FOOFOO 

Intel: 440BX   NVAGP   / AGPGART (doesn't work for some people)
       810     NVAGP   / AGPGART
       815(e)  NVAGP   / AGPGART (w/ 815 patch)
Via:   Apollo  AGPGART / NVAGP
       MVP3    AGPGART
       MVP4    AGPGART
       KX133   NVAGP
       KT133   NVAGP
ALi:   ...     AGPGART (2.4.0+,  2.2.18 w/ ALi patch)
SiS:   ...     AGPGART 
FOOFOO
echo
agptype=""
while [ "$agptype" != "a" ] && [ "$agptype" != "n" ]
do
	read -p "[a]GPGART or [n]VAGP > " agptype
done
clear
echo "Step 2: Compiling and installing the NVdriver module"
echo
cd /usr/src/nvidia/NVIDIA_kernel-0.9-5
make clean
if [ "$agptype" = "n" ]
then
	make NVdriver BUILD_PARAMS=NOAGPGART
else
	make NVdriver
fi
if [ $? -ne 0 ]
then
	eerror "Compilation failed... exiting."
	exit 1
fi
make install
echo Compliation complete.  Press any key to continue.
read
clear
echo "Step 3: Setting up module stuff"
echo
echo "Time to modify your /etc/modules/`uname -r` file so that"
echo "NVdriver will be autoloaded.
echo
echo "Press any key to begin."
read
modconf="/etc/modules/"`uname -r`

if [ -f $modconf ] ; then
	modtmp=/tmp/conf$$
	sed '/^alias.*char-major-.*NVdriver/d' < $modconf > $modtmp
	echo "alias char-major-195 NVdriver" >> $modtmp
	mv $modtmp $modconf
fi
echo Modification complete.  Press any key to continue.
read
clear
echo "Step 4: Install accelerated OpenGL"
echo
echo "nVidia accelerated OpenGL libraries are now going to be installed,"
echo "and all old Xfree86 OpenGL libraries and extensions will be backed"
echo "up into a directory called 'old' in the directory that the original"
echo "files existed."
echo "Press any key to begin the accelerated OpenGL installation process."
read
if [ ! -e /usr/X11R6/lib/old ]
then
	mkdir /usr/X11R6/lib/old
fi
mv /usr/X11R6/lib/libGL.* /usr/X11R6/lib/old
extdir=/usr/X11R6/lib/modules/extensions
if [ ! -e ${extdir}/old ]
then
	mkdir ${extdir}/old
fi
if [ -e ${extdir}/libGLcore.a ]
then
	mv ${extdir}/libGLcore.a ${extdir}/old
fi
if [ -e ${extdir}/libglx.a ]
then
	mv ${extdir}/libglx.a ${extdir}/old
fi
#all the old Xfree86 files should be out of the way.  Now to install the
#nice new stuff
cd /usr/src/nvidia/NVIDIA_GLX-0.9-5
make ROOT=${D} install
/sbin/ldconfig
echo
echo "Are you using DEVFS?  If you don't know what it is, then answer no."
echo "If you answer no, this script will create nvidia devices in /dev for you."
echo
devfs=""
while [ "$devfs" != "y" ] && [ "$devfs" != "n" ]
do
	read -p "y/n> " devfs
done
if [ "$devfs" = "y" ]
then
	for i in 0 1 2 3 4; do
		mknod ${D}/dev/nvidia$i c 195 $i
	done
	mknod ${D}/dev/nvidiactl c 195 255
	chmod 0666 ${D}/dev/nvidia*   
fi
echo
echo "nVidia OpenGL libraries and devices installed."
echo "Press any key to continue to the next step."
read
clear
echo "Step 5: Final configuration"
echo
echo "The final configuration steps are left up to you.  To use nVidia accelerated"
echo "drivers, you must edit your /etc/X11/XF86Config, and change a line that looks"
echo "like this:"
echo "	Driver	[some text here]"
echo
echo "to this:
echo "  Driver \"nvidia\""
echo 
echo "You'll also want to configure this file so that your modules section looks"
echo "something like this:"
cat << FOOBAR

Section "Module"
	Load        "extmod"
	Load        "xie"
	Load        "dbe"   # Double buffer extension
	Load    	"ddc"
	Load        "type1"
	Load        "freetype"
	Load       	"glx"   # :)) nVidia :)) <--- WOO HOO!!!
EndSection  
FOOBAR
echo 
echo "Press any key to continue."
read
echo "Step 5: Final configuration, continued"
echo
echo "Additionally, if you want the nVidia kernel module to load when your system"
echo "boots, add a single line with the word "NVdriver" on it to your"
echo "/etc/rc.d/config/modules file."
echo
echo "That's about all.  To verify your nVidia configuration, you can run the"
echo "nv_check.sh script, also in the /usr/src/nvidia directory :)
echo
echo "Finally, run this script once every time you upgrade to a new kernel."
echo "You'll need to run it after you've rebooted and are using the new kernel."
echo "You can also rerun this script if your nVidia configuration somehow"
echo "gets messed up.  Again, the /usr/src/nvidia/nv_check.sh script is an"
echo "excellent tool to diagnose such problems."

echo 
echo "[DONE] :)"

