# ChangeLog for dev-libs/aterm
# Copyright 2002-2004 Gentoo Foundation; Distributed under the GPL v2
# $Header: /var/cvsroot/gentoo-x86/dev-libs/aterm/ChangeLog,v 1.18 2004/08/18 13:09:35 karltk Exp $

  18 Aug 2004; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-2.2.ebuild:
  Marked stable on x86.

*aterm-2.2 (17 Jul 2004)

  17 Jul 2004; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-2.2.ebuild:
  New upstream version. Ebuild submitted by myself.

*aterm-2.1 (11 Jun 2004)

  11 Jun 2004; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-2.1.ebuild:
  New upstream version. Ebuild submitted by myself.

  15 May 2004; Bryan Østergaard <kloeri@gentoo.org> aterm-1.6.7.ebuild,
  aterm-2.0.5.ebuild:
  Alpha keywording.

*aterm-2.0.5 (01 Apr 2004)

  01 Apr 2004; Karl Trygve Kalleberg <karltk@gentoo.org>
  aterm-2.0.5.ebuild : New upstream version. No joke.
  
  04 Mar 2004; Jason Wever <weeve@gentoo.org> aterm-1.6.7.ebuild:
  Stable on sparc.

*aterm-2.0 (17 Feb 2004)

  17 Feb 2004; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-2.0.ebuild :
  New upstream version.
  
  16 Feb 2004; Aron Griffis <agriffis@gentoo.org> aterm-1.6.7.ebuild:
  add ~alpha and ~ia64

  16 Dec 2003; Jason Wever <weeve@gentoo.org> aterm-1.6.7.ebuild:
  Added ~sparc keyword to fix broken dependencies for dev-lang/stratego.

  20 Jan 2003; Jon Nall <nall@gentoo.org> aterm-1.6.7.ebuild: :
  keyworded ~ppc
  
  14 Jan 2003; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-1.6.7.ebuild:
  Unmasked. Needed by dev-lang/stratego-0.8.1.
 
*aterm-1.6.7 (19 Oct 2002)

  19 Oct 2002; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-1.6.7.ebuild files/digest-aterm-1.6.7 :
  New upstream version.

*aterm-1.6.6 (11 Apr 2002)

  11 Apr 2002; Karl Trygve Kalleberg <karltk@gentoo.org> aterm-1.6.6.ebuild files/digest-aterm-1.6.6:

  ATerm (short for Annotated Term) is an abstract data type designed for the 
  exchange of tree-like data structures between distributed applications.

  The ATerm library forms a comprehensive procedural interface which enables
  creation and manipulation of ATerms in C and Java. The ATerm implementation 
  is based on maximal subterm sharing and automatic garbage collection.

  A binary exchange format for the concise representation of ATerms (sharing 
  preserved) allows the fast exchange of ATerms between applications. In a 
  typical application---parse trees which contain considerable redundant 
  information---less than 2 bytes are needed to represent a node in memory, 
  and less than 2 bits are needed to represent it in binary format. The 
  implementation of ATerms scales up to the manipulation of ATerms in the 
  giga-byte range.

