diff -NrU5 libxml-1.8.17.original/parser.c libxml-1.8.17/parser.c
--- libxml-1.8.17.original/parser.c	2009-08-13 20:14:27.000000000 +0000
+++ libxml-1.8.17/parser.c	2009-08-13 20:15:38.000000000 +0000
@@ -5162,15 +5162,19 @@
 	    if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
 		ctxt->sax->error(ctxt->userData, 
 		                 "Name expected in NOTATION declaration\n");
 	    ctxt->wellFormed = 0;
 	    ctxt->disableSAX = 1;
-	    return(ret);
+            xmlFreeEnumeration(ret);
+	    return(NULL);
 	}
 	cur = xmlCreateEnumeration(name);
 	xmlFree(name);
-	if (cur == NULL) return(ret);
+	if (cur == NULL) {
+            xmlFreeEnumeration(ret);
+            return(NULL);
+        }
 	if (last == NULL) ret = last = cur;
 	else {
 	    last->next = cur;
 	    last = cur;
 	}
@@ -5181,13 +5185,12 @@
 	if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
 	    ctxt->sax->error(ctxt->userData,
 	                     "')' required to finish NOTATION declaration\n");
 	ctxt->wellFormed = 0;
 	ctxt->disableSAX = 1;
-	if ((last != NULL) && (last != ret))
-	    xmlFreeEnumeration(last);
-	return(ret);
+        xmlFreeEnumeration(ret);
+        return(NULL);
     }
     NEXT;
     return(ret);
 }
 
@@ -5230,15 +5233,19 @@
 	    if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
 		ctxt->sax->error(ctxt->userData, 
 		                 "NmToken expected in ATTLIST enumeration\n");
 	    ctxt->wellFormed = 0;
 	    ctxt->disableSAX = 1;
-	    return(ret);
+            xmlFreeEnumeration(ret);
+            return(NULL);
 	}
 	cur = xmlCreateEnumeration(name);
 	xmlFree(name);
-	if (cur == NULL) return(ret);
+	if (cur == NULL) {
+            xmlFreeEnumeration(ret);
+            return(NULL);
+        }
 	if (last == NULL) ret = last = cur;
 	else {
 	    last->next = cur;
 	    last = cur;
 	}
@@ -5249,11 +5256,12 @@
 	if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
 	    ctxt->sax->error(ctxt->userData,
 	                     "')' required to finish ATTLIST enumeration\n");
 	ctxt->wellFormed = 0;
 	ctxt->disableSAX = 1;
-	return(ret);
+        xmlFreeEnumeration(ret);
+        return(NULL);
     }
     NEXT;
     return(ret);
 }
 
@@ -5713,17 +5721,29 @@
 (xmlParserCtxtPtr ctxt) {
     xmlElementContentPtr ret = NULL, cur = NULL, last = NULL, op = NULL;
     xmlChar *elem;
     xmlChar type = 0;
 
+    if (ctxt->depth > 128) {
+        ctxt->errNo = XML_ERR_ELEMCONTENT_NOT_FINISHED;
+        if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
+            ctxt->sax->error(ctxt->userData, 
+                "xmlParseElementChildrenContentDecl : depth %d too deep\n",
+                             ctxt->depth);
+        ctxt->wellFormed = 0;
+        ctxt->disableSAX = 1;
+	return(NULL);
+    }
     SKIP_BLANKS;
     GROW;
     if (RAW == '(') {
         /* Recurse on first child */
 	NEXT;
 	SKIP_BLANKS;
+        ctxt->depth++;
         cur = ret = xmlParseElementChildrenContentDecl(ctxt);
+        ctxt->depth--;
 	SKIP_BLANKS;
 	GROW;
     } else {
 	elem = xmlParseNameComplex(ctxt);
 	if (elem == NULL) {
@@ -5863,11 +5883,13 @@
 	GROW;
 	if (RAW == '(') {
 	    /* Recurse on second child */
 	    NEXT;
 	    SKIP_BLANKS;
+            ctxt->depth++;
 	    last = xmlParseElementChildrenContentDecl(ctxt);
+            ctxt->depth--;
 	    SKIP_BLANKS;
 	} else {
 	    elem = xmlParseNameComplex(ctxt);
 	    if (elem == NULL) {
 		ctxt->errNo = XML_ERR_ELEMCONTENT_NOT_STARTED;
