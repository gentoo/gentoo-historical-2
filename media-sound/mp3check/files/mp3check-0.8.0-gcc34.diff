diff -ur mp3check-0.8.0/tmap.h mp3check-0.8.0.gcc34/tmap.h
--- mp3check-0.8.0/tmap.h	2002-12-03 23:00:57.000000000 +0100
+++ mp3check-0.8.0.gcc34/tmap.h	2004-09-15 19:20:24.727493932 +0200
@@ -54,7 +54,7 @@
    // new functionality
 
    /// return whether an element with key is contained or not
-   bool contains(const K& key) const { return find(key) != end(); }
+   bool contains(const K& key) const { return find(key) != this->end(); }
    /// access element read only (const)
 // g++ 2.95.2 does not allow this:
 // const T& operator[](const K& key) const { const_iterator i = find(key); if(i != end()) return i->second; else throw TNotFoundException(); } // throw(TNotFoundException)
diff -ur mp3check-0.8.0/tstring.cc mp3check-0.8.0.gcc34/tstring.cc
--- mp3check-0.8.0/tstring.cc	2003-01-27 22:21:17.000000000 +0100
+++ mp3check-0.8.0.gcc34/tstring.cc	2004-09-15 19:31:52.383825721 +0200
@@ -714,7 +714,7 @@
 
 void tstring::replaceUnprintable(bool only_ascii) {
    for(size_t i = 0; i < rep->len; i++) {
-      unsigned char& c = (unsigned char)(*rep)[i];
+      unsigned char& c = (unsigned char&)(*rep)[i];
       if(!isprint(c)) {
 	 if(c < ' ') {
 	    c = '!';
diff -ur mp3check-0.8.0/tvector.h mp3check-0.8.0.gcc34/tvector.h
--- mp3check-0.8.0/tvector.h	2002-12-03 23:00:57.000000000 +0100
+++ mp3check-0.8.0.gcc34/tvector.h	2004-09-15 19:22:32.756649251 +0200
@@ -60,13 +60,13 @@
    /// append an element to the end
    const tvector& operator += (const T& a) { push_back(a); return *this; }
    /// append another tvector to the end
-   const tvector& operator += (const tvector& a) { insert(end(), a.begin(), a.end()); return *this; }
+   const tvector& operator += (const tvector& a) { insert(this->end(), a.begin(), a.end()); return *this; }
    /// direct read only access, safe
-   const T& operator[](size_t i) const { if(i < size()) return tvector_base<T>::operator[](i); else throw TZeroBasedIndexOutOfRangeException(i, size()); } // throw(TZeroBasedIndexOutOfRangeException);
+   const T& operator[](size_t i) const { if(i < this->size()) return tvector_base<T>::operator[](i); else throw TZeroBasedIndexOutOfRangeException(i, this->size()); } // throw(TZeroBasedIndexOutOfRangeException);
    /// direct read/write access, automatically create new elements
-   T& operator[](size_t i) { if(i >= size()) operator+=(tvector(i - size() + 1)); return tvector_base<T>::operator[](i); }
+   T& operator[](size_t i) { if(i >= this->size()) operator+=(tvector(i - this->size() + 1)); return tvector_base<T>::operator[](i); }
    /// clear vector
-   void clear() { erase(begin(), end()); }
+   void clear() { erase(this->begin(), this->end()); }
 };
 
 
