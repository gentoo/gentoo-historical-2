Index: audacity-src-1.3.4-beta/configure.in
===================================================================
--- audacity-src-1.3.4-beta.orig/configure.in
+++ audacity-src-1.3.4-beta/configure.in
@@ -420,6 +420,8 @@ case "${host_os}" in
 esac
 
 dnl PortAudio configuration
+AC_ARG_WITH([alsa], AS_HELP_STRING([--without-alsa], [Build without alsa library (default: test)]))
+AC_ARG_WITH([jack], AS_HELP_STRING([--without-jack], [Build without jack library (default: test)]))
 
 if [[ "$use_portaudio" = "v19" ]] ; then
    dnl PortAudio v19
@@ -441,14 +443,22 @@ if [[ "$use_portaudio" = "v19" ]] ; then
          ;;
       *)
          dnl Unix
-         AC_CHECK_LIB(asound, snd_pcm_open, have_alsa=yes, have_alsa=no)
-         if [[ $have_alsa = "yes" ]] ; then
-            LIBS="$LIBS -lasound"
-         fi
-         PKG_CHECK_MODULES(JACK, jack, have_jack=yes, have_jack=no)
-         if [[ $have_jack = "yes" ]] ; then
-            LIBS="$LIBS $JACK_LIBS"
-         fi
+	 if test "x$with_alsa" != "xno"; then
+           AC_CHECK_LIB(asound, snd_pcm_open, have_alsa=yes, have_alsa=no)
+           if [[ $have_alsa = "yes" ]] ; then
+                LIBS="$LIBS -lasound"
+	    else
+                AC_MSG_WARN([Support for alsa not available])
+           fi
+	 fi
+	 if test "x$with_jack" != "xno"; then
+           PKG_CHECK_MODULES(JACK, jack, have_jack=yes, have_jack=no)
+	    if [[ $have_jack = "yes" ]] ; then
+        	LIBS="$LIBS $JACK_LIBS"
+	    else
+		AC_MSG_WARN([Support for jack not available])
+           fi
+	 fi	
          AC_CHECK_LIB(hpi, HPI_SubSysCreate, have_asihpi=yes, have_asihpi=no, -lm)
          if [[ $have_asihpi = "yes" ]] ; then
             LIBS="$LIBS -lhpi"
Index: audacity-src-1.3.4-beta/lib-src/portmixer/configure.ac
===================================================================
--- audacity-src-1.3.4-beta.orig/lib-src/portmixer/configure.ac
+++ audacity-src-1.3.4-beta/lib-src/portmixer/configure.ac
@@ -94,6 +94,7 @@ AC_CHECK_HEADER(linux/soundcard.h, have_
 AC_CHECK_HEADER(alsa/asoundlib.h,  have_alsa=yes, have_alsa=no)
 AC_CHECK_HEADER(CoreAudio/CoreAudio.h, have_coreaudio=yes, have_coreaudio=no)
 
+AC_ARG_WITH([alsa], AS_HELP_STRING([--without-alsa], [Build without alsa library (default: test)]))
 #
 # Set up to use the identified ones
 #
@@ -104,7 +105,7 @@ if [[ $have_oss = "yes" ]] ; then
    objects="$objects px_unix_oss.o"
 fi
 
-if [[ $have_alsa = "yes" ]] ; then
+if [[ $have_alsa = "yes" -a "x$with_alsa" != "xno" ]] ; then
    AC_MSG_NOTICE(Including support for ALSA);
    AC_DEFINE(PX_USE_LINUX_ALSA)
    objects="$objects px_linux_alsa.o"
