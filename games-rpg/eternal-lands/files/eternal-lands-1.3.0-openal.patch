diff -u -b -B -r1.83 sound.c
--- sound.c	20 Jun 2006 15:05:46 -0000	1.83
+++ sound.c	24 Jun 2006 14:42:29 -0000
@@ -308,6 +309,66 @@
 #endif	//NO_MUSIC
 }
 
+int loadWAVfile(char *filename, ALenum *al_format, ALvoid **al_data, ALsizei *al_size, ALuint *al_frequency) {
+  FILE *fp;
+
+  fp = fopen(filename,"rb");
+  if (fp) {
+	char id[4];
+	Uint32 size;
+	Uint16 format_tag, channels, block_align, bits_per_sample;
+	Uint32 format_length, sample_rate, avg_bytes_sec, data_size;
+	fread(id, 1, 4, fp);
+	if (!strncmp(id, "RIFF",4)) {
+	  fread(&size, 4, 1, fp);
+	  fread(id, 1, 4, fp);
+	  if (!strncmp(id,"WAVE",4)) {
+		fread(id, 1, 4, fp);
+		fread(&format_length, 4,1,fp);
+		fread(&format_tag, 2, 1, fp);
+		fread(&channels, 2, 1,fp); //1 mono, 2 stereo
+		channels=SDL_SwapLE16(channels);
+		fread(&sample_rate, 4, 1, fp); //like 44100, 22050, etc...
+		sample_rate=SDL_SwapLE32(sample_rate);
+		fread(&avg_bytes_sec, 4, 1, fp); //unused
+		fread(&block_align, 2, 1, fp); //unused
+		fread(&bits_per_sample, 2, 1, fp); //8 bit or 16 bit
+		bits_per_sample=SDL_SwapLE16(bits_per_sample);
+		fread(id, 1, 4, fp);
+		fread(&data_size, 4, 1, fp);
+		data_size=SDL_SwapLE32(data_size);
+		*al_data = (ALvoid *) malloc (data_size);
+		fread(*al_data, 1, data_size, fp);
+		*al_size = data_size;
+		*al_frequency = sample_rate;
+		if(channels == 1) {
+		  if(bits_per_sample == 8)
+			*al_format = AL_FORMAT_MONO8;
+		  else
+			*al_format = AL_FORMAT_MONO16;
+		} else {
+		  if(bits_per_sample == 8)
+			*al_format = AL_FORMAT_STEREO8;
+		  else
+			*al_format = AL_FORMAT_STEREO16;
+		}
+		return 1;
+	  }
+	  else {
+		LOG_ERROR("LoadWAVFile(%s): RIFF file but not a wave file\n",filename);
+		return 0;
+	  }
+	}
+	else {
+	  LOG_ERROR("LoadWAVFile(%s): not a RIFF file\n",filename);
+	  return 0;
+	}
+  } else {
+	LOG_ERROR("LoadWAVFile(%s): can't open file\n",filename);
+	return 0;
+  }
+}
+
 #ifndef NEW_SOUND
 ALuint get_loaded_buffer(int i)
 {
@@ -315,26 +376,9 @@
 	ALsizei size,freq;
 	ALenum  format;
 	ALvoid  *data;
-	ALboolean loop;
-	FILE *fin;
 	
 	if(!alIsBuffer(sound_buffer[i]))
 	{
-		// XXX FIXME (Grum): You have got to be kidding me...
-		// alutLoadWAVFile doesn't provide any way to check if loading
-		// a file succeeded. Well, at least, let's check if the file
-		// actually exists...
-		// Maybe use alutLoadWAV? But that doesn't seem to exist on 
-		// OS/X...
-		fin = fopen (sound_files[i], "r");
-		if (fin == NULL) 
-		{
-			LOG_ERROR(snd_wav_load_error, sound_files[i]);
-			return 0;
-		}
-		// okay, the file exists and is readable, close it
-		fclose (fin);
-
 		alGenBuffers(1, sound_buffer+i);
 			
 		if((error=alGetError()) != AL_NO_ERROR) 
@@ -344,14 +388,13 @@
 			have_music=0;
 		}
 
-#ifdef OSX
-		// OS X alutLoadWAVFile doesn't have a loop option... Oh well :-)
-		alutLoadWAVFile (sound_files[i], &format, &data, &size, &freq);
-#else
-		alutLoadWAVFile (sound_files[i], &format, &data, &size, &freq, &loop);
-#endif
+		if(loadWAVfile(sound_files[i], &format, &data, &size, &freq)) {
 		alBufferData(sound_buffer[i],format,data,size,freq);
-		alutUnloadWAV(format,data,size,freq);
+			free(data);
+		} else {
+			alDeleteBuffers(1,sound_buffer+i);
+			return 0;
+		}
 	}
 	return sound_buffer[i];
 }
@@ -372,27 +415,10 @@
 	if (!pSample->loaded_status)
 	{//this file is not currently loaded
 
-		//try to open the file
-#ifndef OSX
-		alutLoadWAVFile(szPath,&pSample->format,&data,&pSample->size,&pSample->freq,&loop);
-#else
-		alutLoadWAVFile(szPath,&pSample->format,&data,&pSample->size,&pSample->freq);
-#endif
-		if(!data)
-		{//couldn't load the file
-		#ifdef ELC
-			LOG_ERROR("%s: %s",snd_buff_error, "NO SOUND DATA");
-		#else
-			printf("ensure_sample_loaded : alutLoadWAVFile(%s) = %s\n",
-				szPath, "NO SOUND DATA");
-		#endif
-			return 1;
-		}
-
-		//create a buffer
 		alGenBuffers(1, pBuffer);
+			
 		if((error=alGetError()) != AL_NO_ERROR) 
-		{//couldn't generate a buffer
+		{
 		#ifdef ELC
 			LOG_ERROR("%s: %s",snd_buff_error, alGetString(error));
 		#else
@@ -401,15 +427,16 @@
 			*pBuffer=0;
 			return 2;
 		}
-		//send this data to the buffer
+
+		if(loadWAVFile(szPath,&pSample->format,&data,&pSample->size,&pSample->freq)) {
 		alBufferData(*pBuffer,pSample->format,data,pSample->size,pSample->freq);
-		if((error=alGetError()) != AL_NO_ERROR)
-		{
-		#ifdef ELC
+			//send this data to the buffer
+			if((error=alGetError()) != AL_NO_ERROR) {
+#ifdef ELC
 			LOG_ERROR("%s: %s",snd_buff_error, alGetString(error));
-		#else
+#else
 			printf("ensure_sample_loaded ['%s',#d]: alBufferData(%s) = %s\n",szPath, index, alGetString(error));
-		#endif
+#endif
 			alDeleteBuffers(1, pBuffer);
 			return 3;
 		}
@@ -417,13 +444,21 @@
 		alGetBufferi(*pBuffer,AL_BITS,&pSample->bits);
 		alGetBufferi(*pBuffer,AL_CHANNELS,&pSample->channels);
 		pSample->length = (pSample->size*1000) / ((pSample->bits >> 3)*pSample->channels*pSample->freq);
-
-		//get rid of the temporary data
-		alutUnloadWAV(pSample->format,data,pSample->size,pSample->freq);
-    }
+			free(data);
 
 	pSample->loaded_status = 1;
 	return 0;
+		} else {//couldn't load the file
+#ifdef ELC
+			LOG_ERROR("%s: %s",snd_buff_error, "NO SOUND DATA");
+#else
+			printf("ensure_sample_loaded : loadWAVFile(%s) = %s\n",
+				   szPath, "NO SOUND DATA");
+#endif
+			return 1;
+		}
+
+    }
 }
 #endif	//NEW_SOUND
 
