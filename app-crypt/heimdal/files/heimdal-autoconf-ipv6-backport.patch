Index: cf/krb-ipv6.m4
===================================================================
--- cf/krb-ipv6.m4	(revision 23011)
+++ cf/krb-ipv6.m4	(working copy)
@@ -2,94 +2,97 @@
 dnl
 dnl test for IPv6
 dnl
+ac_cv_lib_ipv6=check
+
 AC_DEFUN([AC_KRB_IPV6], [
 AC_ARG_WITH(ipv6,
 	AS_HELP_STRING([--without-ipv6],[do not enable IPv6 support]),[
-if test "$withval" = "no"; then
-	ac_cv_lib_ipv6=no
-fi])
+        ac_cv_lib_ipv6="$withval"
+])
 save_CFLAGS="${CFLAGS}"
-AC_CACHE_CHECK([for IPv6 stack type], rk_cv_v6type,
-[dnl check for different v6 implementations (by itojun)
-v6type=unknown
-v6lib=none
 
-for i in v6d toshiba kame inria zeta linux; do
-	case $i in
-	v6d)
-		AC_EGREP_CPP(yes, [
+if test "X$ac_cv_lib_ipv6" != "Xno"; then
+
+	AC_CACHE_CHECK([for IPv6 stack type], rk_cv_v6type, 
+	[dnl check for different v6 implementations (by itojun)
+	v6type=unknown
+	v6lib=none
+
+	for i in v6d toshiba kame inria zeta linux; do
+		case $i in
+		v6d)
+			AC_EGREP_CPP(yes, [
 #include </usr/local/v6/include/sys/types.h>
 #ifdef __V6D__
 yes
 #endif],
-			[v6type=$i; v6lib=v6;
-			v6libdir=/usr/local/v6/lib;
-			CFLAGS="-I/usr/local/v6/include $CFLAGS"])
-		;;
-	toshiba)
-		AC_EGREP_CPP(yes, [
+				[v6type=$i; v6lib=v6;
+				v6libdir=/usr/local/v6/lib;
+				CFLAGS="-I/usr/local/v6/include $CFLAGS"])
+			;;
+		toshiba)
+			AC_EGREP_CPP(yes, [
 #include <sys/param.h>
 #ifdef _TOSHIBA_INET6
 yes
 #endif],
-			[v6type=$i; v6lib=inet6;
-			v6libdir=/usr/local/v6/lib;
-			CFLAGS="-DINET6 $CFLAGS"])
-		;;
-	kame)
-		AC_EGREP_CPP(yes, [
+				[v6type=$i; v6lib=inet6;
+				v6libdir=/usr/local/v6/lib;
+				CFLAGS="-DINET6 $CFLAGS"])
+			;;
+		kame)
+			AC_EGREP_CPP(yes, [
 #include <netinet/in.h>
 #ifdef __KAME__
 yes
 #endif],
-			[v6type=$i; v6lib=inet6;
-			v6libdir=/usr/local/v6/lib;
-			CFLAGS="-DINET6 $CFLAGS"])
-		;;
-	inria)
-		AC_EGREP_CPP(yes, [
+				[v6type=$i; v6lib=inet6;
+				v6libdir=/usr/local/v6/lib;
+				CFLAGS="-DINET6 $CFLAGS"])
+			;;
+		inria)
+			AC_EGREP_CPP(yes, [
 #include <netinet/in.h>
 #ifdef IPV6_INRIA_VERSION
 yes
 #endif],
-			[v6type=$i; CFLAGS="-DINET6 $CFLAGS"])
-		;;
-	zeta)
-		AC_EGREP_CPP(yes, [
+				[v6type=$i; CFLAGS="-DINET6 $CFLAGS"])
+			;;
+		zeta)
+			AC_EGREP_CPP(yes, [
 #include <sys/param.h>
 #ifdef _ZETA_MINAMI_INET6
 yes
 #endif],
-			[v6type=$i; v6lib=inet6;
-			v6libdir=/usr/local/v6/lib;
-			CFLAGS="-DINET6 $CFLAGS"])
-		;;
-	linux)
-		if test -d /usr/inet6; then
-			v6type=$i
-			v6lib=inet6
-			v6libdir=/usr/inet6
-			CFLAGS="-DINET6 $CFLAGS"
-		fi
-		;;
-	esac
-	if test "$v6type" != "unknown"; then
-		break
-	fi
-done
-
-if test "$v6lib" != "none"; then
-	for dir in $v6libdir /usr/local/v6/lib /usr/local/lib; do
-		if test -d $dir -a -f $dir/lib$v6lib.a; then
-			LIBS="-L$dir -l$v6lib $LIBS"
+				[v6type=$i; v6lib=inet6;
+				v6libdir=/usr/local/v6/lib;
+				CFLAGS="-DINET6 $CFLAGS"])
+			;;
+		linux)
+			if test -d /usr/inet6; then
+				v6type=$i
+				v6lib=inet6
+				v6libdir=/usr/inet6
+				CFLAGS="-DINET6 $CFLAGS"
+			fi
+			;;
+		esac
+		if test "$v6type" != "unknown"; then
 			break
 		fi
 	done
-fi
-])
 
-AC_CACHE_CHECK([for IPv6], rk_cv_lib_ipv6, [
-AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+	if test "$v6lib" != "none"; then
+		for dir in $v6libdir /usr/local/v6/lib /usr/local/lib; do
+			if test -d $dir -a -f $dir/lib$v6lib.a; then
+				LIBS="-L$dir -l$v6lib $LIBS"
+				break
+			fi
+		done
+	fi])
+
+	AC_CACHE_CHECK([for IPv6], rk_cv_lib_ipv6, [
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
@@ -103,7 +106,7 @@
 #include <netinet/in6.h>
 #endif
 ]],
-[[
+	[[
  struct sockaddr_in6 sin6;
  int s;
 
@@ -114,8 +117,10 @@
  sin6.sin6_addr = in6addr_any;
  bind(s, (struct sockaddr *)&sin6, sizeof(sin6));
 ]])],
-[ac_cv_lib_ipv6=yes],
-[ac_cv_lib_ipv6=no])])
+	[ac_cv_lib_ipv6=yes],
+	[ac_cv_lib_ipv6=no])])
+fi
+
 if test "$ac_cv_lib_ipv6" = yes; then
   AC_DEFINE(HAVE_IPV6, 1, [Define if you have IPv6.])
 else
Index: lib/roken/mini_inetd.c
===================================================================
--- lib/roken/mini_inetd.c	(revision 14773)
+++ lib/roken/mini_inetd.c	(working copy)
@@ -83,10 +83,8 @@
 
     for (i = 0, a = ai; a != NULL; a = a->ai_next) {
 	fds[i] = socket (a->ai_family, a->ai_socktype, a->ai_protocol);
-	if (fds[i] < 0) {
-	    warn ("socket af = %d", a->ai_family);
+	if (fds[i] < 0)
 	    continue;
-	}
 	socket_set_reuseaddr (fds[i], 1);
 	if (bind (fds[i], a->ai_addr, a->ai_addrlen) < 0) {
 	    warn ("bind af = %d", a->ai_family);
