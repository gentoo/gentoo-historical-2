diff -Naur linux-2.6.8.1-vanilla/include/asm-sparc/processor.h linux-2.6.8.1.fixsparc/include/asm-sparc/processor.h
--- linux-2.6.8.1-vanilla/include/asm-sparc/processor.h	2004-08-14 03:56:23.000000000 -0700
+++ linux-2.6.8.1.fixsparc/include/asm-sparc/processor.h	2004-12-08 21:51:38.539378457 -0800
@@ -43,10 +43,12 @@
 
 struct task_struct;
 
+#ifdef __KERNEL__
 struct fpq {
 	unsigned long *insn_addr;
 	unsigned long insn;
 };
+#endif
 
 typedef struct {
 	int seg;
diff -Naur linux-2.6.8.1-vanilla/include/asm-sparc/sigcontext.h linux-2.6.8.1.fixsparc/include/asm-sparc/sigcontext.h
--- linux-2.6.8.1-vanilla/include/asm-sparc/sigcontext.h	2004-08-14 03:54:52.000000000 -0700
+++ linux-2.6.8.1.fixsparc/include/asm-sparc/sigcontext.h	2004-12-08 21:56:46.419515413 -0800
@@ -4,7 +4,6 @@
 
 #ifdef __KERNEL__
 #include <asm/ptrace.h>
-#endif
 
 #ifndef __ASSEMBLY__
 
@@ -57,8 +56,6 @@
 	} si_fpqueue [16];
 } __siginfo_fpu_t;
 
-#ifdef __KERNEL__
-
 /* This magic should be in g_upper[0] for all upper parts
    to be valid.
    This is generated by sparc64 only, but for 32bit processes,
@@ -69,8 +66,9 @@
 	unsigned   int o_upper[8];
 } siginfo_extra_v8plus_t;
 
-#endif
-
 #endif /* !(__ASSEMBLY__) */
 
+#endif /* (__KERNEL__) */
+
 #endif /* !(__SPARC_SIGCONTEXT_H) */
+
diff -Naur linux-2.6.8.1-vanilla/include/asm-sparc/signal.h linux-2.6.8.1.fixsparc/include/asm-sparc/signal.h
--- linux-2.6.8.1-vanilla/include/asm-sparc/signal.h	2004-08-14 03:55:34.000000000 -0700
+++ linux-2.6.8.1.fixsparc/include/asm-sparc/signal.h	2004-12-08 21:49:19.124410374 -0800
@@ -3,6 +3,7 @@
 #define _ASMSPARC_SIGNAL_H
 
 #include <asm/sigcontext.h>
+#include <linux/compiler.h>
 
 #ifdef __KERNEL__
 #ifndef __ASSEMBLY__
@@ -111,11 +112,14 @@
 	unsigned long	sig[_NSIG_WORDS];
 } __new_sigset_t;
 
+
+#ifdef __KERNEL__
 /* A SunOS sigstack */
 struct sigstack {
 	char *the_stack;
 	int   cur_status;
 };
+#endif
 
 /* Sigvec flags */
 #define _SV_SSTACK    1u    /* This signal handler should use sig-stack */
@@ -189,6 +193,7 @@
 #define SIG_IGN	((__sighandler_t)1)	/* ignore signal */
 #define SIG_ERR	((__sighandler_t)-1)	/* error return from signal */
 
+#ifdef __KERNEL__
 struct __new_sigaction {
 	__sighandler_t	sa_handler;
 	unsigned long	sa_flags;
@@ -196,12 +201,10 @@
 	__new_sigset_t	sa_mask;
 };
 
-#ifdef __KERNEL__
 struct k_sigaction {
 	struct __new_sigaction	sa;
 	void			__user *ka_restorer;
 };
-#endif
 
 struct __old_sigaction {
 	__sighandler_t	sa_handler;
@@ -216,7 +219,6 @@
 	size_t		ss_size;
 } stack_t;
 
-#ifdef __KERNEL__
 struct sparc_deliver_cookie {
 	int restart_syscall;
 	unsigned long orig_i0;
