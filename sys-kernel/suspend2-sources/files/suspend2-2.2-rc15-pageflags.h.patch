Hi.

This patch cleans up some duplication in include/linux/dyn_pageflags,
kernel/power/pageflags.h and lib/dyn_pageflags.c.

Regards,

Nigel

 include/linux/dyn_pageflags.h |   16 +++++++++-------
 kernel/power/pageflags.h      |    4 ----
 lib/dyn_pageflags.c           |   19 -------------------
 3 files changed, 9 insertions(+), 30 deletions(-)
diff -ruNp 9050-pageflags.h-old/include/linux/dyn_pageflags.h 9050-pageflags.h-new/include/linux/dyn_pageflags.h
--- 9050-pageflags.h-old/include/linux/dyn_pageflags.h	2005-12-27 20:25:56.000000000 +1000
+++ 9050-pageflags.h-new/include/linux/dyn_pageflags.h	2005-12-27 20:25:49.000000000 +1000
@@ -40,23 +40,25 @@ typedef unsigned long *** dyn_pageflags_
 
 #define PAGE_UL_PTR(bitmap, zone_num, zone_pfn) \
        ((bitmap[zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))
-#define PAGES_PER_DYN_PAGEFLAG (dyn_pageflags_pages_per_bitmap())
 
 /* With the above macros defined, you can do...
 
-#define PageInUse(page)	\
-	test_bit(PAGEBIT(page), PAGE_UL_PTR(in_use_map, page))
-#define SetPageInUse(page) \
-	set_bit(PAGEBIT(page), PAGE_UL_PTR(in_use_map, page))
-#define ClearPageInUse(page) \
-	clear_bit(PAGEBIT(page), PAGE_UL_PTR(in_use_map, page))
+#define PagePageset1(page) (test_dynpageflag(&pageset1_map, page))
+#define SetPagePageset1(page) (set_dynpageflag(&pageset1_map, page))
+#define ClearPagePageset1(page) (clear_dynpageflag(&pageset1_map, page))
 */
 
+#define BITMAP_FOR_EACH_SET(bitmap, counter) \
+	for (counter = get_next_bit_on(bitmap, -1); counter < max_pfn; \
+		counter = get_next_bit_on(bitmap, counter))
+
 extern void clear_dyn_pageflags(dyn_pageflags_t pagemap);
 extern int allocate_dyn_pageflags(dyn_pageflags_t *pagemap);
 extern int free_dyn_pageflags(dyn_pageflags_t *pagemap);
 extern int dyn_pageflags_pages_per_bitmap(void);
 extern int get_next_bit_on(dyn_pageflags_t bitmap, int counter);
+extern unsigned long *dyn_pageflags_ul_ptr(dyn_pageflags_t *bitmap,
+		struct page *pg);
 
 extern int test_dynpageflag(dyn_pageflags_t *bitmap, struct page *page);
 extern void set_dynpageflag(dyn_pageflags_t *bitmap, struct page *page);
diff -ruNp 9050-pageflags.h-old/kernel/power/pageflags.h 9050-pageflags.h-new/kernel/power/pageflags.h
--- 9050-pageflags.h-old/kernel/power/pageflags.h	2005-12-27 20:25:56.000000000 +1000
+++ 9050-pageflags.h-new/kernel/power/pageflags.h	2005-12-27 10:17:51.000000000 +1000
@@ -80,10 +80,6 @@ static inline void ClearPageChecksumIgno
 		clear_dynpageflag(&checksum_map, page);
 };
 
-#define BITMAP_FOR_EACH_SET(bitmap, counter) \
-	for (counter = get_next_bit_on(bitmap, -1); counter < max_pfn; \
-		counter = get_next_bit_on(bitmap, counter))
-
 extern void save_dyn_pageflags(dyn_pageflags_t pagemap);
 extern void load_dyn_pageflags(dyn_pageflags_t pagemap);
 void relocate_dyn_pageflags(dyn_pageflags_t *pagemap);
diff -ruNp 9050-pageflags.h-old/lib/dyn_pageflags.c 9050-pageflags.h-new/lib/dyn_pageflags.c
--- 9050-pageflags.h-old/lib/dyn_pageflags.c	2005-12-27 20:25:56.000000000 +1000
+++ 9050-pageflags.h-new/lib/dyn_pageflags.c	2005-12-27 10:07:36.000000000 +1000
@@ -23,25 +23,6 @@
 
 #define page_to_zone_offset(pg) (page_to_pfn(pg) - page_zone(pg)->zone_start_pfn)
 
-#if BITS_PER_LONG == 32
-#define UL_SHIFT 5
-#else 
-#if BITS_PER_LONG == 64
-#define UL_SHIFT 6
-#else
-#error Bits per long not 32 or 64?
-#endif
-#endif
-
-#define BIT_NUM_MASK (sizeof(unsigned long) * 8 - 1)
-#define PAGE_NUM_MASK (~((1 << (PAGE_SHIFT + 3)) - 1))
-#define UL_NUM_MASK (~(BIT_NUM_MASK | PAGE_NUM_MASK))
-
-#define BITS_PER_PAGE (PAGE_SIZE << 3)
-#define PAGENUMBER(zone_offset) (zone_offset >> (PAGE_SHIFT + 3))
-#define PAGEINDEX(zone_offset) ((zone_offset & UL_NUM_MASK) >> UL_SHIFT)
-#define PAGEBIT(zone_offset) (zone_offset & BIT_NUM_MASK)
-
 int num_zones(void)
 {
 	int result = 0;



_______________________________________________
Suspend2-devel mailing list
Suspend2-devel@lists.suspend2.net
http://lists.suspend2.net/mailman/listinfo/suspend2-devel

