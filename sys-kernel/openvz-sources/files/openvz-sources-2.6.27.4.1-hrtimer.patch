From: Cyrill Gorcunov <gorcunov@openvz.org>
Date: Mon, 5 Apr 2010 11:44:48 +0000 (+0400)
Subject: hrtimer: fixup negative expire value in hrtimer_start and hrtimer_force_reprogram
X-Git-Url: http://git.openvz.org/?p=linux-2.6.27-openvz;a=commitdiff_plain;h=1713baddd8443c4abf299aec70bbde96a0885a8a;hp=762c78b5d7f1c293133651ac2096179f161ef0c0

hrtimer: fixup negative expire value in hrtimer_start and hrtimer_force_reprogram

We still have a few user-space callers for hrtimer_start()
with HRTIMER_MODE_ABS timer mode in which we can't be sure
the sane expire value has been passed. So to prevent overflow
warning we fix su a case by using maximal possible timer
expiration.

ps: mainline already uses hrtimer_set_expires_range_ns
which is safe against such values.

http://bugzilla.openvz.org/show_bug.cgi?id=1370

Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
Signed-off-by: Pavel Emelyanov <xemul@openvz.org>
---

diff --git a/kernel/hrtimer.c b/kernel/hrtimer.c
index 59604cb..7821ea7 100644
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -518,6 +518,13 @@ static void hrtimer_force_reprogram(struct hrtimer_cpu_base *cpu_base)
 			continue;
 		timer = rb_entry(base->first, struct hrtimer, node);
 		expires = ktime_sub(timer->expires, base->offset);
+		/*
+		 * clock_was_set() has changed base->offset so the
+		 * result might be negative. Fix it up to prevent a
+		 * false positive in clockevents_program_event()
+		 */
+		if (expires.tv64 < 0)
+			expires.tv64 = 0;
 		if (expires.tv64 < cpu_base->expires_next.tv64)
 			cpu_base->expires_next = expires;
 	}
@@ -983,7 +990,13 @@ hrtimer_start(struct hrtimer *timer, ktime_t tim, const enum hrtimer_mode mode)
 #endif
 	}
 
-	timer->expires = tim;
+	/*
+	 * We still have a few callers from a userspace
+	 * so that we can't be sure they send a proper value,
+	 * lets prevent overflow
+	 */
+	timer->expires = (tim.tv64 < 0) ?
+		ktime_set(KTIME_SEC_MAX, 0) : tim;
 
 	timer_stats_hrtimer_set_start_info(timer);
 
