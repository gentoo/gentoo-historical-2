--- smbd/reply.c.orig	Sun Feb  3 00:46:56 2002
+++ smbd/reply.c	Mon Feb  4 12:19:40 2002
@@ -1918,6 +1918,64 @@
 	return NT_STATUS_OK;
 }
 
+/********************************************************************
+check if file should be recycled
+*********************************************************************/
+static int recycle(connection_struct *conn, char *fname, char *recycle_bin)
+{
+  char *base, *ext;
+  pstring bin;
+  int i=1, len, addlen;
+  int dir_mask=0700;
+
+  SMB_BIG_UINT dfree,dsize,bsize;
+
+  if(!recycle_bin || !*recycle_bin) {
+    DEBUG(3, ("recycle bin: share parameter not set, purging %s...\n", fname));
+    return vfs_unlink(conn,fname);
+ }
+
+  if(get_file_size(fname) == 0) {
+    DEBUG(3, ("recycle bin: file %s is empty, purging...\n", fname));
+    return vfs_unlink(conn,fname);
+  }
+
+  base = strrchr(fname, '/') + 1;
+  if(base == (char*)1) base = fname;
+
+  ext = strrchr(base, '.');
+
+  pstrcpy(bin, recycle_bin);
+  pstrcat(bin, "/");
+  pstrcat(bin, base);
+
+  if(strcmp(fname,bin) == 0) {
+    DEBUG(3, ("recycle bin: file %s exists, purging...\n", fname));
+    return vfs_unlink(conn,fname);
+  }
+
+  len = strlen(bin);
+  addlen = sizeof(pstring)-len-1;
+  while(vfs_file_exist(conn,bin, NULL)) {
+    slprintf(bin+len, addlen, " (Copy #%d)", i++);
+    pstrcat(bin, ext);
+  }
+
+  DEBUG(3, ("recycle bin: moving source=%s to  dest=%s\n", fname, bin));
+  sys_disk_free(".",True,&bsize,&dfree,&dsize);
+  if((unsigned int)dfree > 0) {
+    if(!directory_exist(recycle_bin,NULL)) {
+       DEBUG(3, ("recycle bin: directory %s nonexistant, creating...\n", recycle_bin));
+       vfs_mkdir(conn,recycle_bin,dir_mask);
+    }
+    DEBUG(3, ("recycle bin: move successful\n"));
+    return vfswrap_rename(conn, fname, bin);
+  } else { 
+    DEBUG(3, ("recycle bin: move failed, purging...\n"));
+    return vfs_unlink(conn,fname);
+  }
+}
+
 /****************************************************************************
  The guts of the unlink command, split out so it may be called by the NT SMB
  code.
@@ -1928,6 +1986,7 @@
   pstring directory;
   pstring mask;
   char *p;
+  char *recycle_bin = lp_recyclebin(SNUM(conn));
   int count=0;
 	NTSTATUS error = NT_STATUS_OK;
   BOOL has_wild;
@@ -1940,6 +1999,8 @@
 
   rc = unix_convert(name,conn,0,&bad_path,&sbuf);
 
+  standard_sub_conn(conn,recycle_bin);
+
   p = strrchr(name,'/');
   if (!p) {
     pstrcpy(directory,"./");
@@ -1970,7 +2031,7 @@
 		error = can_delete(directory,conn,dirtype);
 		if (!NT_STATUS_IS_OK(error)) return error;
 
-		if (vfs_unlink(conn,directory) == 0) {
+		if (recycle(conn,directory,recycle_bin) == 0) {
       count++;
 		}
     if (!count)
@@ -2002,7 +2063,7 @@
 	    slprintf(fname,sizeof(fname)-1, "%s/%s",directory,dname);
 				error = can_delete(fname,conn,dirtype);
 				if (!NT_STATUS_IS_OK(error)) continue;
-				if (vfs_unlink(conn,fname) == 0) count++;
+				if (recycle(conn,fname,recycle_bin) == 0) count++;
 	    DEBUG(3,("unlink_internals: succesful unlink [%s]\n",fname));
 	  }
 	CloseDir(dirptr);
