--- openafs/src/rx/xdr_array.c	2001/08/08 00:03:57	1.4
+++ openafs/src/rx/xdr_array.c	2002/07/31 23:13:28	1.4.6.3
@@ -29,7 +29,7 @@
 #include <afsconfig.h>
 #include <afs/param.h>
 
-RCSID("$Header: /var/cvsroot/gentoo-x86/net-fs/openafs/files/openafs-1.3.2-sunrpc-overflow.patch,v 1.1 2002/08/02 22:47:20 aliz Exp $");
+RCSID("$Header: /var/cvsroot/gentoo-x86/net-fs/openafs/files/openafs-1.3.2-sunrpc-overflow.patch,v 1.1 2002/08/02 22:47:20 aliz Exp $");
 
 #ifndef	NeXT
 
@@ -57,10 +57,6 @@
 #endif
 #include "xdr.h"
 
-#ifndef osi_alloc
-char *osi_alloc();
-#endif
-
 #define LASTUNSIGNED	((u_int)0-1)
 
 
@@ -71,20 +67,25 @@
  * elsize is the size (in bytes) of each element, and elproc is the
  * xdr procedure to call to handle each element of the array.
  */
-bool_t
-xdr_array(xdrs, addrp, sizep, maxsize, elsize, elproc)
-	register XDR *xdrs;
-	caddr_t *addrp;		/* array pointer */
-	u_int *sizep;		/* number of elements */
-	u_int maxsize;		/* max numberof elements */
-	u_int elsize;		/* size in bytes of each element */
-	xdrproc_t elproc;	/* xdr routine to handle each element */
+/* 
+	caddr_t *addrp;		* array pointer *
+	u_int *sizep;		* number of elements *
+	u_int maxsize;		* max numberof elements *
+	u_int elsize;		* size in bytes of each element *
+	xdrproc_t elproc;	* xdr routine to handle each element *
+*/
+
+bool_t xdr_array(register XDR *xdrs, caddr_t *addrp, u_int *sizep, 
+	u_int maxsize, u_int elsize, xdrproc_t elproc)
 {
 	register u_int i;
 	register caddr_t target = *addrp;
 	register u_int c;  /* the actual element count */
 	register bool_t stat = TRUE;
-	register int nodesize;
+	register u_int nodesize;
+
+        i = ((~0) >> 1) / elsize;
+        if (maxsize > i) maxsize = i;
 
 	/* like strings, arrays are really counted arrays */
 	if (! xdr_u_int(xdrs, sizep)) {

