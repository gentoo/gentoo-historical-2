diff -ur dhcpcd-1.3.22-pl4.orig/buildmsg.c dhcpcd-1.3.22-pl4/buildmsg.c
--- dhcpcd-1.3.22-pl4.orig/buildmsg.c	2004-11-27 13:59:31.745759928 +0100
+++ dhcpcd-1.3.22-pl4/buildmsg.c	2004-11-27 13:59:07.477449272 +0100
@@ -43,6 +43,10 @@
 extern  int             BroadcastResp;
 extern  struct in_addr  inform_ipaddr;
 
+#ifdef DRAFT_OPTION_FQDN
+extern	int		SetFQDNHostName;
+#endif
+
 /*****************************************************************************/
 void buildDhcpDiscover(xid)
 unsigned xid;
@@ -107,7 +111,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -120,6 +129,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
 /* build UDP/IP header */
@@ -194,7 +222,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -207,6 +240,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
 /* build UDP/IP header */
@@ -269,7 +321,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -282,6 +339,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
   udpipgen((udpiphdr *)UdpIpMsgSend.udpipmsg,
@@ -342,7 +418,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -355,6 +436,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
   udpipgen((udpiphdr *)UdpIpMsgSend.udpipmsg,
@@ -423,7 +523,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -436,6 +541,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
   udpipgen((udpiphdr *)UdpIpMsgSend.udpipmsg,0,INADDR_BROADCAST,
@@ -571,7 +695,12 @@
   *p++ = nisDomainName;
   *p++ = nisServers;
   *p++ = ntpServers;
+#ifdef DRAFT_OPTION_FQDN
+  /* FQDN option (81) replaces HostName option (12) if requested */
+  if (( HostName ) && ( SetFQDNHostName == FQDNdisable ))
+#else
   if ( HostName )
+#endif
     {
       *p++ = hostName;
       *p++ = HostName_len;
@@ -584,6 +713,25 @@
   p += DhcpIface.class_len;
   memcpy(p,DhcpIface.client_id,DhcpIface.client_len);
   p += DhcpIface.client_len;
+#ifdef DRAFT_OPTION_FQDN
+  if (( HostName ) && ( SetFQDNHostName != FQDNdisable ))
+    {
+      /* Draft IETF DHC-FQDN option (81) */
+      *p++ = dhcpFQDNHostName;
+      *p++ = HostName_len + 3;
+      /* Flags: 0000NEOS
+       * S: 1 => Client requests Server to update A RR in DNS as well as PTR
+       * O: 1 => Server indicates to client that DNS has been updated regardless
+       * E: 1 => Name data is DNS format, i.e. <4>host<6>domain<4>com<0> not "host.domain.com"
+       * N: 1 => Client requests Server to not update DNS
+       */
+      *p++ = SetFQDNHostName & 0x9;
+      *p++ = 0; /* rcode1, response from DNS server to DHCP for PTR RR */
+      *p++ = 0; /* rcode2, response from DNS server to DHCP for A RR if S=1 */
+      memcpy(p,HostName,HostName_len);
+      p += HostName_len;
+    }
+#endif
   *p = endOption;
 
   udpipgen((udpiphdr *)UdpIpMsgSend.udpipmsg,0,INADDR_BROADCAST,
diff -ur dhcpcd-1.3.22-pl4.orig/client.c dhcpcd-1.3.22-pl4/client.c
--- dhcpcd-1.3.22-pl4.orig/client.c	2004-11-27 13:59:31.754758560 +0100
+++ dhcpcd-1.3.22-pl4/client.c	2004-11-27 13:58:24.101043488 +0100
@@ -80,6 +80,10 @@
 extern	int		ClientMACaddr_ind;
 #endif
 
+#ifdef DRAFT_OPTION_FQDN
+extern	int		SetFQDNHostName;
+#endif
+
 #ifdef ARPCHECK
 int arpCheck();
 #endif
@@ -187,6 +191,16 @@
 	    fprintf(stderr,"i=%-2d  len=%-2d  option = %u\n",
 		i,DhcpOptions.len[i],*(unsigned char *)DhcpOptions.val[i]);
 	    break;
+#ifdef DRAFT_OPTION_FQDN
+	  case 81:/* dhcpFQDNHostName */
+	    fprintf(stderr,"i=%-2d  len=%-2d  flags = %02X  rcode1 = %02X  rcode2 = %02X  name = \"%s\"\n",
+		i,DhcpOptions.len[i],
+		((unsigned char *)DhcpOptions.val[i])[0],
+		((unsigned char *)DhcpOptions.val[i])[1],
+		((unsigned char *)DhcpOptions.val[i])[2],
+		((char *)DhcpOptions.val[i])+3);
+	    break;
+#endif
 	  default:
 	    fprintf(stderr,"i=%-2d  len=%-2d  option = \"%s\"\n",
 		i,DhcpOptions.len[i],(char *)DhcpOptions.val[i]);
@@ -393,6 +407,23 @@
       if ( DebugFlag )
 	syslog(LOG_DEBUG,"dhcpT2value is missing in DHCP server response. Assuming %u sec\n",t2);
     }
+#ifdef DRAFT_OPTION_FQDN
+  if ( DhcpOptions.val[dhcpFQDNHostName] )
+    {
+      syslog(LOG_DEBUG,"dhcpFQDNHostName response flags = %02X  rcode1 = %02X  rcode2 = %02X  name = \"%s\"\n",
+	((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[0],
+	((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[1],
+	((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[2],
+	((char *)DhcpOptions.val[dhcpFQDNHostName])+3);
+    }
+  else
+    {
+      if ( DebugFlag && (SetFQDNHostName != FQDNdisable) )
+        {
+	  syslog(LOG_DEBUG,"dhcpFQDNHostName is missing in DHCP server response.\n");
+	}
+    }
+#endif
   if ( DhcpOptions.val[dhcpMessageType] )
     return *(unsigned char *)DhcpOptions.val[dhcpMessageType];
   return 0;
diff -ur dhcpcd-1.3.22-pl4.orig/client.h dhcpcd-1.3.22-pl4/client.h
--- dhcpcd-1.3.22-pl4.orig/client.h	2004-11-27 13:59:31.754758560 +0100
+++ dhcpcd-1.3.22-pl4/client.h	2004-11-27 13:58:24.103043184 +0100
@@ -131,9 +131,25 @@
   dhcpT2value				=	59,
   dhcpClassIdentifier			=	60,
   dhcpClientIdentifier			=	61,
+#ifdef DRAFT_OPTION_FQDN
+  dhcpFQDNHostName			=	81,
+#endif
   endOption				=	255
 };
 
+#ifdef DRAFT_OPTION_FQDN
+/* SetFQDNHostName values - lsnybble used in flags
+ * byte (see buildmsg.c), hsnybble to create order
+ * and to allow 0x00 to mean disable
+ */
+enum {
+  FQDNdisable				=	0x00,
+  FQDNnone				=	0x18,
+  FQDNptr				=	0x20,
+  FQDNboth				=	0x31
+};
+#endif
+
 typedef struct dhcpInterface
 {
   unsigned char	version[11];
diff -ur dhcpcd-1.3.22-pl4.orig/dhcpcd.8 dhcpcd-1.3.22-pl4/dhcpcd.8
--- dhcpcd-1.3.22-pl4.orig/dhcpcd.8	2004-11-27 13:59:31.753758712 +0100
+++ dhcpcd-1.3.22-pl4/dhcpcd.8	2004-11-27 13:58:24.105042880 +0100
@@ -9,14 +9,15 @@
 .in +.5i
 .ti -.5i
 dhcpcd
-\%[\-dknorzBCDHNRSTY]
+\%[\-dknorzBCDHNRSTY]
 \%[\-t\ <timeout>]
 \%[\-c\ <ExecFilePath>]
-\%[-h\ <hostname>]
-\%[-i\ <vendorClassID>]
-\%[-I\ <clientID>]
+\%[\-h\ <hostname>]
+\%[\-i\ <vendorClassID>]
+\%[\-I\ <clientID>]
 \%[\-l\ <leasetime>]
 \%[\-s\ [ipaddr]]
+\%[\-F\ none|ptr|both]
 \%[\-G\ [gateway]]
 \%[\-w\ <windowsize>]
 \%[\-L\ <ConfigDir>]
@@ -28,7 +29,10 @@
 .B RFC2131
 (when -r option is not specified) and
 .B RFC1541
-(when -r option is specified).
+(when -r option is specified).  Support for
+.B draft-ietf-dhc-fqdn-option
+in use in many systems (particularly networks using Microsoft DHCP
+servers) is also provided.
 
 It gets the host information (IP address, netmask, broadcast address,
 etc.) from a DHCP server and configures the network interface of the
@@ -145,6 +149,31 @@
 to set domainname of the host to the domainname option
 supplied by DHCP server.
 .TP
+.BI \-F \ none|ptr|both
+Forces
+.B dhcpcd
+to request the DHCP server update the DNS using the FQDN option
+instead of the Hostname option. The name used by this option
+is specified with the \fB-h\fP switch, which must be present. If
+the \fB-h\fP switch is not present, the FQDN option is ignored.
+The name should be fully qualified, although servers usually
+accept a simple name.
+.I both
+requests that the DHCP server update both the A and PTR
+records in the DNS.
+.I ptr
+requests that the DHCP server updates only the PTR record in
+the DNS.
+.I none
+requests that the DHCP server perform no updates.
+.B dhcpcd
+does not perform any DNS update, even when the server is
+requested to perform no updates.  This can be easily
+implemented outside the client; all the necessary
+information is recorded in the
+.I <ConfigDir>/dhcpcd-<interface>.info
+file.
+.TP
 .BI \-H
 Forces
 .B dhcpcd
@@ -249,6 +278,8 @@
 sends DHCP messages. Some DHCP servers, notably those used by
 @Home Networks, require the hostname option
 field containing a specific string in the DHCP messages from clients.
+When combined with the -F switch, specifies the string used for the
+FQDN option field instead of the hostname option field.
 .TP
 .BI \-i \ <vendorClassID>
 Specifies the vendor class identifier string.
@@ -413,10 +444,18 @@
 is attached.
 
 .SH SEE ALSO
+.BR dig (1),
+.BR nslookup (8),
+.BR nsupdate (8)
+.LP
 .I Dynamic Host Configuration Protocol,
 RFC2131 and RFC1541 (obsolete)
+.LP
 .I DHCP Options and BOOTP Vendor Extensions,
 RFC2132
+.LP
+.I Draft DHC FQDN Option specification,
+draft-ietf-dhc-fqdn-option
 
 .SH BUGS
 .PD 0
diff -ur dhcpcd-1.3.22-pl4.orig/dhcpcd.c dhcpcd-1.3.22-pl4/dhcpcd.c
--- dhcpcd-1.3.22-pl4.orig/dhcpcd.c	2004-11-27 13:59:31.753758712 +0100
+++ dhcpcd-1.3.22-pl4/dhcpcd.c	2004-11-27 13:58:24.107042576 +0100
@@ -75,6 +75,9 @@
 unsigned char	ClientMACaddr[ETH_ALEN];
 int		ClientMACaddr_ind =	0;
 #endif
+#ifdef DRAFT_OPTION_FQDN
+int		SetFQDNHostName	=	FQDNdisable;
+#endif
 /*****************************************************************************/
 void print_version()
 {
@@ -109,6 +112,9 @@
   int k			=	1;
   int i			=	1;
   int j;
+#ifdef DRAFT_OPTION_FQDN
+  char *FQDNOption	=	NULL;
+#endif
 
 /*
  * Ensure that fds 0, 1, 2 are open, to /dev/null if nowhere else.
@@ -262,6 +268,23 @@
 	    fprintf(stderr,"****  %s: too long HostName string: strlen=%d\n",
 	    argc[0],HostName_len);
 	    break;
+#ifdef DRAFT_OPTION_FQDN
+	  case 'F':
+	    if ( argc[i][s+1] ) goto usage;
+	    i++;
+	    FQDNOption=argc[i++];
+	    if ( FQDNOption == NULL || FQDNOption[0] == '-' ) goto usage;
+	    if ( strcmp(FQDNOption,"none") == 0 )
+	      SetFQDNHostName=FQDNnone;
+	    else if ( strcmp(FQDNOption,"ptr") == 0 )
+	      SetFQDNHostName=FQDNptr;
+	    else if ( strcmp(FQDNOption,"both") == 0 )
+	      SetFQDNHostName=FQDNboth;
+	    else
+	      goto usage;
+	    s=1;
+	    break;
+#endif
 	  case 't':
 	    if ( argc[i][s+1] ) goto usage;
 	    i++;
@@ -333,10 +356,17 @@
 	    break;
           default:
 usage:	    print_version();
-	    fprintf(stderr,
+#ifdef DRAFT_OPTION_FQDN
+          fprintf(stderr,
+"Usage: dhcpcd [-dknorzBCDHNRSTY] [-l leasetime] [-h hostname] [-t timeout]\n\
+       [-i vendorClassID] [-I ClientID] [-c filename] [-s [ipaddr]]\n\
+       [-w windowsize] [-L ConfigDir] [-G [gateway]] [-F none|ptr|both] [interface]\n");
+#else
+          fprintf(stderr,
 "Usage: dhcpcd [-dknorzBCDHNRSTY] [-l leasetime] [-h hostname] [-t timeout]\n\
        [-i vendorClassID] [-I ClientID] [-c filename] [-s [ipaddr]]\n\
        [-w windowsize] [-L ConfigDir] [-G [gateway]] [interface]\n");
+#endif
 	    exit(1);
 	}
     else
diff -ur dhcpcd-1.3.22-pl4.orig/dhcpconfig.c dhcpcd-1.3.22-pl4/dhcpconfig.c
--- dhcpcd-1.3.22-pl4.orig/dhcpconfig.c	2004-11-27 13:59:31.752758864 +0100
+++ dhcpcd-1.3.22-pl4/dhcpconfig.c	2004-11-27 13:58:24.261019168 +0100
@@ -61,6 +61,10 @@
 extern	dhcpOptions		DhcpOptions;
 extern	const dhcpMessage	*DhcpMsgRecv;
 
+#ifdef DRAFT_OPTION_FQDN
+extern	int			SetFQDNHostName;
+#endif
+
 int	arpInform();
 
 char	hostinfo_file[128];
@@ -735,6 +739,22 @@
 	fprintf(f,"CLIENTID=%02X:%02X:%02X:%02X:%02X:%02X\n",
 DhcpIface.client_id[3],DhcpIface.client_id[4],DhcpIface.client_id[5],
 DhcpIface.client_id[6],DhcpIface.client_id[7],DhcpIface.client_id[8]);
+#ifdef DRAFT_OPTION_FQDN
+      if ( SetFQDNHostName != FQDNdisable )
+        {
+	  if ( DhcpOptions.len[dhcpFQDNHostName] )
+	    {
+fprintf(f,"FQDNFLAGS=%u\n\
+FQDNRCODE1=%u\n\
+FQDNRCODE2=%u\n\
+FQDNHOSTNAME=%s\n",
+((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[0],
+((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[1],
+((unsigned char *)DhcpOptions.val[dhcpFQDNHostName])[2],
+(((char *)DhcpOptions.val[dhcpFQDNHostName])+3));
+	    }
+	}
+#endif
       fclose(f);
     }
   else
