--- warmux-11.01.orig/configure.ac
+++ warmux-11.01/configure.ac
@@ -43,8 +43,6 @@
   AC_MSG_ERROR([*** No C++ compiler can be found!])
 fi
 
-AX_CFLAGS_WARN_ALL([CXXFLAGS])
-
 # ========================================================================
 # == Set flags for various environments                                  =
 # ========================================================================
@@ -345,14 +343,7 @@
   exit 1
 fi
 
-dnl === Add Werror flag for gcc/g++ if debug mode is enabled, ==============
-dnl === but allow RTTI (ie dynamic_cast, typeid/typeinfo unavailable) ======
-if test "x${debug}" = "xyes"; then
-  CFLAGS="$CFLAGS -Werror"
-  CXXFLAGS="$CXXFLAGS -Werror"
-else
-  CXXFLAGS="$CXXFLAGS -fno-rtti"
-fi
+CXXFLAGS="$CXXFLAGS -fno-rtti"
 
 dnl === Forbid exceptions (Android platform requirement) ===================
 CXXFLAGS="$CXXFLAGS -fno-exceptions"
--- warmux-11.01.orig/data/Makefile.am
+++ warmux-11.01/data/Makefile.am
@@ -1,8 +1,2 @@
-xdg_appsdir = $(prefix)/share/applications
-xdg_apps_DATA = warmux.desktop
-pixmapsdir = $(prefix)/share/pixmaps
-pixmaps_DATA = icon/warmux_128x128.png
-
 nobase_dist_pkgdata_DATA = @DATA_FILES@
 pkgdatadir = @DATADIR@
-EXTRA_DIST = $(pixmaps_DATA)
--- warmux-11.01.orig/src/menu/options_menu.cpp
+++ warmux-11.01/src/menu/options_menu.cpp
@@ -506,26 +506,7 @@
 
 void OptionMenu::CheckUpdates()
 {
-  if (!Config::GetInstance()->GetCheckUpdates()
-      || Constants::WARMUX_VERSION.find("svn") != std::string::npos)
     return;
-
-  Downloader *dl = Downloader::GetInstance();
-  std::string latest_version;
-  if (dl->GetLatestVersion(latest_version)) {
-      const char  *cur_version   = Constants::GetInstance()->WARMUX_VERSION.c_str();
-      if (latest_version != cur_version) {
-        Question new_version;
-        std::string txt = Format(_("A new version %s is available, while your version is %s. "
-                                   "You may want to check whether an update is available for your OS!"),
-                                 latest_version.c_str(), cur_version);
-        new_version.Set(txt, true, 0);
-        new_version.Ask();
-      }
-  } else {
-    AppWarmux::DisplayError(Format(_("Version verification failed because: %s"),
-                                   dl->GetLastError().c_str()));
-  }
 }
 
 uint OptionMenu::toVolume(uint level)
