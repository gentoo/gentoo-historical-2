--- src/Problem.hpp.original	2006-03-14 21:55:28.000000000 +0100
+++ src/Problem.hpp	2006-03-14 22:06:18.000000000 +0100
@@ -306,14 +306,19 @@
   virtual G Goal_Value(T *a)
   {
     if (depth==0) 
-      return tester->Goal_Value(a);
+      return Successor_Goal_Test<G,T>::tester->Goal_Value(a);
     
-    Goal_Test<G,T> *endtester=tester;
-    tester=new Minimax_Goal_Test(depth-1,generator,other_acc,goal_acc,tester);
+    Goal_Test<G,T> *endtester=Successor_Goal_Test<G,T>::tester;
+    Successor_Goal_Test<G,T>::tester
+	    = new Minimax_Goal_Test(depth-1,
+			    	    Successor_Goal_Test<G,T>::generator,
+				    other_acc,
+				    Successor_Goal_Test<G,T>::goal_acc,
+				    Successor_Goal_Test<G,T>::tester);
     G ret_val=Successor_Goal_Test<G,T>::Goal_Value(a);
-    delete tester;
-    tester=endtester;
-    delete next;
+    delete Successor_Goal_Test<G,T>::tester;
+    Successor_Goal_Test<G,T>::tester=endtester;
+    delete Successor_Goal_Test<G,T>::next;
 
     return ret_val;
   }
@@ -340,19 +345,29 @@
   
   virtual G Goal_Value(T *a)
   {
-    Goal_Accumulator <G,T> *old=goal_acc;
+    Goal_Accumulator <G,T> *old=Successor_Goal_Test<G,T>::goal_acc;
     Multi_Goal_Accumulator <G,T,greater<G> > *mga=new Multi_Goal_Accumulator<G,T,greater<G> >(branch);
-    goal_acc=mga;
+    Successor_Goal_Test<G,T>::goal_acc=mga;
     Successor_Goal_Test<G,T>::Goal_Value(a);
-    goal_acc=old;
+    Successor_Goal_Test<G,T>::goal_acc=old;
     for (mga->Init();!mga->IsEnd();mga->Next()) { 
       T *state=mga->Get_State();
-      Multi_Minimax_Goal_Test *next=new Multi_Minimax_Goal_Test(d-1,b,gen,other,goal_acc,tester);
+      Multi_Minimax_Goal_Test *next
+	      = new Multi_Minimax_Goal_Test(Successor_Goal_Test<G,T>::d-1,
+			      		    Successor_Goal_Test<G,T>::b,
+					    Successor_Goal_Test<G,T>::gen,
+					    other,
+					    Successor_Goal_Test<G,T>::goal_acc,
+					    Successor_Goal_Test<G,T>::tester);
       next->Goal_Value(state);
-      goal_acc->Put(accumulator->value,acc->state,acc->op);
+      Successor_Goal_Test<G,T>::goal_acc->Put(Successor_Goal_Test<G,T>::accumulator->value,
+		      			      Successor_Goal_Test<G,T>::acc->state,
+					      Successor_Goal_Test<G,T>::acc->op);
     }
-    goal_acc->Put(mga->Get_State(),mga->Get_Operator(),mga->Get_Result());
-    return goal_acc->Get_Value();
+    Successor_Goal_Test<G,T>::goal_acc->Put(mga->Get_State(),
+		    			    mga->Get_Operator(),
+					    mga->Get_Result());
+    return Successor_Goal_Test<G,T>::goal_acc->Get_Value();
   }
 };
 
--- src/Genetic.hpp.original	2006-03-14 22:06:40.000000000 +0100
+++ src/Genetic.hpp	2006-03-14 22:12:20.000000000 +0100
@@ -216,9 +216,9 @@
   virtual Genetic_Operator<T> *Choose_Operator(void)
   {
     int max=(int)total_op_weight;
-    list<Genetic_Operator<T> *>::iterator start=operators.begin();
-    list<Genetic_Operator<T> *>::iterator end=operators.end();
-    list<Genetic_Operator<T> *>::iterator iter;
+    typename list<Genetic_Operator<T> *>::iterator start=operators.begin();
+    typename list<Genetic_Operator<T> *>::iterator end=operators.end();
+    typename list<Genetic_Operator<T> *>::iterator iter;
     int r=rand()%max;
     int count=0;
     for (iter=start;iter!=end;iter++) {
@@ -249,7 +249,7 @@
     Genetic_Population<T> *newpop=new Genetic_Population<T>(p->size);
     int cur_size=0;
     while (cur_size<newpop->size) {
-      Genetic_Operator<T> *op=Choose_Operator();
+      Genetic_Operator<T> *op=Genetic_Generation<T>::Choose_Operator();
       if ( (cur_size+op->NumOfResults())>newpop->size)
 	continue;
       for (i=0;i<op->NumOfOperands();i++) {
@@ -264,7 +264,7 @@
 	cur_size++;
       }
     }
-    newpop->Eval_Fitness(fit_func);
+    newpop->Eval_Fitness(Genetic_Generation<T>::fit_func);
     return newpop;
   }
 
--- src/board.c.original	2006-03-14 23:24:41.000000000 +0100
+++ src/board.c	2006-03-14 23:24:52.000000000 +0100
@@ -27,7 +27,7 @@
 #define FLOOR_DARK     0                /* steppings for light and dark */
 #define FLOOR_LIGHT    7                /*   outside luminance cycle */
 
-#define FONT_NAME      "-misc-fixed-medium-*-normal-*-15-0-*-*-*-*-iso8859-1"
+#define FONT_NAME      "-misc-fixed-medium-*-normal-*-15-*-*-*-*-*-iso8859-1"
 
 #define V_CELL_YSIZE   40               /* revive cell height */
 
--- src/field.c.original	2006-03-14 23:46:13.000000000 +0100
+++ src/field.c	2006-03-14 23:46:57.000000000 +0100
@@ -21,7 +21,7 @@
 /* defines                                                                  */
 /*--------------------------------------------------------------------------*/
 
-#define FONT_NAME      "-misc-fixed-medium-*-normal-*-40-0-*-*-*-*-iso8859-1"
+#define FONT_NAME      "-misc-fixed-medium-*-normal-*-20-*-*-*-*-*-iso8859-1"
 
 #define NUM_ROCKS      12
 #define ROCK_DELAY     2                /* rock slowdown factor */
--- src/network.c.original	2006-03-14 23:46:23.000000000 +0100
+++ src/network.c	2006-03-14 23:47:24.000000000 +0100
@@ -31,7 +31,7 @@
 /* define                                                                   */
 /*--------------------------------------------------------------------------*/
 
-#define FONT_NAME      "-misc-fixed-medium-*-normal-*-20-0-*-*-*-*-iso8859-1"
+#define FONT_NAME      "-misc-fixed-medium-*-normal-*-18-*-*-*-*-*-iso8859-1"
 
 #define TIMEOUT        3
 #define RETRIES        4
