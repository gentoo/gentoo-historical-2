http://git.xfce.org/xfce/thunar/commit/?id=117e927874dd607685d9bd752a6a4d20de937e49

--- plugins/thunar-tpa/thunar-tpa-bindings.h
+++ plugins/thunar-tpa/thunar-tpa-bindings.h
@@ -26,10 +26,10 @@
 inline
 #endif
 gboolean
-org_xfce_Trash_display_trash (DBusGProxy *proxy, const char * IN_display, GError **error)
+org_xfce_Trash_display_trash (DBusGProxy *proxy, const char * IN_display, const char * IN_startup_id, GError **error)
 
 {
-  return dbus_g_proxy_call (proxy, "DisplayTrash", error, G_TYPE_STRING, IN_display, G_TYPE_INVALID, G_TYPE_INVALID);
+  return dbus_g_proxy_call (proxy, "DisplayTrash", error, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID, G_TYPE_INVALID);
 }
 
 typedef void (*org_xfce_Trash_display_trash_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);
@@ -49,24 +49,24 @@
 inline
 #endif
 DBusGProxyCall*
-org_xfce_Trash_display_trash_async (DBusGProxy *proxy, const char * IN_display, org_xfce_Trash_display_trash_reply callback, gpointer userdata)
+org_xfce_Trash_display_trash_async (DBusGProxy *proxy, const char * IN_display, const char * IN_startup_id, org_xfce_Trash_display_trash_reply callback, gpointer userdata)
 
 {
   DBusGAsyncData *stuff;
   stuff = g_slice_new (DBusGAsyncData);
   stuff->cb = G_CALLBACK (callback);
   stuff->userdata = userdata;
-  return dbus_g_proxy_begin_call (proxy, "DisplayTrash", org_xfce_Trash_display_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_display, G_TYPE_INVALID);
+  return dbus_g_proxy_begin_call (proxy, "DisplayTrash", org_xfce_Trash_display_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID);
 }
 static
 #ifdef G_HAVE_INLINE
 inline
 #endif
 gboolean
-org_xfce_Trash_empty_trash (DBusGProxy *proxy, const char * IN_display, GError **error)
+org_xfce_Trash_empty_trash (DBusGProxy *proxy, const char * IN_display, const char * IN_startup_id, GError **error)
 
 {
-  return dbus_g_proxy_call (proxy, "EmptyTrash", error, G_TYPE_STRING, IN_display, G_TYPE_INVALID, G_TYPE_INVALID);
+  return dbus_g_proxy_call (proxy, "EmptyTrash", error, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID, G_TYPE_INVALID);
 }
 
 typedef void (*org_xfce_Trash_empty_trash_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);
@@ -86,24 +86,24 @@
 inline
 #endif
 DBusGProxyCall*
-org_xfce_Trash_empty_trash_async (DBusGProxy *proxy, const char * IN_display, org_xfce_Trash_empty_trash_reply callback, gpointer userdata)
+org_xfce_Trash_empty_trash_async (DBusGProxy *proxy, const char * IN_display, const char * IN_startup_id, org_xfce_Trash_empty_trash_reply callback, gpointer userdata)
 
 {
   DBusGAsyncData *stuff;
   stuff = g_slice_new (DBusGAsyncData);
   stuff->cb = G_CALLBACK (callback);
   stuff->userdata = userdata;
-  return dbus_g_proxy_begin_call (proxy, "EmptyTrash", org_xfce_Trash_empty_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_display, G_TYPE_INVALID);
+  return dbus_g_proxy_begin_call (proxy, "EmptyTrash", org_xfce_Trash_empty_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID);
 }
 static
 #ifdef G_HAVE_INLINE
 inline
 #endif
 gboolean
-org_xfce_Trash_move_to_trash (DBusGProxy *proxy, const char ** IN_filenames, const char * IN_display, GError **error)
+org_xfce_Trash_move_to_trash (DBusGProxy *proxy, const char ** IN_filenames, const char * IN_display, const char * IN_startup_id, GError **error)
 
 {
-  return dbus_g_proxy_call (proxy, "MoveToTrash", error, G_TYPE_STRV, IN_filenames, G_TYPE_STRING, IN_display, G_TYPE_INVALID, G_TYPE_INVALID);
+  return dbus_g_proxy_call (proxy, "MoveToTrash", error, G_TYPE_STRV, IN_filenames, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID, G_TYPE_INVALID);
 }
 
 typedef void (*org_xfce_Trash_move_to_trash_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);
@@ -123,14 +123,14 @@
 inline
 #endif
 DBusGProxyCall*
-org_xfce_Trash_move_to_trash_async (DBusGProxy *proxy, const char ** IN_filenames, const char * IN_display, org_xfce_Trash_move_to_trash_reply callback, gpointer userdata)
+org_xfce_Trash_move_to_trash_async (DBusGProxy *proxy, const char ** IN_filenames, const char * IN_display, const char * IN_startup_id, org_xfce_Trash_move_to_trash_reply callback, gpointer userdata)
 
 {
   DBusGAsyncData *stuff;
   stuff = g_slice_new (DBusGAsyncData);
   stuff->cb = G_CALLBACK (callback);
   stuff->userdata = userdata;
-  return dbus_g_proxy_begin_call (proxy, "MoveToTrash", org_xfce_Trash_move_to_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRV, IN_filenames, G_TYPE_STRING, IN_display, G_TYPE_INVALID);
+  return dbus_g_proxy_begin_call (proxy, "MoveToTrash", org_xfce_Trash_move_to_trash_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRV, IN_filenames, G_TYPE_STRING, IN_display, G_TYPE_STRING, IN_startup_id, G_TYPE_INVALID);
 }
 static
 #ifdef G_HAVE_INLINE
--- plugins/thunar-tpa/thunar-tpa.c
+++ plugins/thunar-tpa/thunar-tpa.c
@@ -1,6 +1,7 @@
 /*-
  * Copyright (c) 2006 Benedikt Meurer <benny@xfce.org>
  * Copyright (c) 2010 Nick Schermer <nick@xfce.org>
+ * Copyright (c) 2010 Jannis Pohlmann <jannis@xfce.org>
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the Free
@@ -460,6 +461,7 @@
 thunar_tpa_display_trash (ThunarTpa *plugin)
 {
   gchar *display_name;
+  gchar *startup_id;
 
   g_return_if_fail (THUNAR_IS_TPA (plugin));
 
@@ -472,7 +474,9 @@
 
       /* schedule a new call */
       display_name = gdk_screen_make_display_name (gtk_widget_get_screen (GTK_WIDGET (plugin)));
-      plugin->display_trash_call = org_xfce_Trash_display_trash_async (plugin->proxy, display_name, thunar_tpa_display_trash_reply, plugin);
+      startup_id = g_strdup_printf ("_TIME%d", gtk_get_current_event_time ());
+      plugin->display_trash_call = org_xfce_Trash_display_trash_async (plugin->proxy, display_name, startup_id, thunar_tpa_display_trash_reply, plugin);
+      g_free (startup_id);
       g_free (display_name);
     }
 }
@@ -483,6 +487,7 @@
 thunar_tpa_empty_trash (ThunarTpa *plugin)
 {
   gchar *display_name;
+  gchar *startup_id;
 
   g_return_if_fail (THUNAR_IS_TPA (plugin));
 
@@ -495,7 +500,9 @@
 
       /* schedule a new call */
       display_name = gdk_screen_make_display_name (gtk_widget_get_screen (GTK_WIDGET (plugin)));
-      plugin->empty_trash_call = org_xfce_Trash_empty_trash_async (plugin->proxy, display_name, thunar_tpa_empty_trash_reply, plugin);
+      startup_id = g_strdup_printf ("_TIME%d", gtk_get_current_event_time ());
+      plugin->empty_trash_call = org_xfce_Trash_empty_trash_async (plugin->proxy, display_name, startup_id, thunar_tpa_empty_trash_reply, plugin);
+      g_free (startup_id);
       g_free (display_name);
     }
 }
@@ -507,6 +514,7 @@
                           const gchar **uri_list)
 {
   gchar *display_name;
+  gchar *startup_id;
 
   g_return_val_if_fail (THUNAR_IS_TPA (plugin), FALSE);
   g_return_val_if_fail (uri_list != NULL, FALSE);
@@ -521,7 +529,9 @@
 
   /* schedule a new call */
   display_name = gdk_screen_make_display_name (gtk_widget_get_screen (GTK_WIDGET (plugin)));
-  plugin->move_to_trash_call = org_xfce_Trash_move_to_trash_async (plugin->proxy, uri_list, display_name, thunar_tpa_move_to_trash_reply, plugin);
+  startup_id = g_strdup_printf ("_TIME%d", gtk_get_current_event_time ());
+  plugin->move_to_trash_call = org_xfce_Trash_move_to_trash_async (plugin->proxy, uri_list, display_name, startup_id, thunar_tpa_move_to_trash_reply, plugin);
+  g_free (startup_id);
   g_free (display_name);
 
   return TRUE;
